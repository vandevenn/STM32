
UART_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000670c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800681c  0800681c  0001681c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a28  08006a28  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006a28  08006a28  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a28  08006a28  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a28  08006a28  00016a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a2c  08006a2c  00016a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c30  20000060  08006a90  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c90  08006a90  00021c90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017598  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003303  00000000  00000000  00037664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  0003a968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f49  00000000  00000000  0003bd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000034b5  00000000  00000000  0003cc49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001641c  00000000  00000000  000400fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094555  00000000  00000000  0005651a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000057c8  00000000  00000000  000eaa70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000f0238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006804 	.word	0x08006804

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006804 	.word	0x08006804

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rxData;
uint16_t value = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a09      	ldr	r2, [pc, #36]	; (8000194 <HAL_UART_RxCpltCallback+0x34>)
 800016e:	4293      	cmp	r3, r2
 8000170:	d10b      	bne.n	800018a <HAL_UART_RxCpltCallback+0x2a>
	        // 데이터를 큐에 보냄
	        xQueueSendToBackFromISR(uartQueue, &rxData, NULL);
 8000172:	4b09      	ldr	r3, [pc, #36]	; (8000198 <HAL_UART_RxCpltCallback+0x38>)
 8000174:	6818      	ldr	r0, [r3, #0]
 8000176:	2300      	movs	r3, #0
 8000178:	2200      	movs	r2, #0
 800017a:	4908      	ldr	r1, [pc, #32]	; (800019c <HAL_UART_RxCpltCallback+0x3c>)
 800017c:	f003 fccc 	bl	8003b18 <xQueueGenericSendFromISR>
	        // 다음 데이터 수신을 기다림
	        HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000180:	2201      	movs	r2, #1
 8000182:	4906      	ldr	r1, [pc, #24]	; (800019c <HAL_UART_RxCpltCallback+0x3c>)
 8000184:	4806      	ldr	r0, [pc, #24]	; (80001a0 <HAL_UART_RxCpltCallback+0x40>)
 8000186:	f002 fac4 	bl	8002712 <HAL_UART_Receive_IT>
	    }
	}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40004400 	.word	0x40004400
 8000198:	2000010c 	.word	0x2000010c
 800019c:	20000114 	.word	0x20000114
 80001a0:	200000c4 	.word	0x200000c4

080001a4 <UART_Task>:

void UART_Task(void *pvParameters) {
 80001a4:	b5b0      	push	{r4, r5, r7, lr}
 80001a6:	b0ac      	sub	sp, #176	; 0xb0
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
    char rxBuffer[80];
    char pwm_msg[30];
    char error_msg[] = "Error: PWM width must be between 500 and 1000\r\n";
 80001ac:	4b3a      	ldr	r3, [pc, #232]	; (8000298 <UART_Task+0xf4>)
 80001ae:	f107 040c 	add.w	r4, r7, #12
 80001b2:	461d      	mov	r5, r3
 80001b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80001c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint8_t index = 0;
 80001c4:	2300      	movs	r3, #0
 80001c6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

    while (1) {
        // 큐에서 데이터를 받음
        if (xQueueReceive(uartQueue, &rxBuffer[index], portMAX_DELAY) == pdTRUE) {
 80001ca:	4b34      	ldr	r3, [pc, #208]	; (800029c <UART_Task+0xf8>)
 80001cc:	6818      	ldr	r0, [r3, #0]
 80001ce:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80001d2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80001d6:	4413      	add	r3, r2
 80001d8:	f04f 32ff 	mov.w	r2, #4294967295
 80001dc:	4619      	mov	r1, r3
 80001de:	f003 fd33 	bl	8003c48 <xQueueReceive>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d1f0      	bne.n	80001ca <UART_Task+0x26>
            if (rxBuffer[index] == '\r') {
 80001e8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80001ec:	33b0      	adds	r3, #176	; 0xb0
 80001ee:	443b      	add	r3, r7
 80001f0:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80001f4:	2b0d      	cmp	r3, #13
 80001f6:	d141      	bne.n	800027c <UART_Task+0xd8>
                value = atoi(rxBuffer);
 80001f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80001fc:	4618      	mov	r0, r3
 80001fe:	f005 fd6d 	bl	8005cdc <atoi>
 8000202:	4603      	mov	r3, r0
 8000204:	b29a      	uxth	r2, r3
 8000206:	4b26      	ldr	r3, [pc, #152]	; (80002a0 <UART_Task+0xfc>)
 8000208:	801a      	strh	r2, [r3, #0]
                if ((value >= 500) && (value <= 1000)) {
 800020a:	4b25      	ldr	r3, [pc, #148]	; (80002a0 <UART_Task+0xfc>)
 800020c:	881b      	ldrh	r3, [r3, #0]
 800020e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000212:	d321      	bcc.n	8000258 <UART_Task+0xb4>
 8000214:	4b22      	ldr	r3, [pc, #136]	; (80002a0 <UART_Task+0xfc>)
 8000216:	881b      	ldrh	r3, [r3, #0]
 8000218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800021c:	d81c      	bhi.n	8000258 <UART_Task+0xb4>
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, value);
 800021e:	4b20      	ldr	r3, [pc, #128]	; (80002a0 <UART_Task+0xfc>)
 8000220:	881a      	ldrh	r2, [r3, #0]
 8000222:	4b20      	ldr	r3, [pc, #128]	; (80002a4 <UART_Task+0x100>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	639a      	str	r2, [r3, #56]	; 0x38
                    sprintf(pwm_msg, "현재 PWM 값 : %d\r\n", value);
 8000228:	4b1d      	ldr	r3, [pc, #116]	; (80002a0 <UART_Task+0xfc>)
 800022a:	881b      	ldrh	r3, [r3, #0]
 800022c:	461a      	mov	r2, r3
 800022e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000232:	491d      	ldr	r1, [pc, #116]	; (80002a8 <UART_Task+0x104>)
 8000234:	4618      	mov	r0, r3
 8000236:	f005 fddd 	bl	8005df4 <siprintf>
                    HAL_UART_Transmit(&huart2, (uint8_t*)pwm_msg, strlen(pwm_msg), HAL_MAX_DELAY);
 800023a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ff86 	bl	8000150 <strlen>
 8000244:	4603      	mov	r3, r0
 8000246:	b29a      	uxth	r2, r3
 8000248:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800024c:	f04f 33ff 	mov.w	r3, #4294967295
 8000250:	4816      	ldr	r0, [pc, #88]	; (80002ac <UART_Task+0x108>)
 8000252:	f002 f9db 	bl	800260c <HAL_UART_Transmit>
 8000256:	e00d      	b.n	8000274 <UART_Task+0xd0>
                }
                else {
                    HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8000258:	f107 030c 	add.w	r3, r7, #12
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ff77 	bl	8000150 <strlen>
 8000262:	4603      	mov	r3, r0
 8000264:	b29a      	uxth	r2, r3
 8000266:	f107 010c 	add.w	r1, r7, #12
 800026a:	f04f 33ff 	mov.w	r3, #4294967295
 800026e:	480f      	ldr	r0, [pc, #60]	; (80002ac <UART_Task+0x108>)
 8000270:	f002 f9cc 	bl	800260c <HAL_UART_Transmit>
                }
                index = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800027a:	e7a6      	b.n	80001ca <UART_Task+0x26>
            }
            else {
                index++;
 800027c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000280:	3301      	adds	r3, #1
 8000282:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
                if (index >= sizeof(rxBuffer)) {
 8000286:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800028a:	2b4f      	cmp	r3, #79	; 0x4f
 800028c:	d99d      	bls.n	80001ca <UART_Task+0x26>
                    // 버퍼가 가득 찼을 때 처리
                    index = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        if (xQueueReceive(uartQueue, &rxBuffer[index], portMAX_DELAY) == pdTRUE) {
 8000294:	e799      	b.n	80001ca <UART_Task+0x26>
 8000296:	bf00      	nop
 8000298:	08006840 	.word	0x08006840
 800029c:	2000010c 	.word	0x2000010c
 80002a0:	20000116 	.word	0x20000116
 80002a4:	2000007c 	.word	0x2000007c
 80002a8:	08006828 	.word	0x08006828
 80002ac:	200000c4 	.word	0x200000c4

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b087      	sub	sp, #28
 80002b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b6:	f000 fb8f 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ba:	f000 f855 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002be:	f000 f91d 	bl	80004fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002c2:	f000 f8f1 	bl	80004a8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80002c6:	f000 f895 	bl	80003f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uartQueue = xQueueCreate(80, sizeof(char));
 80002ca:	2200      	movs	r2, #0
 80002cc:	2101      	movs	r1, #1
 80002ce:	2050      	movs	r0, #80	; 0x50
 80002d0:	f003 fac3 	bl	800385a <xQueueGenericCreate>
 80002d4:	4603      	mov	r3, r0
 80002d6:	4a1a      	ldr	r2, [pc, #104]	; (8000340 <main+0x90>)
 80002d8:	6013      	str	r3, [r2, #0]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80002da:	2104      	movs	r1, #4
 80002dc:	4819      	ldr	r0, [pc, #100]	; (8000344 <main+0x94>)
 80002de:	f001 fc37 	bl	8001b50 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxData, 1);
 80002e2:	2201      	movs	r2, #1
 80002e4:	4918      	ldr	r1, [pc, #96]	; (8000348 <main+0x98>)
 80002e6:	4819      	ldr	r0, [pc, #100]	; (800034c <main+0x9c>)
 80002e8:	f002 fa13 	bl	8002712 <HAL_UART_Receive_IT>

  char welcome_msg[] = "PWM 입력: ";
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <main+0xa0>)
 80002ee:	463c      	mov	r4, r7
 80002f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002f2:	c407      	stmia	r4!, {r0, r1, r2}
 80002f4:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)welcome_msg, strlen(welcome_msg), HAL_MAX_DELAY);
 80002f6:	463b      	mov	r3, r7
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff29 	bl	8000150 <strlen>
 80002fe:	4603      	mov	r3, r0
 8000300:	b29a      	uxth	r2, r3
 8000302:	4639      	mov	r1, r7
 8000304:	f04f 33ff 	mov.w	r3, #4294967295
 8000308:	4810      	ldr	r0, [pc, #64]	; (800034c <main+0x9c>)
 800030a:	f002 f97f 	bl	800260c <HAL_UART_Transmit>

  xTaskCreate(UART_Task, "UART_Task", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 800030e:	2300      	movs	r3, #0
 8000310:	9301      	str	r3, [sp, #4]
 8000312:	2301      	movs	r3, #1
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	2300      	movs	r3, #0
 8000318:	2280      	movs	r2, #128	; 0x80
 800031a:	490e      	ldr	r1, [pc, #56]	; (8000354 <main+0xa4>)
 800031c:	480e      	ldr	r0, [pc, #56]	; (8000358 <main+0xa8>)
 800031e:	f003 ff3b 	bl	8004198 <xTaskCreate>

  vTaskStartScheduler();
 8000322:	f004 f8c1 	bl	80044a8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000326:	f002 ff99 	bl	800325c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800032a:	4a0c      	ldr	r2, [pc, #48]	; (800035c <main+0xac>)
 800032c:	2100      	movs	r1, #0
 800032e:	480c      	ldr	r0, [pc, #48]	; (8000360 <main+0xb0>)
 8000330:	f002 fffa 	bl	8003328 <osThreadNew>
 8000334:	4603      	mov	r3, r0
 8000336:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <main+0xb4>)
 8000338:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800033a:	f002 ffc1 	bl	80032c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800033e:	e7fe      	b.n	800033e <main+0x8e>
 8000340:	2000010c 	.word	0x2000010c
 8000344:	2000007c 	.word	0x2000007c
 8000348:	20000114 	.word	0x20000114
 800034c:	200000c4 	.word	0x200000c4
 8000350:	0800687c 	.word	0x0800687c
 8000354:	08006870 	.word	0x08006870
 8000358:	080001a5 	.word	0x080001a5
 800035c:	080068a4 	.word	0x080068a4
 8000360:	080005d9 	.word	0x080005d9
 8000364:	20000110 	.word	0x20000110

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b090      	sub	sp, #64	; 0x40
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 0318 	add.w	r3, r7, #24
 8000372:	2228      	movs	r2, #40	; 0x28
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f005 fd5c 	bl	8005e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800038a:	2301      	movs	r3, #1
 800038c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800038e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000392:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000398:	2301      	movs	r3, #1
 800039a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039c:	2302      	movs	r3, #2
 800039e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ac:	f107 0318 	add.w	r3, r7, #24
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fe93 	bl	80010dc <HAL_RCC_OscConfig>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003bc:	f000 f926 	bl	800060c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	230f      	movs	r3, #15
 80003c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c4:	2302      	movs	r3, #2
 80003c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2102      	movs	r1, #2
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 f900 	bl	80015e0 <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003e6:	f000 f911 	bl	800060c <Error_Handler>
  }
}
 80003ea:	bf00      	nop
 80003ec:	3740      	adds	r7, #64	; 0x40
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08a      	sub	sp, #40	; 0x28
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fa:	f107 0320 	add.w	r3, r7, #32
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
 8000410:	611a      	str	r2, [r3, #16]
 8000412:	615a      	str	r2, [r3, #20]
 8000414:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000416:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <MX_TIM3_Init+0xac>)
 8000418:	4a22      	ldr	r2, [pc, #136]	; (80004a4 <MX_TIM3_Init+0xb0>)
 800041a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800041c:	4b20      	ldr	r3, [pc, #128]	; (80004a0 <MX_TIM3_Init+0xac>)
 800041e:	2247      	movs	r2, #71	; 0x47
 8000420:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <MX_TIM3_Init+0xac>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000428:	4b1d      	ldr	r3, [pc, #116]	; (80004a0 <MX_TIM3_Init+0xac>)
 800042a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800042e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000430:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <MX_TIM3_Init+0xac>)
 8000432:	2200      	movs	r2, #0
 8000434:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000436:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <MX_TIM3_Init+0xac>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800043c:	4818      	ldr	r0, [pc, #96]	; (80004a0 <MX_TIM3_Init+0xac>)
 800043e:	f001 fb37 	bl	8001ab0 <HAL_TIM_PWM_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000448:	f000 f8e0 	bl	800060c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800044c:	2300      	movs	r3, #0
 800044e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000450:	2300      	movs	r3, #0
 8000452:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000454:	f107 0320 	add.w	r3, r7, #32
 8000458:	4619      	mov	r1, r3
 800045a:	4811      	ldr	r0, [pc, #68]	; (80004a0 <MX_TIM3_Init+0xac>)
 800045c:	f002 f816 	bl	800248c <HAL_TIMEx_MasterConfigSynchronization>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000466:	f000 f8d1 	bl	800060c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800046a:	2360      	movs	r3, #96	; 0x60
 800046c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2204      	movs	r2, #4
 800047e:	4619      	mov	r1, r3
 8000480:	4807      	ldr	r0, [pc, #28]	; (80004a0 <MX_TIM3_Init+0xac>)
 8000482:	f001 fd0f 	bl	8001ea4 <HAL_TIM_PWM_ConfigChannel>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800048c:	f000 f8be 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000490:	4803      	ldr	r0, [pc, #12]	; (80004a0 <MX_TIM3_Init+0xac>)
 8000492:	f000 f917 	bl	80006c4 <HAL_TIM_MspPostInit>

}
 8000496:	bf00      	nop
 8000498:	3728      	adds	r7, #40	; 0x28
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	2000007c 	.word	0x2000007c
 80004a4:	40000400 	.word	0x40000400

080004a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004ae:	4a12      	ldr	r2, [pc, #72]	; (80004f8 <MX_USART2_UART_Init+0x50>)
 80004b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004ce:	220c      	movs	r2, #12
 80004d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004e0:	f002 f844 	bl	800256c <HAL_UART_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004ea:	f000 f88f 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200000c4 	.word	0x200000c4
 80004f8:	40004400 	.word	0x40004400

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000510:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <MX_GPIO_Init+0xcc>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a2c      	ldr	r2, [pc, #176]	; (80005c8 <MX_GPIO_Init+0xcc>)
 8000516:	f043 0310 	orr.w	r3, r3, #16
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <MX_GPIO_Init+0xcc>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0310 	and.w	r3, r3, #16
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000528:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <MX_GPIO_Init+0xcc>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a26      	ldr	r2, [pc, #152]	; (80005c8 <MX_GPIO_Init+0xcc>)
 800052e:	f043 0320 	orr.w	r3, r3, #32
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <MX_GPIO_Init+0xcc>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0320 	and.w	r3, r3, #32
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <MX_GPIO_Init+0xcc>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a20      	ldr	r2, [pc, #128]	; (80005c8 <MX_GPIO_Init+0xcc>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <MX_GPIO_Init+0xcc>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_GPIO_Init+0xcc>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a1a      	ldr	r2, [pc, #104]	; (80005c8 <MX_GPIO_Init+0xcc>)
 800055e:	f043 0308 	orr.w	r3, r3, #8
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_GPIO_Init+0xcc>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0308 	and.w	r3, r3, #8
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2120      	movs	r1, #32
 8000574:	4815      	ldr	r0, [pc, #84]	; (80005cc <MX_GPIO_Init+0xd0>)
 8000576:	f000 fd77 	bl	8001068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800057a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800057e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000580:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <MX_GPIO_Init+0xd4>)
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	4619      	mov	r1, r3
 800058e:	4811      	ldr	r0, [pc, #68]	; (80005d4 <MX_GPIO_Init+0xd8>)
 8000590:	f000 fbe6 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000594:	2320      	movs	r3, #32
 8000596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	4808      	ldr	r0, [pc, #32]	; (80005cc <MX_GPIO_Init+0xd0>)
 80005ac:	f000 fbd8 	bl	8000d60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2105      	movs	r1, #5
 80005b4:	2028      	movs	r0, #40	; 0x28
 80005b6:	f000 faf6 	bl	8000ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005ba:	2028      	movs	r0, #40	; 0x28
 80005bc:	f000 fb0f 	bl	8000bde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005c0:	bf00      	nop
 80005c2:	3720      	adds	r7, #32
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010800 	.word	0x40010800
 80005d0:	10110000 	.word	0x10110000
 80005d4:	40011000 	.word	0x40011000

080005d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f002 ff4b 	bl	800347c <osDelay>
 80005e6:	e7fb      	b.n	80005e0 <StartDefaultTask+0x8>

080005e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d101      	bne.n	80005fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005fa:	f000 fa03 	bl	8000a04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40000800 	.word	0x40000800

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000614:	e7fe      	b.n	8000614 <Error_Handler+0x8>
	...

08000618 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <HAL_MspInit+0x68>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <HAL_MspInit+0x68>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <HAL_MspInit+0x68>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <HAL_MspInit+0x68>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a11      	ldr	r2, [pc, #68]	; (8000680 <HAL_MspInit+0x68>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <HAL_MspInit+0x68>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	210f      	movs	r1, #15
 8000652:	f06f 0001 	mvn.w	r0, #1
 8000656:	f000 faa6 	bl	8000ba6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <HAL_MspInit+0x6c>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <HAL_MspInit+0x6c>)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000
 8000684:	40010000 	.word	0x40010000

08000688 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a09      	ldr	r2, [pc, #36]	; (80006bc <HAL_TIM_PWM_MspInit+0x34>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d10b      	bne.n	80006b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <HAL_TIM_PWM_MspInit+0x38>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <HAL_TIM_PWM_MspInit+0x38>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_TIM_PWM_MspInit+0x38>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006b2:	bf00      	nop
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	40000400 	.word	0x40000400
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a0f      	ldr	r2, [pc, #60]	; (800071c <HAL_TIM_MspPostInit+0x58>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d117      	bne.n	8000714 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <HAL_TIM_MspPostInit+0x5c>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <HAL_TIM_MspPostInit+0x5c>)
 80006ea:	f043 0304 	orr.w	r3, r3, #4
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <HAL_TIM_MspPostInit+0x5c>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000700:	2302      	movs	r3, #2
 8000702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2302      	movs	r3, #2
 8000706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	4619      	mov	r1, r3
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <HAL_TIM_MspPostInit+0x60>)
 8000710:	f000 fb26 	bl	8000d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000714:	bf00      	nop
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40000400 	.word	0x40000400
 8000720:	40021000 	.word	0x40021000
 8000724:	40010800 	.word	0x40010800

08000728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <HAL_UART_MspInit+0x80>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d12b      	bne.n	80007a0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <HAL_UART_MspInit+0x84>)
 800074a:	69db      	ldr	r3, [r3, #28]
 800074c:	4a17      	ldr	r2, [pc, #92]	; (80007ac <HAL_UART_MspInit+0x84>)
 800074e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000752:	61d3      	str	r3, [r2, #28]
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_UART_MspInit+0x84>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_UART_MspInit+0x84>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a11      	ldr	r2, [pc, #68]	; (80007ac <HAL_UART_MspInit+0x84>)
 8000766:	f043 0304 	orr.w	r3, r3, #4
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <HAL_UART_MspInit+0x84>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f003 0304 	and.w	r3, r3, #4
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000778:	230c      	movs	r3, #12
 800077a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	2302      	movs	r3, #2
 800077e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2302      	movs	r3, #2
 8000782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4619      	mov	r1, r3
 800078a:	4809      	ldr	r0, [pc, #36]	; (80007b0 <HAL_UART_MspInit+0x88>)
 800078c:	f000 fae8 	bl	8000d60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2105      	movs	r1, #5
 8000794:	2026      	movs	r0, #38	; 0x26
 8000796:	f000 fa06 	bl	8000ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800079a:	2026      	movs	r0, #38	; 0x26
 800079c:	f000 fa1f 	bl	8000bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40004400 	.word	0x40004400
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40010800 	.word	0x40010800

080007b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08e      	sub	sp, #56	; 0x38
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80007ca:	4b34      	ldr	r3, [pc, #208]	; (800089c <HAL_InitTick+0xe8>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a33      	ldr	r2, [pc, #204]	; (800089c <HAL_InitTick+0xe8>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	61d3      	str	r3, [r2, #28]
 80007d6:	4b31      	ldr	r3, [pc, #196]	; (800089c <HAL_InitTick+0xe8>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e2:	f107 0210 	add.w	r2, r7, #16
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 f867 	bl	80018c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007f2:	6a3b      	ldr	r3, [r7, #32]
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d103      	bne.n	8000804 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007fc:	f001 f838 	bl	8001870 <HAL_RCC_GetPCLK1Freq>
 8000800:	6378      	str	r0, [r7, #52]	; 0x34
 8000802:	e004      	b.n	800080e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000804:	f001 f834 	bl	8001870 <HAL_RCC_GetPCLK1Freq>
 8000808:	4603      	mov	r3, r0
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800080e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <HAL_InitTick+0xec>)
 8000812:	fba2 2303 	umull	r2, r3, r2, r3
 8000816:	0c9b      	lsrs	r3, r3, #18
 8000818:	3b01      	subs	r3, #1
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <HAL_InitTick+0xf0>)
 800081e:	4a22      	ldr	r2, [pc, #136]	; (80008a8 <HAL_InitTick+0xf4>)
 8000820:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <HAL_InitTick+0xf0>)
 8000824:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000828:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800082a:	4a1e      	ldr	r2, [pc, #120]	; (80008a4 <HAL_InitTick+0xf0>)
 800082c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800082e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <HAL_InitTick+0xf0>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <HAL_InitTick+0xf0>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <HAL_InitTick+0xf0>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000842:	4818      	ldr	r0, [pc, #96]	; (80008a4 <HAL_InitTick+0xf0>)
 8000844:	f001 f88a 	bl	800195c <HAL_TIM_Base_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800084e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000852:	2b00      	cmp	r3, #0
 8000854:	d11b      	bne.n	800088e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000856:	4813      	ldr	r0, [pc, #76]	; (80008a4 <HAL_InitTick+0xf0>)
 8000858:	f001 f8d8 	bl	8001a0c <HAL_TIM_Base_Start_IT>
 800085c:	4603      	mov	r3, r0
 800085e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000862:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000866:	2b00      	cmp	r3, #0
 8000868:	d111      	bne.n	800088e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800086a:	201e      	movs	r0, #30
 800086c:	f000 f9b7 	bl	8000bde <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b0f      	cmp	r3, #15
 8000874:	d808      	bhi.n	8000888 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000876:	2200      	movs	r2, #0
 8000878:	6879      	ldr	r1, [r7, #4]
 800087a:	201e      	movs	r0, #30
 800087c:	f000 f993 	bl	8000ba6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <HAL_InitTick+0xf8>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
 8000886:	e002      	b.n	800088e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800088e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000892:	4618      	mov	r0, r3
 8000894:	3738      	adds	r7, #56	; 0x38
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000
 80008a0:	431bde83 	.word	0x431bde83
 80008a4:	20000118 	.word	0x20000118
 80008a8:	40000800 	.word	0x40000800
 80008ac:	20000004 	.word	0x20000004

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
	...

080008dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <TIM4_IRQHandler+0x10>)
 80008e2:	f001 f9d7 	bl	8001c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000118 	.word	0x20000118

080008f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <USART2_IRQHandler+0x10>)
 80008f6:	f001 ff31 	bl	800275c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000c4 	.word	0x200000c4

08000904 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000908:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800090c:	f000 fbc4 	bl	8001098 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800091c:	4a14      	ldr	r2, [pc, #80]	; (8000970 <_sbrk+0x5c>)
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <_sbrk+0x60>)
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <_sbrk+0x64>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <_sbrk+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	429a      	cmp	r2, r3
 8000942:	d207      	bcs.n	8000954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000944:	f005 fad4 	bl	8005ef0 <__errno>
 8000948:	4603      	mov	r3, r0
 800094a:	220c      	movs	r2, #12
 800094c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	e009      	b.n	8000968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <_sbrk+0x64>)
 8000964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20005000 	.word	0x20005000
 8000974:	00000400 	.word	0x00000400
 8000978:	20000160 	.word	0x20000160
 800097c:	20001c90 	.word	0x20001c90

08000980 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800098c:	f7ff fff8 	bl	8000980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000990:	480b      	ldr	r0, [pc, #44]	; (80009c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000992:	490c      	ldr	r1, [pc, #48]	; (80009c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000994:	4a0c      	ldr	r2, [pc, #48]	; (80009c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000998:	e002      	b.n	80009a0 <LoopCopyDataInit>

0800099a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800099c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099e:	3304      	adds	r3, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a4:	d3f9      	bcc.n	800099a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a6:	4a09      	ldr	r2, [pc, #36]	; (80009cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009a8:	4c09      	ldr	r4, [pc, #36]	; (80009d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ac:	e001      	b.n	80009b2 <LoopFillZerobss>

080009ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b0:	3204      	adds	r2, #4

080009b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b4:	d3fb      	bcc.n	80009ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b6:	f005 faa1 	bl	8005efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ba:	f7ff fc79 	bl	80002b0 <main>
  bx lr
 80009be:	4770      	bx	lr
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009c8:	08006a30 	.word	0x08006a30
  ldr r2, =_sbss
 80009cc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009d0:	20001c90 	.word	0x20001c90

080009d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_2_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_Init+0x28>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_Init+0x28>)
 80009e2:	f043 0310 	orr.w	r3, r3, #16
 80009e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e8:	2003      	movs	r0, #3
 80009ea:	f000 f8d1 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ee:	200f      	movs	r0, #15
 80009f0:	f7ff fee0 	bl	80007b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f4:	f7ff fe10 	bl	8000618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40022000 	.word	0x40022000

08000a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_IncTick+0x1c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x20>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <HAL_IncTick+0x20>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000164 	.word	0x20000164

08000a28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b02      	ldr	r3, [pc, #8]	; (8000a38 <HAL_GetTick+0x10>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	20000164 	.word	0x20000164

08000a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <__NVIC_GetPriorityGrouping+0x18>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	f003 0307 	and.w	r3, r3, #7
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db0b      	blt.n	8000aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 021f 	and.w	r2, r3, #31
 8000ab8:	4906      	ldr	r1, [pc, #24]	; (8000ad4 <__NVIC_EnableIRQ+0x34>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	e000e100 	.word	0xe000e100

08000ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db0a      	blt.n	8000b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	490c      	ldr	r1, [pc, #48]	; (8000b24 <__NVIC_SetPriority+0x4c>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	440b      	add	r3, r1
 8000afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b00:	e00a      	b.n	8000b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4908      	ldr	r1, [pc, #32]	; (8000b28 <__NVIC_SetPriority+0x50>)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f003 030f 	and.w	r3, r3, #15
 8000b0e:	3b04      	subs	r3, #4
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	440b      	add	r3, r1
 8000b16:	761a      	strb	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000e100 	.word	0xe000e100
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f1c3 0307 	rsb	r3, r3, #7
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	bf28      	it	cs
 8000b4a:	2304      	movcs	r3, #4
 8000b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3304      	adds	r3, #4
 8000b52:	2b06      	cmp	r3, #6
 8000b54:	d902      	bls.n	8000b5c <NVIC_EncodePriority+0x30>
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3b03      	subs	r3, #3
 8000b5a:	e000      	b.n	8000b5e <NVIC_EncodePriority+0x32>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	f04f 32ff 	mov.w	r2, #4294967295
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	401a      	ands	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	43d9      	mvns	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	4313      	orrs	r3, r2
         );
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3724      	adds	r7, #36	; 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff4f 	bl	8000a3c <__NVIC_SetPriorityGrouping>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff64 	bl	8000a84 <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ffb2 	bl	8000b2c <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff81 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff57 	bl	8000aa0 <__NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b085      	sub	sp, #20
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d008      	beq.n	8000c24 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2204      	movs	r2, #4
 8000c16:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e020      	b.n	8000c66 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f022 020e 	bic.w	r2, r2, #14
 8000c32:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f022 0201 	bic.w	r2, r2, #1
 8000c42:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c52:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2201      	movs	r2, #1
 8000c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d005      	beq.n	8000c94 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	73fb      	strb	r3, [r7, #15]
 8000c92:	e051      	b.n	8000d38 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f022 020e 	bic.w	r2, r2, #14
 8000ca2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f022 0201 	bic.w	r2, r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a22      	ldr	r2, [pc, #136]	; (8000d44 <HAL_DMA_Abort_IT+0xd4>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d029      	beq.n	8000d12 <HAL_DMA_Abort_IT+0xa2>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <HAL_DMA_Abort_IT+0xd8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d022      	beq.n	8000d0e <HAL_DMA_Abort_IT+0x9e>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a1f      	ldr	r2, [pc, #124]	; (8000d4c <HAL_DMA_Abort_IT+0xdc>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d01a      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x98>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a1e      	ldr	r2, [pc, #120]	; (8000d50 <HAL_DMA_Abort_IT+0xe0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d012      	beq.n	8000d02 <HAL_DMA_Abort_IT+0x92>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <HAL_DMA_Abort_IT+0xe4>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d00a      	beq.n	8000cfc <HAL_DMA_Abort_IT+0x8c>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <HAL_DMA_Abort_IT+0xe8>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d102      	bne.n	8000cf6 <HAL_DMA_Abort_IT+0x86>
 8000cf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cf4:	e00e      	b.n	8000d14 <HAL_DMA_Abort_IT+0xa4>
 8000cf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cfa:	e00b      	b.n	8000d14 <HAL_DMA_Abort_IT+0xa4>
 8000cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d00:	e008      	b.n	8000d14 <HAL_DMA_Abort_IT+0xa4>
 8000d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d06:	e005      	b.n	8000d14 <HAL_DMA_Abort_IT+0xa4>
 8000d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d0c:	e002      	b.n	8000d14 <HAL_DMA_Abort_IT+0xa4>
 8000d0e:	2310      	movs	r3, #16
 8000d10:	e000      	b.n	8000d14 <HAL_DMA_Abort_IT+0xa4>
 8000d12:	2301      	movs	r3, #1
 8000d14:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <HAL_DMA_Abort_IT+0xec>)
 8000d16:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	4798      	blx	r3
    } 
  }
  return status;
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40020008 	.word	0x40020008
 8000d48:	4002001c 	.word	0x4002001c
 8000d4c:	40020030 	.word	0x40020030
 8000d50:	40020044 	.word	0x40020044
 8000d54:	40020058 	.word	0x40020058
 8000d58:	4002006c 	.word	0x4002006c
 8000d5c:	40020000 	.word	0x40020000

08000d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b08b      	sub	sp, #44	; 0x2c
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	e169      	b.n	8001048 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d74:	2201      	movs	r2, #1
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	69fa      	ldr	r2, [r7, #28]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f040 8158 	bne.w	8001042 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	4a9a      	ldr	r2, [pc, #616]	; (8001000 <HAL_GPIO_Init+0x2a0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d05e      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
 8000d9c:	4a98      	ldr	r2, [pc, #608]	; (8001000 <HAL_GPIO_Init+0x2a0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d875      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000da2:	4a98      	ldr	r2, [pc, #608]	; (8001004 <HAL_GPIO_Init+0x2a4>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d058      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
 8000da8:	4a96      	ldr	r2, [pc, #600]	; (8001004 <HAL_GPIO_Init+0x2a4>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d86f      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000dae:	4a96      	ldr	r2, [pc, #600]	; (8001008 <HAL_GPIO_Init+0x2a8>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d052      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
 8000db4:	4a94      	ldr	r2, [pc, #592]	; (8001008 <HAL_GPIO_Init+0x2a8>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d869      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000dba:	4a94      	ldr	r2, [pc, #592]	; (800100c <HAL_GPIO_Init+0x2ac>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d04c      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
 8000dc0:	4a92      	ldr	r2, [pc, #584]	; (800100c <HAL_GPIO_Init+0x2ac>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d863      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000dc6:	4a92      	ldr	r2, [pc, #584]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d046      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
 8000dcc:	4a90      	ldr	r2, [pc, #576]	; (8001010 <HAL_GPIO_Init+0x2b0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d85d      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000dd2:	2b12      	cmp	r3, #18
 8000dd4:	d82a      	bhi.n	8000e2c <HAL_GPIO_Init+0xcc>
 8000dd6:	2b12      	cmp	r3, #18
 8000dd8:	d859      	bhi.n	8000e8e <HAL_GPIO_Init+0x12e>
 8000dda:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <HAL_GPIO_Init+0x80>)
 8000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de0:	08000e5b 	.word	0x08000e5b
 8000de4:	08000e35 	.word	0x08000e35
 8000de8:	08000e47 	.word	0x08000e47
 8000dec:	08000e89 	.word	0x08000e89
 8000df0:	08000e8f 	.word	0x08000e8f
 8000df4:	08000e8f 	.word	0x08000e8f
 8000df8:	08000e8f 	.word	0x08000e8f
 8000dfc:	08000e8f 	.word	0x08000e8f
 8000e00:	08000e8f 	.word	0x08000e8f
 8000e04:	08000e8f 	.word	0x08000e8f
 8000e08:	08000e8f 	.word	0x08000e8f
 8000e0c:	08000e8f 	.word	0x08000e8f
 8000e10:	08000e8f 	.word	0x08000e8f
 8000e14:	08000e8f 	.word	0x08000e8f
 8000e18:	08000e8f 	.word	0x08000e8f
 8000e1c:	08000e8f 	.word	0x08000e8f
 8000e20:	08000e8f 	.word	0x08000e8f
 8000e24:	08000e3d 	.word	0x08000e3d
 8000e28:	08000e51 	.word	0x08000e51
 8000e2c:	4a79      	ldr	r2, [pc, #484]	; (8001014 <HAL_GPIO_Init+0x2b4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d013      	beq.n	8000e5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e32:	e02c      	b.n	8000e8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	623b      	str	r3, [r7, #32]
          break;
 8000e3a:	e029      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	3304      	adds	r3, #4
 8000e42:	623b      	str	r3, [r7, #32]
          break;
 8000e44:	e024      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	3308      	adds	r3, #8
 8000e4c:	623b      	str	r3, [r7, #32]
          break;
 8000e4e:	e01f      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	330c      	adds	r3, #12
 8000e56:	623b      	str	r3, [r7, #32]
          break;
 8000e58:	e01a      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e62:	2304      	movs	r3, #4
 8000e64:	623b      	str	r3, [r7, #32]
          break;
 8000e66:	e013      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d105      	bne.n	8000e7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e70:	2308      	movs	r3, #8
 8000e72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69fa      	ldr	r2, [r7, #28]
 8000e78:	611a      	str	r2, [r3, #16]
          break;
 8000e7a:	e009      	b.n	8000e90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69fa      	ldr	r2, [r7, #28]
 8000e84:	615a      	str	r2, [r3, #20]
          break;
 8000e86:	e003      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
          break;
 8000e8c:	e000      	b.n	8000e90 <HAL_GPIO_Init+0x130>
          break;
 8000e8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2bff      	cmp	r3, #255	; 0xff
 8000e94:	d801      	bhi.n	8000e9a <HAL_GPIO_Init+0x13a>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	e001      	b.n	8000e9e <HAL_GPIO_Init+0x13e>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2bff      	cmp	r3, #255	; 0xff
 8000ea4:	d802      	bhi.n	8000eac <HAL_GPIO_Init+0x14c>
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	e002      	b.n	8000eb2 <HAL_GPIO_Init+0x152>
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	3b08      	subs	r3, #8
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	210f      	movs	r1, #15
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	6a39      	ldr	r1, [r7, #32]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 80b1 	beq.w	8001042 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee0:	4b4d      	ldr	r3, [pc, #308]	; (8001018 <HAL_GPIO_Init+0x2b8>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a4c      	ldr	r2, [pc, #304]	; (8001018 <HAL_GPIO_Init+0x2b8>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b4a      	ldr	r3, [pc, #296]	; (8001018 <HAL_GPIO_Init+0x2b8>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ef8:	4a48      	ldr	r2, [pc, #288]	; (800101c <HAL_GPIO_Init+0x2bc>)
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3302      	adds	r3, #2
 8000f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	220f      	movs	r2, #15
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a40      	ldr	r2, [pc, #256]	; (8001020 <HAL_GPIO_Init+0x2c0>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d013      	beq.n	8000f4c <HAL_GPIO_Init+0x1ec>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a3f      	ldr	r2, [pc, #252]	; (8001024 <HAL_GPIO_Init+0x2c4>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d00d      	beq.n	8000f48 <HAL_GPIO_Init+0x1e8>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a3e      	ldr	r2, [pc, #248]	; (8001028 <HAL_GPIO_Init+0x2c8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d007      	beq.n	8000f44 <HAL_GPIO_Init+0x1e4>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a3d      	ldr	r2, [pc, #244]	; (800102c <HAL_GPIO_Init+0x2cc>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d101      	bne.n	8000f40 <HAL_GPIO_Init+0x1e0>
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e006      	b.n	8000f4e <HAL_GPIO_Init+0x1ee>
 8000f40:	2304      	movs	r3, #4
 8000f42:	e004      	b.n	8000f4e <HAL_GPIO_Init+0x1ee>
 8000f44:	2302      	movs	r3, #2
 8000f46:	e002      	b.n	8000f4e <HAL_GPIO_Init+0x1ee>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <HAL_GPIO_Init+0x1ee>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f50:	f002 0203 	and.w	r2, r2, #3
 8000f54:	0092      	lsls	r2, r2, #2
 8000f56:	4093      	lsls	r3, r2
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f5e:	492f      	ldr	r1, [pc, #188]	; (800101c <HAL_GPIO_Init+0x2bc>)
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3302      	adds	r3, #2
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d006      	beq.n	8000f86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f78:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	492c      	ldr	r1, [pc, #176]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	608b      	str	r3, [r1, #8]
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f86:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	4928      	ldr	r1, [pc, #160]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d006      	beq.n	8000fae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	4922      	ldr	r1, [pc, #136]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	60cb      	str	r3, [r1, #12]
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	491e      	ldr	r1, [pc, #120]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d006      	beq.n	8000fd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	4918      	ldr	r1, [pc, #96]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	4914      	ldr	r1, [pc, #80]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d021      	beq.n	8001034 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	490e      	ldr	r1, [pc, #56]	; (8001030 <HAL_GPIO_Init+0x2d0>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	600b      	str	r3, [r1, #0]
 8000ffc:	e021      	b.n	8001042 <HAL_GPIO_Init+0x2e2>
 8000ffe:	bf00      	nop
 8001000:	10320000 	.word	0x10320000
 8001004:	10310000 	.word	0x10310000
 8001008:	10220000 	.word	0x10220000
 800100c:	10210000 	.word	0x10210000
 8001010:	10120000 	.word	0x10120000
 8001014:	10110000 	.word	0x10110000
 8001018:	40021000 	.word	0x40021000
 800101c:	40010000 	.word	0x40010000
 8001020:	40010800 	.word	0x40010800
 8001024:	40010c00 	.word	0x40010c00
 8001028:	40011000 	.word	0x40011000
 800102c:	40011400 	.word	0x40011400
 8001030:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_GPIO_Init+0x304>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	43db      	mvns	r3, r3
 800103c:	4909      	ldr	r1, [pc, #36]	; (8001064 <HAL_GPIO_Init+0x304>)
 800103e:	4013      	ands	r3, r2
 8001040:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	3301      	adds	r3, #1
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	fa22 f303 	lsr.w	r3, r2, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	f47f ae8e 	bne.w	8000d74 <HAL_GPIO_Init+0x14>
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	372c      	adds	r7, #44	; 0x2c
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	40010400 	.word	0x40010400

08001068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
 8001074:	4613      	mov	r3, r2
 8001076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001078:	787b      	ldrb	r3, [r7, #1]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001084:	e003      	b.n	800108e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	041a      	lsls	r2, r3, #16
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	611a      	str	r2, [r3, #16]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010a4:	695a      	ldr	r2, [r3, #20]
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	4013      	ands	r3, r2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d006      	beq.n	80010bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010ae:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f806 	bl	80010c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40010400 	.word	0x40010400

080010c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e272      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 8087 	beq.w	800120a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010fc:	4b92      	ldr	r3, [pc, #584]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 030c 	and.w	r3, r3, #12
 8001104:	2b04      	cmp	r3, #4
 8001106:	d00c      	beq.n	8001122 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001108:	4b8f      	ldr	r3, [pc, #572]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 030c 	and.w	r3, r3, #12
 8001110:	2b08      	cmp	r3, #8
 8001112:	d112      	bne.n	800113a <HAL_RCC_OscConfig+0x5e>
 8001114:	4b8c      	ldr	r3, [pc, #560]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001120:	d10b      	bne.n	800113a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001122:	4b89      	ldr	r3, [pc, #548]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d06c      	beq.n	8001208 <HAL_RCC_OscConfig+0x12c>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d168      	bne.n	8001208 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e24c      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001142:	d106      	bne.n	8001152 <HAL_RCC_OscConfig+0x76>
 8001144:	4b80      	ldr	r3, [pc, #512]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a7f      	ldr	r2, [pc, #508]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800114a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	e02e      	b.n	80011b0 <HAL_RCC_OscConfig+0xd4>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10c      	bne.n	8001174 <HAL_RCC_OscConfig+0x98>
 800115a:	4b7b      	ldr	r3, [pc, #492]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a7a      	ldr	r2, [pc, #488]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b78      	ldr	r3, [pc, #480]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a77      	ldr	r2, [pc, #476]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800116c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e01d      	b.n	80011b0 <HAL_RCC_OscConfig+0xd4>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0xbc>
 800117e:	4b72      	ldr	r3, [pc, #456]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a71      	ldr	r2, [pc, #452]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b6f      	ldr	r3, [pc, #444]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a6e      	ldr	r2, [pc, #440]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e00b      	b.n	80011b0 <HAL_RCC_OscConfig+0xd4>
 8001198:	4b6b      	ldr	r3, [pc, #428]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a6a      	ldr	r2, [pc, #424]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800119e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b68      	ldr	r3, [pc, #416]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a67      	ldr	r2, [pc, #412]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 80011aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d013      	beq.n	80011e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fc36 	bl	8000a28 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fc32 	bl	8000a28 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	; 0x64
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e200      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	4b5d      	ldr	r3, [pc, #372]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f0      	beq.n	80011c0 <HAL_RCC_OscConfig+0xe4>
 80011de:	e014      	b.n	800120a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fc22 	bl	8000a28 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fc1e 	bl	8000a28 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	; 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e1ec      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	4b53      	ldr	r3, [pc, #332]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x10c>
 8001206:	e000      	b.n	800120a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d063      	beq.n	80012de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001216:	4b4c      	ldr	r3, [pc, #304]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001222:	4b49      	ldr	r3, [pc, #292]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b08      	cmp	r3, #8
 800122c:	d11c      	bne.n	8001268 <HAL_RCC_OscConfig+0x18c>
 800122e:	4b46      	ldr	r3, [pc, #280]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d116      	bne.n	8001268 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	4b43      	ldr	r3, [pc, #268]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d005      	beq.n	8001252 <HAL_RCC_OscConfig+0x176>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d001      	beq.n	8001252 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e1c0      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	4b3d      	ldr	r3, [pc, #244]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4939      	ldr	r1, [pc, #228]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001266:	e03a      	b.n	80012de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d020      	beq.n	80012b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001270:	4b36      	ldr	r3, [pc, #216]	; (800134c <HAL_RCC_OscConfig+0x270>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fbd7 	bl	8000a28 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff fbd3 	bl	8000a28 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e1a1      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	4927      	ldr	r1, [pc, #156]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
 80012b0:	e015      	b.n	80012de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <HAL_RCC_OscConfig+0x270>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fbb6 	bl	8000a28 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c0:	f7ff fbb2 	bl	8000a28 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e180      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d03a      	beq.n	8001360 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d019      	beq.n	8001326 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_RCC_OscConfig+0x274>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f8:	f7ff fb96 	bl	8000a28 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fb92 	bl	8000a28 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e160      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800131e:	2001      	movs	r0, #1
 8001320:	f000 fafe 	bl	8001920 <RCC_Delay>
 8001324:	e01c      	b.n	8001360 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_RCC_OscConfig+0x274>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132c:	f7ff fb7c 	bl	8000a28 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001332:	e00f      	b.n	8001354 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff fb78 	bl	8000a28 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d908      	bls.n	8001354 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e146      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	42420000 	.word	0x42420000
 8001350:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001354:	4b92      	ldr	r3, [pc, #584]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1e9      	bne.n	8001334 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80a6 	beq.w	80014ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001372:	4b8b      	ldr	r3, [pc, #556]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10d      	bne.n	800139a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b88      	ldr	r3, [pc, #544]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a87      	ldr	r2, [pc, #540]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b85      	ldr	r3, [pc, #532]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001396:	2301      	movs	r3, #1
 8001398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139a:	4b82      	ldr	r3, [pc, #520]	; (80015a4 <HAL_RCC_OscConfig+0x4c8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d118      	bne.n	80013d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a6:	4b7f      	ldr	r3, [pc, #508]	; (80015a4 <HAL_RCC_OscConfig+0x4c8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a7e      	ldr	r2, [pc, #504]	; (80015a4 <HAL_RCC_OscConfig+0x4c8>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fb39 	bl	8000a28 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ba:	f7ff fb35 	bl	8000a28 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b64      	cmp	r3, #100	; 0x64
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e103      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	4b75      	ldr	r3, [pc, #468]	; (80015a4 <HAL_RCC_OscConfig+0x4c8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d106      	bne.n	80013ee <HAL_RCC_OscConfig+0x312>
 80013e0:	4b6f      	ldr	r3, [pc, #444]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4a6e      	ldr	r2, [pc, #440]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6213      	str	r3, [r2, #32]
 80013ec:	e02d      	b.n	800144a <HAL_RCC_OscConfig+0x36e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x334>
 80013f6:	4b6a      	ldr	r3, [pc, #424]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4a69      	ldr	r2, [pc, #420]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6213      	str	r3, [r2, #32]
 8001402:	4b67      	ldr	r3, [pc, #412]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4a66      	ldr	r2, [pc, #408]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	f023 0304 	bic.w	r3, r3, #4
 800140c:	6213      	str	r3, [r2, #32]
 800140e:	e01c      	b.n	800144a <HAL_RCC_OscConfig+0x36e>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b05      	cmp	r3, #5
 8001416:	d10c      	bne.n	8001432 <HAL_RCC_OscConfig+0x356>
 8001418:	4b61      	ldr	r3, [pc, #388]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4a60      	ldr	r2, [pc, #384]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	6213      	str	r3, [r2, #32]
 8001424:	4b5e      	ldr	r3, [pc, #376]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	4a5d      	ldr	r2, [pc, #372]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6213      	str	r3, [r2, #32]
 8001430:	e00b      	b.n	800144a <HAL_RCC_OscConfig+0x36e>
 8001432:	4b5b      	ldr	r3, [pc, #364]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4a5a      	ldr	r2, [pc, #360]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	6213      	str	r3, [r2, #32]
 800143e:	4b58      	ldr	r3, [pc, #352]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	4a57      	ldr	r2, [pc, #348]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	f023 0304 	bic.w	r3, r3, #4
 8001448:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d015      	beq.n	800147e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fae9 	bl	8000a28 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001458:	e00a      	b.n	8001470 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7ff fae5 	bl	8000a28 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f241 3288 	movw	r2, #5000	; 0x1388
 8001468:	4293      	cmp	r3, r2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e0b1      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001470:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0ee      	beq.n	800145a <HAL_RCC_OscConfig+0x37e>
 800147c:	e014      	b.n	80014a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147e:	f7ff fad3 	bl	8000a28 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001484:	e00a      	b.n	800149c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001486:	f7ff facf 	bl	8000a28 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	f241 3288 	movw	r2, #5000	; 0x1388
 8001494:	4293      	cmp	r3, r2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e09b      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149c:	4b40      	ldr	r3, [pc, #256]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1ee      	bne.n	8001486 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014a8:	7dfb      	ldrb	r3, [r7, #23]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d105      	bne.n	80014ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ae:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a3b      	ldr	r2, [pc, #236]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8087 	beq.w	80015d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c4:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d061      	beq.n	8001594 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d146      	bne.n	8001566 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d8:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <HAL_RCC_OscConfig+0x4cc>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014de:	f7ff faa3 	bl	8000a28 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e6:	f7ff fa9f 	bl	8000a28 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e06d      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f0      	bne.n	80014e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150c:	d108      	bne.n	8001520 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	4921      	ldr	r1, [pc, #132]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001520:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a19      	ldr	r1, [r3, #32]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	430b      	orrs	r3, r1
 8001532:	491b      	ldr	r1, [pc, #108]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_RCC_OscConfig+0x4cc>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff fa73 	bl	8000a28 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001546:	f7ff fa6f 	bl	8000a28 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e03d      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x46a>
 8001564:	e035      	b.n	80015d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_RCC_OscConfig+0x4cc>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fa5c 	bl	8000a28 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff fa58 	bl	8000a28 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e026      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x498>
 8001592:	e01e      	b.n	80015d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d107      	bne.n	80015ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e019      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40007000 	.word	0x40007000
 80015a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_RCC_OscConfig+0x500>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40021000 	.word	0x40021000

080015e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0d0      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015f4:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d910      	bls.n	8001624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b67      	ldr	r3, [pc, #412]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 0207 	bic.w	r2, r3, #7
 800160a:	4965      	ldr	r1, [pc, #404]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001612:	4b63      	ldr	r3, [pc, #396]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0b8      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d020      	beq.n	8001672 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800163c:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4a58      	ldr	r2, [pc, #352]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001646:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001654:	4b53      	ldr	r3, [pc, #332]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4a52      	ldr	r2, [pc, #328]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800165a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800165e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001660:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	494d      	ldr	r1, [pc, #308]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d040      	beq.n	8001700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	4b47      	ldr	r3, [pc, #284]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d115      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e07f      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169e:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e073      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ae:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e06b      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016be:	4b39      	ldr	r3, [pc, #228]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f023 0203 	bic.w	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4936      	ldr	r1, [pc, #216]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d0:	f7ff f9aa 	bl	8000a28 <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	f7ff f9a6 	bl	8000a28 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e053      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 020c 	and.w	r2, r3, #12
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d1eb      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d210      	bcs.n	8001730 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 0207 	bic.w	r2, r3, #7
 8001716:	4922      	ldr	r1, [pc, #136]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e032      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4916      	ldr	r1, [pc, #88]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d009      	beq.n	800176e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	490e      	ldr	r1, [pc, #56]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800176e:	f000 f821 	bl	80017b4 <HAL_RCC_GetSysClockFreq>
 8001772:	4602      	mov	r2, r0
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	490a      	ldr	r1, [pc, #40]	; (80017a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001780:	5ccb      	ldrb	r3, [r1, r3]
 8001782:	fa22 f303 	lsr.w	r3, r2, r3
 8001786:	4a09      	ldr	r2, [pc, #36]	; (80017ac <HAL_RCC_ClockConfig+0x1cc>)
 8001788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_RCC_ClockConfig+0x1d0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff f810 	bl	80007b4 <HAL_InitTick>

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40022000 	.word	0x40022000
 80017a4:	40021000 	.word	0x40021000
 80017a8:	080068c8 	.word	0x080068c8
 80017ac:	20000000 	.word	0x20000000
 80017b0:	20000004 	.word	0x20000004

080017b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <HAL_RCC_GetSysClockFreq+0x94>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d002      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x30>
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_GetSysClockFreq+0x36>
 80017e2:	e027      	b.n	8001834 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_RCC_GetSysClockFreq+0x98>)
 80017e6:	613b      	str	r3, [r7, #16]
      break;
 80017e8:	e027      	b.n	800183a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	0c9b      	lsrs	r3, r3, #18
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	4a17      	ldr	r2, [pc, #92]	; (8001850 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017f4:	5cd3      	ldrb	r3, [r2, r3]
 80017f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d010      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_RCC_GetSysClockFreq+0x94>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	0c5b      	lsrs	r3, r3, #17
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	4a11      	ldr	r2, [pc, #68]	; (8001854 <HAL_RCC_GetSysClockFreq+0xa0>)
 800180e:	5cd3      	ldrb	r3, [r2, r3]
 8001810:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <HAL_RCC_GetSysClockFreq+0x98>)
 8001816:	fb03 f202 	mul.w	r2, r3, r2
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e004      	b.n	800182e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	613b      	str	r3, [r7, #16]
      break;
 8001832:	e002      	b.n	800183a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_RCC_GetSysClockFreq+0x98>)
 8001836:	613b      	str	r3, [r7, #16]
      break;
 8001838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800183a:	693b      	ldr	r3, [r7, #16]
}
 800183c:	4618      	mov	r0, r3
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	007a1200 	.word	0x007a1200
 8001850:	080068e0 	.word	0x080068e0
 8001854:	080068f0 	.word	0x080068f0
 8001858:	003d0900 	.word	0x003d0900

0800185c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <HAL_RCC_GetHCLKFreq+0x10>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	20000000 	.word	0x20000000

08001870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001874:	f7ff fff2 	bl	800185c <HAL_RCC_GetHCLKFreq>
 8001878:	4602      	mov	r2, r0
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	0a1b      	lsrs	r3, r3, #8
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	4903      	ldr	r1, [pc, #12]	; (8001894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001886:	5ccb      	ldrb	r3, [r1, r3]
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800188c:	4618      	mov	r0, r3
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40021000 	.word	0x40021000
 8001894:	080068d8 	.word	0x080068d8

08001898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800189c:	f7ff ffde 	bl	800185c <HAL_RCC_GetHCLKFreq>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	0adb      	lsrs	r3, r3, #11
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	4903      	ldr	r1, [pc, #12]	; (80018bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ae:	5ccb      	ldrb	r3, [r1, r3]
 80018b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000
 80018bc:	080068d8 	.word	0x080068d8

080018c0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	220f      	movs	r2, #15
 80018ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_RCC_GetClockConfig+0x58>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0203 	and.w	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_RCC_GetClockConfig+0x58>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_GetClockConfig+0x58>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_RCC_GetClockConfig+0x58>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	08db      	lsrs	r3, r3, #3
 80018fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_RCC_GetClockConfig+0x5c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0207 	and.w	r2, r3, #7
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	40021000 	.word	0x40021000
 800191c:	40022000 	.word	0x40022000

08001920 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <RCC_Delay+0x34>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <RCC_Delay+0x38>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	0a5b      	lsrs	r3, r3, #9
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800193c:	bf00      	nop
  }
  while (Delay --);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1e5a      	subs	r2, r3, #1
 8001942:	60fa      	str	r2, [r7, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f9      	bne.n	800193c <RCC_Delay+0x1c>
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	20000000 	.word	0x20000000
 8001958:	10624dd3 	.word	0x10624dd3

0800195c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e041      	b.n	80019f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f839 	bl	80019fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3304      	adds	r3, #4
 8001998:	4619      	mov	r1, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f000 fb68 	bl	8002070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d001      	beq.n	8001a24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e03a      	b.n	8001a9a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <HAL_TIM_Base_Start_IT+0x98>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00e      	beq.n	8001a64 <HAL_TIM_Base_Start_IT+0x58>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a4e:	d009      	beq.n	8001a64 <HAL_TIM_Base_Start_IT+0x58>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d004      	beq.n	8001a64 <HAL_TIM_Base_Start_IT+0x58>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a13      	ldr	r2, [pc, #76]	; (8001aac <HAL_TIM_Base_Start_IT+0xa0>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d111      	bne.n	8001a88 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d010      	beq.n	8001a98 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0201 	orr.w	r2, r2, #1
 8001a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a86:	e007      	b.n	8001a98 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	40012c00 	.word	0x40012c00
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	40000800 	.word	0x40000800

08001ab0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e041      	b.n	8001b46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7fe fdd6 	bl	8000688 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3304      	adds	r3, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f000 fabe 	bl	8002070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d109      	bne.n	8001b74 <HAL_TIM_PWM_Start+0x24>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	bf14      	ite	ne
 8001b6c:	2301      	movne	r3, #1
 8001b6e:	2300      	moveq	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	e022      	b.n	8001bba <HAL_TIM_PWM_Start+0x6a>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d109      	bne.n	8001b8e <HAL_TIM_PWM_Start+0x3e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	bf14      	ite	ne
 8001b86:	2301      	movne	r3, #1
 8001b88:	2300      	moveq	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	e015      	b.n	8001bba <HAL_TIM_PWM_Start+0x6a>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d109      	bne.n	8001ba8 <HAL_TIM_PWM_Start+0x58>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	bf14      	ite	ne
 8001ba0:	2301      	movne	r3, #1
 8001ba2:	2300      	moveq	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	e008      	b.n	8001bba <HAL_TIM_PWM_Start+0x6a>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	bf14      	ite	ne
 8001bb4:	2301      	movne	r3, #1
 8001bb6:	2300      	moveq	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e05e      	b.n	8001c80 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d104      	bne.n	8001bd2 <HAL_TIM_PWM_Start+0x82>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bd0:	e013      	b.n	8001bfa <HAL_TIM_PWM_Start+0xaa>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d104      	bne.n	8001be2 <HAL_TIM_PWM_Start+0x92>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001be0:	e00b      	b.n	8001bfa <HAL_TIM_PWM_Start+0xaa>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d104      	bne.n	8001bf2 <HAL_TIM_PWM_Start+0xa2>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf0:	e003      	b.n	8001bfa <HAL_TIM_PWM_Start+0xaa>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	6839      	ldr	r1, [r7, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fc1e 	bl	8002444 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1e      	ldr	r2, [pc, #120]	; (8001c88 <HAL_TIM_PWM_Start+0x138>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d107      	bne.n	8001c22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a18      	ldr	r2, [pc, #96]	; (8001c88 <HAL_TIM_PWM_Start+0x138>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d00e      	beq.n	8001c4a <HAL_TIM_PWM_Start+0xfa>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c34:	d009      	beq.n	8001c4a <HAL_TIM_PWM_Start+0xfa>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <HAL_TIM_PWM_Start+0x13c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d004      	beq.n	8001c4a <HAL_TIM_PWM_Start+0xfa>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <HAL_TIM_PWM_Start+0x140>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d111      	bne.n	8001c6e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b06      	cmp	r3, #6
 8001c5a:	d010      	beq.n	8001c7e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c6c:	e007      	b.n	8001c7e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 0201 	orr.w	r2, r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40012c00 	.word	0x40012c00
 8001c8c:	40000400 	.word	0x40000400
 8001c90:	40000800 	.word	0x40000800

08001c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d122      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d11b      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0202 	mvn.w	r2, #2
 8001cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f9af 	bl	800203a <HAL_TIM_IC_CaptureCallback>
 8001cdc:	e005      	b.n	8001cea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f9a2 	bl	8002028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f9b1 	bl	800204c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d122      	bne.n	8001d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d11b      	bne.n	8001d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0204 	mvn.w	r2, #4
 8001d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2202      	movs	r2, #2
 8001d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f985 	bl	800203a <HAL_TIM_IC_CaptureCallback>
 8001d30:	e005      	b.n	8001d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f978 	bl	8002028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f987 	bl	800204c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d122      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d11b      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0208 	mvn.w	r2, #8
 8001d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f95b 	bl	800203a <HAL_TIM_IC_CaptureCallback>
 8001d84:	e005      	b.n	8001d92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f94e 	bl	8002028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f95d 	bl	800204c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0310 	and.w	r3, r3, #16
 8001da2:	2b10      	cmp	r3, #16
 8001da4:	d122      	bne.n	8001dec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b10      	cmp	r3, #16
 8001db2:	d11b      	bne.n	8001dec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0210 	mvn.w	r2, #16
 8001dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f931 	bl	800203a <HAL_TIM_IC_CaptureCallback>
 8001dd8:	e005      	b.n	8001de6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f924 	bl	8002028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f933 	bl	800204c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d10e      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d107      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0201 	mvn.w	r2, #1
 8001e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe fbe8 	bl	80005e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e22:	2b80      	cmp	r3, #128	; 0x80
 8001e24:	d10e      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e30:	2b80      	cmp	r3, #128	; 0x80
 8001e32:	d107      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fb8b 	bl	800255a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4e:	2b40      	cmp	r3, #64	; 0x40
 8001e50:	d10e      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5c:	2b40      	cmp	r3, #64	; 0x40
 8001e5e:	d107      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8f7 	bl	800205e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d10e      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d107      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0220 	mvn.w	r2, #32
 8001e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fb56 	bl	8002548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e0ae      	b.n	8002020 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0c      	cmp	r3, #12
 8001ece:	f200 809f 	bhi.w	8002010 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001ed2:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed8:	08001f0d 	.word	0x08001f0d
 8001edc:	08002011 	.word	0x08002011
 8001ee0:	08002011 	.word	0x08002011
 8001ee4:	08002011 	.word	0x08002011
 8001ee8:	08001f4d 	.word	0x08001f4d
 8001eec:	08002011 	.word	0x08002011
 8001ef0:	08002011 	.word	0x08002011
 8001ef4:	08002011 	.word	0x08002011
 8001ef8:	08001f8f 	.word	0x08001f8f
 8001efc:	08002011 	.word	0x08002011
 8001f00:	08002011 	.word	0x08002011
 8001f04:	08002011 	.word	0x08002011
 8001f08:	08001fcf 	.word	0x08001fcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f90e 	bl	8002134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0208 	orr.w	r2, r2, #8
 8001f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0204 	bic.w	r2, r2, #4
 8001f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6999      	ldr	r1, [r3, #24]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	619a      	str	r2, [r3, #24]
      break;
 8001f4a:	e064      	b.n	8002016 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f954 	bl	8002200 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6999      	ldr	r1, [r3, #24]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	021a      	lsls	r2, r3, #8
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	619a      	str	r2, [r3, #24]
      break;
 8001f8c:	e043      	b.n	8002016 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68b9      	ldr	r1, [r7, #8]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f99d 	bl	80022d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	69da      	ldr	r2, [r3, #28]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0208 	orr.w	r2, r2, #8
 8001fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	69da      	ldr	r2, [r3, #28]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0204 	bic.w	r2, r2, #4
 8001fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	69d9      	ldr	r1, [r3, #28]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	61da      	str	r2, [r3, #28]
      break;
 8001fcc:	e023      	b.n	8002016 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68b9      	ldr	r1, [r7, #8]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 f9e7 	bl	80023a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	69da      	ldr	r2, [r3, #28]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	69da      	ldr	r2, [r3, #28]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69d9      	ldr	r1, [r3, #28]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	021a      	lsls	r2, r3, #8
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	61da      	str	r2, [r3, #28]
      break;
 800200e:	e002      	b.n	8002016 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	75fb      	strb	r3, [r7, #23]
      break;
 8002014:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800201e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a29      	ldr	r2, [pc, #164]	; (8002128 <TIM_Base_SetConfig+0xb8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d00b      	beq.n	80020a0 <TIM_Base_SetConfig+0x30>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208e:	d007      	beq.n	80020a0 <TIM_Base_SetConfig+0x30>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a26      	ldr	r2, [pc, #152]	; (800212c <TIM_Base_SetConfig+0xbc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d003      	beq.n	80020a0 <TIM_Base_SetConfig+0x30>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a25      	ldr	r2, [pc, #148]	; (8002130 <TIM_Base_SetConfig+0xc0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d108      	bne.n	80020b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <TIM_Base_SetConfig+0xb8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00b      	beq.n	80020d2 <TIM_Base_SetConfig+0x62>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c0:	d007      	beq.n	80020d2 <TIM_Base_SetConfig+0x62>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a19      	ldr	r2, [pc, #100]	; (800212c <TIM_Base_SetConfig+0xbc>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d003      	beq.n	80020d2 <TIM_Base_SetConfig+0x62>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a18      	ldr	r2, [pc, #96]	; (8002130 <TIM_Base_SetConfig+0xc0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d108      	bne.n	80020e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a07      	ldr	r2, [pc, #28]	; (8002128 <TIM_Base_SetConfig+0xb8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d103      	bne.n	8002118 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	615a      	str	r2, [r3, #20]
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	40012c00 	.word	0x40012c00
 800212c:	40000400 	.word	0x40000400
 8002130:	40000800 	.word	0x40000800

08002134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f023 0201 	bic.w	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f023 0302 	bic.w	r3, r3, #2
 800217c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a1c      	ldr	r2, [pc, #112]	; (80021fc <TIM_OC1_SetConfig+0xc8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d10c      	bne.n	80021aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f023 0308 	bic.w	r3, r3, #8
 8002196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	4313      	orrs	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f023 0304 	bic.w	r3, r3, #4
 80021a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a13      	ldr	r2, [pc, #76]	; (80021fc <TIM_OC1_SetConfig+0xc8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d111      	bne.n	80021d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	621a      	str	r2, [r3, #32]
}
 80021f0:	bf00      	nop
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40012c00 	.word	0x40012c00

08002200 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f023 0210 	bic.w	r2, r3, #16
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800222e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	021b      	lsls	r3, r3, #8
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f023 0320 	bic.w	r3, r3, #32
 800224a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4313      	orrs	r3, r2
 8002256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <TIM_OC2_SetConfig+0xd0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d10d      	bne.n	800227c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800227a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <TIM_OC2_SetConfig+0xd0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d113      	bne.n	80022ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800228a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002292:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	621a      	str	r2, [r3, #32]
}
 80022c6:	bf00      	nop
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	40012c00 	.word	0x40012c00

080022d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0303 	bic.w	r3, r3, #3
 800230a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800231c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a1d      	ldr	r2, [pc, #116]	; (80023a4 <TIM_OC3_SetConfig+0xd0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d10d      	bne.n	800234e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	4313      	orrs	r3, r2
 8002344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800234c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a14      	ldr	r2, [pc, #80]	; (80023a4 <TIM_OC3_SetConfig+0xd0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d113      	bne.n	800237e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800235c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	621a      	str	r2, [r3, #32]
}
 8002398:	bf00      	nop
 800239a:	371c      	adds	r7, #28
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40012c00 	.word	0x40012c00

080023a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	031b      	lsls	r3, r3, #12
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <TIM_OC4_SetConfig+0x98>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d109      	bne.n	800241c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800240e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	019b      	lsls	r3, r3, #6
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	621a      	str	r2, [r3, #32]
}
 8002436:	bf00      	nop
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	40012c00 	.word	0x40012c00

08002444 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	2201      	movs	r2, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a1a      	ldr	r2, [r3, #32]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	43db      	mvns	r3, r3
 8002466:	401a      	ands	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a1a      	ldr	r2, [r3, #32]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 031f 	and.w	r3, r3, #31
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	431a      	orrs	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	621a      	str	r2, [r3, #32]
}
 8002482:	bf00      	nop
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e046      	b.n	8002532 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a16      	ldr	r2, [pc, #88]	; (800253c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00e      	beq.n	8002506 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f0:	d009      	beq.n	8002506 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d004      	beq.n	8002506 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a10      	ldr	r2, [pc, #64]	; (8002544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d10c      	bne.n	8002520 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800250c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	4313      	orrs	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	40012c00 	.word	0x40012c00
 8002540:	40000400 	.word	0x40000400
 8002544:	40000800 	.word	0x40000800

08002548 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr

0800255a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e042      	b.n	8002604 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe f8c8 	bl	8000728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2224      	movs	r2, #36	; 0x24
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 fdc5 	bl	8003140 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	4613      	mov	r3, r2
 800261a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b20      	cmp	r3, #32
 800262a:	d16d      	bne.n	8002708 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_UART_Transmit+0x2c>
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e066      	b.n	800270a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2221      	movs	r2, #33	; 0x21
 8002646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800264a:	f7fe f9ed 	bl	8000a28 <HAL_GetTick>
 800264e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	88fa      	ldrh	r2, [r7, #6]
 800265a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002664:	d108      	bne.n	8002678 <HAL_UART_Transmit+0x6c>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d104      	bne.n	8002678 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	e003      	b.n	8002680 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002680:	e02a      	b.n	80026d8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2200      	movs	r2, #0
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 fb14 	bl	8002cba <UART_WaitOnFlagUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e036      	b.n	800270a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10b      	bne.n	80026ba <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	3302      	adds	r3, #2
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	e007      	b.n	80026ca <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	3301      	adds	r3, #1
 80026c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1cf      	bne.n	8002682 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2200      	movs	r2, #0
 80026ea:	2140      	movs	r1, #64	; 0x40
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 fae4 	bl	8002cba <UART_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e006      	b.n	800270a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	e000      	b.n	800270a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002708:	2302      	movs	r3, #2
  }
}
 800270a:	4618      	mov	r0, r3
 800270c:	3720      	adds	r7, #32
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	4613      	mov	r3, r2
 800271e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b20      	cmp	r3, #32
 800272a:	d112      	bne.n	8002752 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_UART_Receive_IT+0x26>
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e00b      	b.n	8002754 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	461a      	mov	r2, r3
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fb24 	bl	8002d96 <UART_Start_Receive_IT>
 800274e:	4603      	mov	r3, r0
 8002750:	e000      	b.n	8002754 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002752:	2302      	movs	r3, #2
  }
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b0ba      	sub	sp, #232	; 0xe8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002788:	2300      	movs	r3, #0
 800278a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800278e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800279a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10f      	bne.n	80027c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <HAL_UART_IRQHandler+0x66>
 80027ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fc01 	bl	8002fc2 <UART_Receive_IT>
      return;
 80027c0:	e25b      	b.n	8002c7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 80de 	beq.w	8002988 <HAL_UART_IRQHandler+0x22c>
 80027cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d106      	bne.n	80027e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80d1 	beq.w	8002988 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <HAL_UART_IRQHandler+0xae>
 80027f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f043 0201 	orr.w	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800280a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HAL_UART_IRQHandler+0xd2>
 8002816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f043 0202 	orr.w	r2, r3, #2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800282e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <HAL_UART_IRQHandler+0xf6>
 800283a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f043 0204 	orr.w	r2, r3, #4
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d011      	beq.n	8002882 <HAL_UART_IRQHandler+0x126>
 800285e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800286a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f043 0208 	orr.w	r2, r3, #8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 81f2 	beq.w	8002c70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800288c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_UART_IRQHandler+0x14e>
 8002898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fb8c 	bl	8002fc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d103      	bne.n	80028d6 <HAL_UART_IRQHandler+0x17a>
 80028ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d04f      	beq.n	8002976 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fa96 	bl	8002e08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d041      	beq.n	800296e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3314      	adds	r3, #20
 80028f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028f8:	e853 3f00 	ldrex	r3, [r3]
 80028fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3314      	adds	r3, #20
 8002912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002916:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800291a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002926:	e841 2300 	strex	r3, r2, [r1]
 800292a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800292e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1d9      	bne.n	80028ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	2b00      	cmp	r3, #0
 800293c:	d013      	beq.n	8002966 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	4a7e      	ldr	r2, [pc, #504]	; (8002b3c <HAL_UART_IRQHandler+0x3e0>)
 8002944:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe f990 	bl	8000c70 <HAL_DMA_Abort_IT>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d016      	beq.n	8002984 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002960:	4610      	mov	r0, r2
 8002962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002964:	e00e      	b.n	8002984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f993 	bl	8002c92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800296c:	e00a      	b.n	8002984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f98f 	bl	8002c92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002974:	e006      	b.n	8002984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f98b 	bl	8002c92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002982:	e175      	b.n	8002c70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002984:	bf00      	nop
    return;
 8002986:	e173      	b.n	8002c70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	2b01      	cmp	r3, #1
 800298e:	f040 814f 	bne.w	8002c30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8148 	beq.w	8002c30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8141 	beq.w	8002c30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80b6 	beq.w	8002b40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8145 	beq.w	8002c74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029f2:	429a      	cmp	r2, r3
 80029f4:	f080 813e 	bcs.w	8002c74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	f000 8088 	beq.w	8002b1c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a1a:	e853 3f00 	ldrex	r3, [r3]
 8002a1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	330c      	adds	r3, #12
 8002a34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a38:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a40:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a44:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a48:	e841 2300 	strex	r3, r2, [r1]
 8002a4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1d9      	bne.n	8002a0c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3314      	adds	r3, #20
 8002a5e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a62:	e853 3f00 	ldrex	r3, [r3]
 8002a66:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3314      	adds	r3, #20
 8002a78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a7c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a80:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a82:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a88:	e841 2300 	strex	r3, r2, [r1]
 8002a8c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1e1      	bne.n	8002a58 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	3314      	adds	r3, #20
 8002a9a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a9e:	e853 3f00 	ldrex	r3, [r3]
 8002aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3314      	adds	r3, #20
 8002ab4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ab8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002aba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002abe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ac0:	e841 2300 	strex	r3, r2, [r1]
 8002ac4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1e3      	bne.n	8002a94 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	330c      	adds	r3, #12
 8002ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae4:	e853 3f00 	ldrex	r3, [r3]
 8002ae8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aec:	f023 0310 	bic.w	r3, r3, #16
 8002af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	330c      	adds	r3, #12
 8002afa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002afe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b00:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b06:	e841 2300 	strex	r3, r2, [r1]
 8002b0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1e3      	bne.n	8002ada <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe f86f 	bl	8000bfa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4619      	mov	r1, r3
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8b6 	bl	8002ca4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b38:	e09c      	b.n	8002c74 <HAL_UART_IRQHandler+0x518>
 8002b3a:	bf00      	nop
 8002b3c:	08002ecd 	.word	0x08002ecd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 808e 	beq.w	8002c78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8089 	beq.w	8002c78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	330c      	adds	r3, #12
 8002b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b70:	e853 3f00 	ldrex	r3, [r3]
 8002b74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	330c      	adds	r3, #12
 8002b86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b8a:	647a      	str	r2, [r7, #68]	; 0x44
 8002b8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b92:	e841 2300 	strex	r3, r2, [r1]
 8002b96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1e3      	bne.n	8002b66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	3314      	adds	r3, #20
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	e853 3f00 	ldrex	r3, [r3]
 8002bac:	623b      	str	r3, [r7, #32]
   return(result);
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	3314      	adds	r3, #20
 8002bbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002bc2:	633a      	str	r2, [r7, #48]	; 0x30
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bca:	e841 2300 	strex	r3, r2, [r1]
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e3      	bne.n	8002b9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	e853 3f00 	ldrex	r3, [r3]
 8002bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0310 	bic.w	r3, r3, #16
 8002bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	330c      	adds	r3, #12
 8002c04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c08:	61fa      	str	r2, [r7, #28]
 8002c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0c:	69b9      	ldr	r1, [r7, #24]
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	e841 2300 	strex	r3, r2, [r1]
 8002c14:	617b      	str	r3, [r7, #20]
   return(result);
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e3      	bne.n	8002be4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c26:	4619      	mov	r1, r3
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f83b 	bl	8002ca4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c2e:	e023      	b.n	8002c78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d009      	beq.n	8002c50 <HAL_UART_IRQHandler+0x4f4>
 8002c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f953 	bl	8002ef4 <UART_Transmit_IT>
    return;
 8002c4e:	e014      	b.n	8002c7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00e      	beq.n	8002c7a <HAL_UART_IRQHandler+0x51e>
 8002c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f992 	bl	8002f92 <UART_EndTransmit_IT>
    return;
 8002c6e:	e004      	b.n	8002c7a <HAL_UART_IRQHandler+0x51e>
    return;
 8002c70:	bf00      	nop
 8002c72:	e002      	b.n	8002c7a <HAL_UART_IRQHandler+0x51e>
      return;
 8002c74:	bf00      	nop
 8002c76:	e000      	b.n	8002c7a <HAL_UART_IRQHandler+0x51e>
      return;
 8002c78:	bf00      	nop
  }
}
 8002c7a:	37e8      	adds	r7, #232	; 0xe8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b090      	sub	sp, #64	; 0x40
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cca:	e050      	b.n	8002d6e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd2:	d04c      	beq.n	8002d6e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <UART_WaitOnFlagUntilTimeout+0x30>
 8002cda:	f7fd fea5 	bl	8000a28 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d241      	bcs.n	8002d6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	330c      	adds	r3, #12
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	330c      	adds	r3, #12
 8002d08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d0a:	637a      	str	r2, [r7, #52]	; 0x34
 8002d0c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1e5      	bne.n	8002cea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3314      	adds	r3, #20
 8002d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3314      	adds	r3, #20
 8002d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d3e:	623a      	str	r2, [r7, #32]
 8002d40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	69f9      	ldr	r1, [r7, #28]
 8002d44:	6a3a      	ldr	r2, [r7, #32]
 8002d46:	e841 2300 	strex	r3, r2, [r1]
 8002d4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1e5      	bne.n	8002d1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e00f      	b.n	8002d8e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4013      	ands	r3, r2
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2301      	moveq	r3, #1
 8002d80:	2300      	movne	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d09f      	beq.n	8002ccc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3740      	adds	r7, #64	; 0x40
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	4613      	mov	r3, r2
 8002da2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	88fa      	ldrh	r2, [r7, #6]
 8002db4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2222      	movs	r2, #34	; 0x22
 8002dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dda:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0220 	orr.w	r2, r2, #32
 8002dfa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b095      	sub	sp, #84	; 0x54
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1a:	e853 3f00 	ldrex	r3, [r3]
 8002e1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	330c      	adds	r3, #12
 8002e2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e30:	643a      	str	r2, [r7, #64]	; 0x40
 8002e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e38:	e841 2300 	strex	r3, r2, [r1]
 8002e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1e5      	bne.n	8002e10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3314      	adds	r3, #20
 8002e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	e853 3f00 	ldrex	r3, [r3]
 8002e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f023 0301 	bic.w	r3, r3, #1
 8002e5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3314      	adds	r3, #20
 8002e62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e6c:	e841 2300 	strex	r3, r2, [r1]
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1e5      	bne.n	8002e44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d119      	bne.n	8002eb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	330c      	adds	r3, #12
 8002e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	e853 3f00 	ldrex	r3, [r3]
 8002e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f023 0310 	bic.w	r3, r3, #16
 8002e96:	647b      	str	r3, [r7, #68]	; 0x44
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ea0:	61ba      	str	r2, [r7, #24]
 8002ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea4:	6979      	ldr	r1, [r7, #20]
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	e841 2300 	strex	r3, r2, [r1]
 8002eac:	613b      	str	r3, [r7, #16]
   return(result);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e5      	bne.n	8002e80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ec2:	bf00      	nop
 8002ec4:	3754      	adds	r7, #84	; 0x54
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff fed3 	bl	8002c92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b21      	cmp	r3, #33	; 0x21
 8002f06:	d13e      	bne.n	8002f86 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f10:	d114      	bne.n	8002f3c <UART_Transmit_IT+0x48>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d110      	bne.n	8002f3c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f2e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	1c9a      	adds	r2, r3, #2
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	621a      	str	r2, [r3, #32]
 8002f3a:	e008      	b.n	8002f4e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	1c59      	adds	r1, r3, #1
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6211      	str	r1, [r2, #32]
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10f      	bne.n	8002f82 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f70:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f80:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e000      	b.n	8002f88 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
  }
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff fe64 	bl	8002c80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b08c      	sub	sp, #48	; 0x30
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b22      	cmp	r3, #34	; 0x22
 8002fd4:	f040 80ae 	bne.w	8003134 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe0:	d117      	bne.n	8003012 <UART_Receive_IT+0x50>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d113      	bne.n	8003012 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003000:	b29a      	uxth	r2, r3
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	1c9a      	adds	r2, r3, #2
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
 8003010:	e026      	b.n	8003060 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003018:	2300      	movs	r3, #0
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003024:	d007      	beq.n	8003036 <UART_Receive_IT+0x74>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <UART_Receive_IT+0x82>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003040:	701a      	strb	r2, [r3, #0]
 8003042:	e008      	b.n	8003056 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003050:	b2da      	uxtb	r2, r3
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29b      	uxth	r3, r3
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	4619      	mov	r1, r3
 800306e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003070:	2b00      	cmp	r3, #0
 8003072:	d15d      	bne.n	8003130 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0220 	bic.w	r2, r2, #32
 8003082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d135      	bne.n	8003126 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	e853 3f00 	ldrex	r3, [r3]
 80030ce:	613b      	str	r3, [r7, #16]
   return(result);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f023 0310 	bic.w	r3, r3, #16
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	330c      	adds	r3, #12
 80030de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e0:	623a      	str	r2, [r7, #32]
 80030e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e4:	69f9      	ldr	r1, [r7, #28]
 80030e6:	6a3a      	ldr	r2, [r7, #32]
 80030e8:	e841 2300 	strex	r3, r2, [r1]
 80030ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1e5      	bne.n	80030c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b10      	cmp	r3, #16
 8003100:	d10a      	bne.n	8003118 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800311c:	4619      	mov	r1, r3
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff fdc0 	bl	8002ca4 <HAL_UARTEx_RxEventCallback>
 8003124:	e002      	b.n	800312c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd f81a 	bl	8000160 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	e002      	b.n	8003136 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	e000      	b.n	8003136 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003134:	2302      	movs	r3, #2
  }
}
 8003136:	4618      	mov	r0, r3
 8003138:	3730      	adds	r7, #48	; 0x30
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800317a:	f023 030c 	bic.w	r3, r3, #12
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	430b      	orrs	r3, r1
 8003186:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2c      	ldr	r2, [pc, #176]	; (8003254 <UART_SetConfig+0x114>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d103      	bne.n	80031b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031a8:	f7fe fb76 	bl	8001898 <HAL_RCC_GetPCLK2Freq>
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	e002      	b.n	80031b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031b0:	f7fe fb5e 	bl	8001870 <HAL_RCC_GetPCLK1Freq>
 80031b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009a      	lsls	r2, r3, #2
 80031c0:	441a      	add	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031cc:	4a22      	ldr	r2, [pc, #136]	; (8003258 <UART_SetConfig+0x118>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	0119      	lsls	r1, r3, #4
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	009a      	lsls	r2, r3, #2
 80031e0:	441a      	add	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ec:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <UART_SetConfig+0x118>)
 80031ee:	fba3 0302 	umull	r0, r3, r3, r2
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	2064      	movs	r0, #100	; 0x64
 80031f6:	fb00 f303 	mul.w	r3, r0, r3
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	3332      	adds	r3, #50	; 0x32
 8003200:	4a15      	ldr	r2, [pc, #84]	; (8003258 <UART_SetConfig+0x118>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800320c:	4419      	add	r1, r3
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	009a      	lsls	r2, r3, #2
 8003218:	441a      	add	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	fbb2 f2f3 	udiv	r2, r2, r3
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <UART_SetConfig+0x118>)
 8003226:	fba3 0302 	umull	r0, r3, r3, r2
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2064      	movs	r0, #100	; 0x64
 800322e:	fb00 f303 	mul.w	r3, r0, r3
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	3332      	adds	r3, #50	; 0x32
 8003238:	4a07      	ldr	r2, [pc, #28]	; (8003258 <UART_SetConfig+0x118>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	440a      	add	r2, r1
 800324a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40013800 	.word	0x40013800
 8003258:	51eb851f 	.word	0x51eb851f

0800325c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003262:	f3ef 8305 	mrs	r3, IPSR
 8003266:	60bb      	str	r3, [r7, #8]
  return(result);
 8003268:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10f      	bne.n	800328e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800326e:	f3ef 8310 	mrs	r3, PRIMASK
 8003272:	607b      	str	r3, [r7, #4]
  return(result);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <osKernelInitialize+0x32>
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <osKernelInitialize+0x60>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d109      	bne.n	8003296 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003282:	f3ef 8311 	mrs	r3, BASEPRI
 8003286:	603b      	str	r3, [r7, #0]
  return(result);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800328e:	f06f 0305 	mvn.w	r3, #5
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	e00c      	b.n	80032b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <osKernelInitialize+0x60>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800329e:	4b07      	ldr	r3, [pc, #28]	; (80032bc <osKernelInitialize+0x60>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	e002      	b.n	80032b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295
 80032ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80032b0:	68fb      	ldr	r3, [r7, #12]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr
 80032bc:	20000168 	.word	0x20000168

080032c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032c6:	f3ef 8305 	mrs	r3, IPSR
 80032ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80032cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10f      	bne.n	80032f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d2:	f3ef 8310 	mrs	r3, PRIMASK
 80032d6:	607b      	str	r3, [r7, #4]
  return(result);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <osKernelStart+0x32>
 80032de:	4b11      	ldr	r3, [pc, #68]	; (8003324 <osKernelStart+0x64>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d109      	bne.n	80032fa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032e6:	f3ef 8311 	mrs	r3, BASEPRI
 80032ea:	603b      	str	r3, [r7, #0]
  return(result);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <osKernelStart+0x3a>
    stat = osErrorISR;
 80032f2:	f06f 0305 	mvn.w	r3, #5
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	e00e      	b.n	8003318 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <osKernelStart+0x64>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d107      	bne.n	8003312 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <osKernelStart+0x64>)
 8003304:	2202      	movs	r2, #2
 8003306:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003308:	f001 f8ce 	bl	80044a8 <vTaskStartScheduler>
      stat = osOK;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	e002      	b.n	8003318 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003312:	f04f 33ff 	mov.w	r3, #4294967295
 8003316:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003318:	68fb      	ldr	r3, [r7, #12]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000168 	.word	0x20000168

08003328 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003328:	b580      	push	{r7, lr}
 800332a:	b092      	sub	sp, #72	; 0x48
 800332c:	af04      	add	r7, sp, #16
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003338:	f3ef 8305 	mrs	r3, IPSR
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003340:	2b00      	cmp	r3, #0
 8003342:	f040 8094 	bne.w	800346e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003346:	f3ef 8310 	mrs	r3, PRIMASK
 800334a:	623b      	str	r3, [r7, #32]
  return(result);
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f040 808d 	bne.w	800346e <osThreadNew+0x146>
 8003354:	4b48      	ldr	r3, [pc, #288]	; (8003478 <osThreadNew+0x150>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d106      	bne.n	800336a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800335c:	f3ef 8311 	mrs	r3, BASEPRI
 8003360:	61fb      	str	r3, [r7, #28]
  return(result);
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f040 8082 	bne.w	800346e <osThreadNew+0x146>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d07e      	beq.n	800346e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003374:	2318      	movs	r3, #24
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003378:	2300      	movs	r3, #0
 800337a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800337c:	f107 031b 	add.w	r3, r7, #27
 8003380:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d045      	beq.n	800341a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <osThreadNew+0x74>
        name = attr->name;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <osThreadNew+0x9a>
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	2b38      	cmp	r3, #56	; 0x38
 80033b4:	d805      	bhi.n	80033c2 <osThreadNew+0x9a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <osThreadNew+0x9e>
        return (NULL);
 80033c2:	2300      	movs	r3, #0
 80033c4:	e054      	b.n	8003470 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	089b      	lsrs	r3, r3, #2
 80033d4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00e      	beq.n	80033fc <osThreadNew+0xd4>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2ba7      	cmp	r3, #167	; 0xa7
 80033e4:	d90a      	bls.n	80033fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d006      	beq.n	80033fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <osThreadNew+0xd4>
        mem = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033fa:	e010      	b.n	800341e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10c      	bne.n	800341e <osThreadNew+0xf6>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d108      	bne.n	800341e <osThreadNew+0xf6>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d104      	bne.n	800341e <osThreadNew+0xf6>
          mem = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	62bb      	str	r3, [r7, #40]	; 0x28
 8003418:	e001      	b.n	800341e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	2b01      	cmp	r3, #1
 8003422:	d110      	bne.n	8003446 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800342c:	9202      	str	r2, [sp, #8]
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003438:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fe50 	bl	80040e0 <xTaskCreateStatic>
 8003440:	4603      	mov	r3, r0
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e013      	b.n	800346e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	d110      	bne.n	800346e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	b29a      	uxth	r2, r3
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fe9a 	bl	8004198 <xTaskCreate>
 8003464:	4603      	mov	r3, r0
 8003466:	2b01      	cmp	r3, #1
 8003468:	d001      	beq.n	800346e <osThreadNew+0x146>
          hTask = NULL;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800346e:	697b      	ldr	r3, [r7, #20]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3738      	adds	r7, #56	; 0x38
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20000168 	.word	0x20000168

0800347c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003484:	f3ef 8305 	mrs	r3, IPSR
 8003488:	613b      	str	r3, [r7, #16]
  return(result);
 800348a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10f      	bne.n	80034b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003490:	f3ef 8310 	mrs	r3, PRIMASK
 8003494:	60fb      	str	r3, [r7, #12]
  return(result);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d109      	bne.n	80034b0 <osDelay+0x34>
 800349c:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <osDelay+0x58>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d109      	bne.n	80034b8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034a4:	f3ef 8311 	mrs	r3, BASEPRI
 80034a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <osDelay+0x3c>
    stat = osErrorISR;
 80034b0:	f06f 0305 	mvn.w	r3, #5
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	e007      	b.n	80034c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 ffbc 	bl	8004440 <vTaskDelay>
    }
  }

  return (stat);
 80034c8:	697b      	ldr	r3, [r7, #20]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000168 	.word	0x20000168

080034d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4a06      	ldr	r2, [pc, #24]	; (8003500 <vApplicationGetIdleTaskMemory+0x28>)
 80034e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4a05      	ldr	r2, [pc, #20]	; (8003504 <vApplicationGetIdleTaskMemory+0x2c>)
 80034ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2280      	movs	r2, #128	; 0x80
 80034f4:	601a      	str	r2, [r3, #0]
}
 80034f6:	bf00      	nop
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr
 8003500:	2000016c 	.word	0x2000016c
 8003504:	20000214 	.word	0x20000214

08003508 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a07      	ldr	r2, [pc, #28]	; (8003534 <vApplicationGetTimerTaskMemory+0x2c>)
 8003518:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	4a06      	ldr	r2, [pc, #24]	; (8003538 <vApplicationGetTimerTaskMemory+0x30>)
 800351e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003526:	601a      	str	r2, [r3, #0]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000414 	.word	0x20000414
 8003538:	200004bc 	.word	0x200004bc

0800353c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f103 0208 	add.w	r2, r3, #8
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f04f 32ff 	mov.w	r2, #4294967295
 8003554:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f103 0208 	add.w	r2, r3, #8
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f103 0208 	add.w	r2, r3, #8
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr

0800357a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr

08003592 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	601a      	str	r2, [r3, #0]
}
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr

080035d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	d103      	bne.n	80035f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	e00c      	b.n	8003612 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3308      	adds	r3, #8
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	e002      	b.n	8003606 <vListInsert+0x2e>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	d2f6      	bcs.n	8003600 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	601a      	str	r2, [r3, #0]
}
 800363e:	bf00      	nop
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr

08003648 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6892      	ldr	r2, [r2, #8]
 800365e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6852      	ldr	r2, [r2, #4]
 8003668:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	429a      	cmp	r2, r3
 8003672:	d103      	bne.n	800367c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	1e5a      	subs	r2, r3, #1
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr
	...

0800369c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10a      	bne.n	80036c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036c2:	bf00      	nop
 80036c4:	e7fe      	b.n	80036c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80036c6:	f002 f831 	bl	800572c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d2:	68f9      	ldr	r1, [r7, #12]
 80036d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	441a      	add	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	3b01      	subs	r3, #1
 80036f8:	68f9      	ldr	r1, [r7, #12]
 80036fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	441a      	add	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	22ff      	movs	r2, #255	; 0xff
 800370a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	22ff      	movs	r2, #255	; 0xff
 8003712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d114      	bne.n	8003746 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01a      	beq.n	800375a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	3310      	adds	r3, #16
 8003728:	4618      	mov	r0, r3
 800372a:	f001 f959 	bl	80049e0 <xTaskRemoveFromEventList>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d012      	beq.n	800375a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <xQueueGenericReset+0xcc>)
 8003736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	e009      	b.n	800375a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	3310      	adds	r3, #16
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fef6 	bl	800353c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	3324      	adds	r3, #36	; 0x24
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fef1 	bl	800353c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800375a:	f002 f817 	bl	800578c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800375e:	2301      	movs	r3, #1
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	e000ed04 	.word	0xe000ed04

0800376c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08e      	sub	sp, #56	; 0x38
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003792:	bf00      	nop
 8003794:	e7fe      	b.n	8003794 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <xQueueGenericCreateStatic+0x52>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <xQueueGenericCreateStatic+0x56>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <xQueueGenericCreateStatic+0x58>
 80037c2:	2300      	movs	r3, #0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10a      	bne.n	80037de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	623b      	str	r3, [r7, #32]
}
 80037da:	bf00      	nop
 80037dc:	e7fe      	b.n	80037dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d102      	bne.n	80037ea <xQueueGenericCreateStatic+0x7e>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <xQueueGenericCreateStatic+0x82>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <xQueueGenericCreateStatic+0x84>
 80037ee:	2300      	movs	r3, #0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10a      	bne.n	800380a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	61fb      	str	r3, [r7, #28]
}
 8003806:	bf00      	nop
 8003808:	e7fe      	b.n	8003808 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800380a:	2350      	movs	r3, #80	; 0x50
 800380c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2b50      	cmp	r3, #80	; 0x50
 8003812:	d00a      	beq.n	800382a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	61bb      	str	r3, [r7, #24]
}
 8003826:	bf00      	nop
 8003828:	e7fe      	b.n	8003828 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00d      	beq.n	8003850 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800383c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	4613      	mov	r3, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f843 	bl	80038d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003852:	4618      	mov	r0, r3
 8003854:	3730      	adds	r7, #48	; 0x30
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800385a:	b580      	push	{r7, lr}
 800385c:	b08a      	sub	sp, #40	; 0x28
 800385e:	af02      	add	r7, sp, #8
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	4613      	mov	r3, r2
 8003866:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10a      	bne.n	8003884 <xQueueGenericCreate+0x2a>
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	613b      	str	r3, [r7, #16]
}
 8003880:	bf00      	nop
 8003882:	e7fe      	b.n	8003882 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	e004      	b.n	800389a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	fb02 f303 	mul.w	r3, r2, r3
 8003898:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3350      	adds	r3, #80	; 0x50
 800389e:	4618      	mov	r0, r3
 80038a0:	f002 f844 	bl	800592c <pvPortMalloc>
 80038a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00f      	beq.n	80038cc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	3350      	adds	r3, #80	; 0x50
 80038b0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038ba:	79fa      	ldrb	r2, [r7, #7]
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f805 	bl	80038d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80038cc:	69bb      	ldr	r3, [r7, #24]
	}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d103      	bne.n	80038f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e002      	b.n	80038f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003904:	2101      	movs	r1, #1
 8003906:	69b8      	ldr	r0, [r7, #24]
 8003908:	f7ff fec8 	bl	800369c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08e      	sub	sp, #56	; 0x38
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800392a:	2300      	movs	r3, #0
 800392c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <xQueueGenericSend+0x32>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800394a:	bf00      	nop
 800394c:	e7fe      	b.n	800394c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d103      	bne.n	800395c <xQueueGenericSend+0x40>
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <xQueueGenericSend+0x44>
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <xQueueGenericSend+0x46>
 8003960:	2300      	movs	r3, #0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10a      	bne.n	800397c <xQueueGenericSend+0x60>
	__asm volatile
 8003966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003978:	bf00      	nop
 800397a:	e7fe      	b.n	800397a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d103      	bne.n	800398a <xQueueGenericSend+0x6e>
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <xQueueGenericSend+0x72>
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <xQueueGenericSend+0x74>
 800398e:	2300      	movs	r3, #0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <xQueueGenericSend+0x8e>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	623b      	str	r3, [r7, #32]
}
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039aa:	f001 f9df 	bl	8004d6c <xTaskGetSchedulerState>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d102      	bne.n	80039ba <xQueueGenericSend+0x9e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <xQueueGenericSend+0xa2>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <xQueueGenericSend+0xa4>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <xQueueGenericSend+0xbe>
	__asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	61fb      	str	r3, [r7, #28]
}
 80039d6:	bf00      	nop
 80039d8:	e7fe      	b.n	80039d8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039da:	f001 fea7 	bl	800572c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d302      	bcc.n	80039f0 <xQueueGenericSend+0xd4>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d129      	bne.n	8003a44 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039f6:	f000 fa07 	bl	8003e08 <prvCopyDataToQueue>
 80039fa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d010      	beq.n	8003a26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	3324      	adds	r3, #36	; 0x24
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 ffe9 	bl	80049e0 <xTaskRemoveFromEventList>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d013      	beq.n	8003a3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a14:	4b3f      	ldr	r3, [pc, #252]	; (8003b14 <xQueueGenericSend+0x1f8>)
 8003a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	e00a      	b.n	8003a3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d007      	beq.n	8003a3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a2c:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <xQueueGenericSend+0x1f8>)
 8003a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a3c:	f001 fea6 	bl	800578c <vPortExitCritical>
				return pdPASS;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e063      	b.n	8003b0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d103      	bne.n	8003a52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a4a:	f001 fe9f 	bl	800578c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e05c      	b.n	8003b0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a58:	f107 0314 	add.w	r3, r7, #20
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f001 f823 	bl	8004aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a62:	2301      	movs	r3, #1
 8003a64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a66:	f001 fe91 	bl	800578c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a6a:	f000 fd8d 	bl	8004588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a6e:	f001 fe5d 	bl	800572c <vPortEnterCritical>
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a78:	b25b      	sxtb	r3, r3
 8003a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7e:	d103      	bne.n	8003a88 <xQueueGenericSend+0x16c>
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a8e:	b25b      	sxtb	r3, r3
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a94:	d103      	bne.n	8003a9e <xQueueGenericSend+0x182>
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a9e:	f001 fe75 	bl	800578c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aa2:	1d3a      	adds	r2, r7, #4
 8003aa4:	f107 0314 	add.w	r3, r7, #20
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f001 f812 	bl	8004ad4 <xTaskCheckForTimeOut>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d124      	bne.n	8003b00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ab8:	f000 fa9e 	bl	8003ff8 <prvIsQueueFull>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d018      	beq.n	8003af4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	3310      	adds	r3, #16
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 ff38 	bl	8004940 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ad2:	f000 fa29 	bl	8003f28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003ad6:	f000 fd65 	bl	80045a4 <xTaskResumeAll>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f47f af7c 	bne.w	80039da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <xQueueGenericSend+0x1f8>)
 8003ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	e772      	b.n	80039da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003af6:	f000 fa17 	bl	8003f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003afa:	f000 fd53 	bl	80045a4 <xTaskResumeAll>
 8003afe:	e76c      	b.n	80039da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b02:	f000 fa11 	bl	8003f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b06:	f000 fd4d 	bl	80045a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b0a:	2300      	movs	r3, #0
		}
	}
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3738      	adds	r7, #56	; 0x38
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	e000ed04 	.word	0xe000ed04

08003b18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08e      	sub	sp, #56	; 0x38
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d103      	bne.n	8003b54 <xQueueGenericSendFromISR+0x3c>
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <xQueueGenericSendFromISR+0x40>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <xQueueGenericSendFromISR+0x42>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	623b      	str	r3, [r7, #32]
}
 8003b70:	bf00      	nop
 8003b72:	e7fe      	b.n	8003b72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d103      	bne.n	8003b82 <xQueueGenericSendFromISR+0x6a>
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <xQueueGenericSendFromISR+0x6e>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <xQueueGenericSendFromISR+0x70>
 8003b86:	2300      	movs	r3, #0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	61fb      	str	r3, [r7, #28]
}
 8003b9e:	bf00      	nop
 8003ba0:	e7fe      	b.n	8003ba0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ba2:	f001 fe85 	bl	80058b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ba6:	f3ef 8211 	mrs	r2, BASEPRI
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	61ba      	str	r2, [r7, #24]
 8003bbc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d302      	bcc.n	8003bd4 <xQueueGenericSendFromISR+0xbc>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d12c      	bne.n	8003c2e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003be4:	f000 f910 	bl	8003e08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003be8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d112      	bne.n	8003c18 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d016      	beq.n	8003c28 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	3324      	adds	r3, #36	; 0x24
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 feee 	bl	80049e0 <xTaskRemoveFromEventList>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00e      	beq.n	8003c28 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00b      	beq.n	8003c28 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	e007      	b.n	8003c28 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	b25a      	sxtb	r2, r3
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003c2c:	e001      	b.n	8003c32 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
 8003c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c34:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3738      	adds	r7, #56	; 0x38
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08c      	sub	sp, #48	; 0x30
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c54:	2300      	movs	r3, #0
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <xQueueReceive+0x30>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	623b      	str	r3, [r7, #32]
}
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d103      	bne.n	8003c86 <xQueueReceive+0x3e>
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <xQueueReceive+0x42>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <xQueueReceive+0x44>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <xQueueReceive+0x5e>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	61fb      	str	r3, [r7, #28]
}
 8003ca2:	bf00      	nop
 8003ca4:	e7fe      	b.n	8003ca4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ca6:	f001 f861 	bl	8004d6c <xTaskGetSchedulerState>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <xQueueReceive+0x6e>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <xQueueReceive+0x72>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <xQueueReceive+0x74>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <xQueueReceive+0x8e>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	61bb      	str	r3, [r7, #24]
}
 8003cd2:	bf00      	nop
 8003cd4:	e7fe      	b.n	8003cd4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cd6:	f001 fd29 	bl	800572c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01f      	beq.n	8003d26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ce6:	68b9      	ldr	r1, [r7, #8]
 8003ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cea:	f000 f8f7 	bl	8003edc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	1e5a      	subs	r2, r3, #1
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00f      	beq.n	8003d1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	3310      	adds	r3, #16
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fe6c 	bl	80049e0 <xTaskRemoveFromEventList>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d0e:	4b3d      	ldr	r3, [pc, #244]	; (8003e04 <xQueueReceive+0x1bc>)
 8003d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d1e:	f001 fd35 	bl	800578c <vPortExitCritical>
				return pdPASS;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e069      	b.n	8003dfa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d103      	bne.n	8003d34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d2c:	f001 fd2e 	bl	800578c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e062      	b.n	8003dfa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d3a:	f107 0310 	add.w	r3, r7, #16
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 feb2 	bl	8004aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d48:	f001 fd20 	bl	800578c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d4c:	f000 fc1c 	bl	8004588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d50:	f001 fcec 	bl	800572c <vPortEnterCritical>
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d5a:	b25b      	sxtb	r3, r3
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d103      	bne.n	8003d6a <xQueueReceive+0x122>
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d70:	b25b      	sxtb	r3, r3
 8003d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d76:	d103      	bne.n	8003d80 <xQueueReceive+0x138>
 8003d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d80:	f001 fd04 	bl	800578c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d84:	1d3a      	adds	r2, r7, #4
 8003d86:	f107 0310 	add.w	r3, r7, #16
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fea1 	bl	8004ad4 <xTaskCheckForTimeOut>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d123      	bne.n	8003de0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d9a:	f000 f917 	bl	8003fcc <prvIsQueueEmpty>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d017      	beq.n	8003dd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	3324      	adds	r3, #36	; 0x24
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4611      	mov	r1, r2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fdc7 	bl	8004940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003db4:	f000 f8b8 	bl	8003f28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003db8:	f000 fbf4 	bl	80045a4 <xTaskResumeAll>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d189      	bne.n	8003cd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003dc2:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <xQueueReceive+0x1bc>)
 8003dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	e780      	b.n	8003cd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dd6:	f000 f8a7 	bl	8003f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dda:	f000 fbe3 	bl	80045a4 <xTaskResumeAll>
 8003dde:	e77a      	b.n	8003cd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003de2:	f000 f8a1 	bl	8003f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003de6:	f000 fbdd 	bl	80045a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dec:	f000 f8ee 	bl	8003fcc <prvIsQueueEmpty>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f43f af6f 	beq.w	8003cd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003df8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3730      	adds	r7, #48	; 0x30
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	e000ed04 	.word	0xe000ed04

08003e08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10d      	bne.n	8003e42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d14d      	bne.n	8003eca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 ffb8 	bl	8004da8 <xTaskPriorityDisinherit>
 8003e38:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	e043      	b.n	8003eca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d119      	bne.n	8003e7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6898      	ldr	r0, [r3, #8]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	461a      	mov	r2, r3
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	f002 f878 	bl	8005f48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	441a      	add	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d32b      	bcc.n	8003eca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	609a      	str	r2, [r3, #8]
 8003e7a:	e026      	b.n	8003eca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	68d8      	ldr	r0, [r3, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	461a      	mov	r2, r3
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	f002 f85e 	bl	8005f48 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	425b      	negs	r3, r3
 8003e96:	441a      	add	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d207      	bcs.n	8003eb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	425b      	negs	r3, r3
 8003eb2:	441a      	add	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d105      	bne.n	8003eca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003ed2:	697b      	ldr	r3, [r7, #20]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d018      	beq.n	8003f20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	441a      	add	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d303      	bcc.n	8003f10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68d9      	ldr	r1, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	461a      	mov	r2, r3
 8003f1a:	6838      	ldr	r0, [r7, #0]
 8003f1c:	f002 f814 	bl	8005f48 <memcpy>
	}
}
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f30:	f001 fbfc 	bl	800572c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f3c:	e011      	b.n	8003f62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d012      	beq.n	8003f6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3324      	adds	r3, #36	; 0x24
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fd48 	bl	80049e0 <xTaskRemoveFromEventList>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f56:	f000 fe1f 	bl	8004b98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	dce9      	bgt.n	8003f3e <prvUnlockQueue+0x16>
 8003f6a:	e000      	b.n	8003f6e <prvUnlockQueue+0x46>
					break;
 8003f6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	22ff      	movs	r2, #255	; 0xff
 8003f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f76:	f001 fc09 	bl	800578c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f7a:	f001 fbd7 	bl	800572c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f86:	e011      	b.n	8003fac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d012      	beq.n	8003fb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3310      	adds	r3, #16
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fd23 	bl	80049e0 <xTaskRemoveFromEventList>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003fa0:	f000 fdfa 	bl	8004b98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003fa4:	7bbb      	ldrb	r3, [r7, #14]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	dce9      	bgt.n	8003f88 <prvUnlockQueue+0x60>
 8003fb4:	e000      	b.n	8003fb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003fb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	22ff      	movs	r2, #255	; 0xff
 8003fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003fc0:	f001 fbe4 	bl	800578c <vPortExitCritical>
}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fd4:	f001 fbaa 	bl	800572c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d102      	bne.n	8003fe6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e001      	b.n	8003fea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fea:	f001 fbcf 	bl	800578c <vPortExitCritical>

	return xReturn;
 8003fee:	68fb      	ldr	r3, [r7, #12]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004000:	f001 fb94 	bl	800572c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400c:	429a      	cmp	r2, r3
 800400e:	d102      	bne.n	8004016 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004010:	2301      	movs	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	e001      	b.n	800401a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800401a:	f001 fbb7 	bl	800578c <vPortExitCritical>

	return xReturn;
 800401e:	68fb      	ldr	r3, [r7, #12]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	e014      	b.n	8004062 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004038:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <vQueueAddToRegistry+0x4c>)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004044:	490b      	ldr	r1, [pc, #44]	; (8004074 <vQueueAddToRegistry+0x4c>)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800404e:	4a09      	ldr	r2, [pc, #36]	; (8004074 <vQueueAddToRegistry+0x4c>)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4413      	add	r3, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800405a:	e006      	b.n	800406a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3301      	adds	r3, #1
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b07      	cmp	r3, #7
 8004066:	d9e7      	bls.n	8004038 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004068:	bf00      	nop
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr
 8004074:	200008bc 	.word	0x200008bc

08004078 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004088:	f001 fb50 	bl	800572c <vPortEnterCritical>
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004092:	b25b      	sxtb	r3, r3
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004098:	d103      	bne.n	80040a2 <vQueueWaitForMessageRestricted+0x2a>
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040a8:	b25b      	sxtb	r3, r3
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ae:	d103      	bne.n	80040b8 <vQueueWaitForMessageRestricted+0x40>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040b8:	f001 fb68 	bl	800578c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	3324      	adds	r3, #36	; 0x24
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fc5b 	bl	8004988 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040d2:	6978      	ldr	r0, [r7, #20]
 80040d4:	f7ff ff28 	bl	8003f28 <prvUnlockQueue>
	}
 80040d8:	bf00      	nop
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08e      	sub	sp, #56	; 0x38
 80040e4:	af04      	add	r7, sp, #16
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <xTaskCreateStatic+0x2a>
	__asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	623b      	str	r3, [r7, #32]
}
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <xTaskCreateStatic+0x46>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	61fb      	str	r3, [r7, #28]
}
 8004122:	bf00      	nop
 8004124:	e7fe      	b.n	8004124 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004126:	23a8      	movs	r3, #168	; 0xa8
 8004128:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2ba8      	cmp	r3, #168	; 0xa8
 800412e:	d00a      	beq.n	8004146 <xTaskCreateStatic+0x66>
	__asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	61bb      	str	r3, [r7, #24]
}
 8004142:	bf00      	nop
 8004144:	e7fe      	b.n	8004144 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01e      	beq.n	800418a <xTaskCreateStatic+0xaa>
 800414c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414e:	2b00      	cmp	r3, #0
 8004150:	d01b      	beq.n	800418a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800415a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	2202      	movs	r2, #2
 8004160:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004164:	2300      	movs	r3, #0
 8004166:	9303      	str	r3, [sp, #12]
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	9302      	str	r3, [sp, #8]
 800416c:	f107 0314 	add.w	r3, r7, #20
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f851 	bl	8004224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004182:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004184:	f000 f8ec 	bl	8004360 <prvAddNewTaskToReadyList>
 8004188:	e001      	b.n	800418e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800418e:	697b      	ldr	r3, [r7, #20]
	}
 8004190:	4618      	mov	r0, r3
 8004192:	3728      	adds	r7, #40	; 0x28
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08c      	sub	sp, #48	; 0x30
 800419c:	af04      	add	r7, sp, #16
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	4613      	mov	r3, r2
 80041a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f001 fbbd 	bl	800592c <pvPortMalloc>
 80041b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00e      	beq.n	80041d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80041ba:	20a8      	movs	r0, #168	; 0xa8
 80041bc:	f001 fbb6 	bl	800592c <pvPortMalloc>
 80041c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
 80041ce:	e005      	b.n	80041dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041d0:	6978      	ldr	r0, [r7, #20]
 80041d2:	f001 fc6f 	bl	8005ab4 <vPortFree>
 80041d6:	e001      	b.n	80041dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d017      	beq.n	8004212 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041ea:	88fa      	ldrh	r2, [r7, #6]
 80041ec:	2300      	movs	r3, #0
 80041ee:	9303      	str	r3, [sp, #12]
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	9302      	str	r3, [sp, #8]
 80041f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f80f 	bl	8004224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004206:	69f8      	ldr	r0, [r7, #28]
 8004208:	f000 f8aa 	bl	8004360 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800420c:	2301      	movs	r3, #1
 800420e:	61bb      	str	r3, [r7, #24]
 8004210:	e002      	b.n	8004218 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004212:	f04f 33ff 	mov.w	r3, #4294967295
 8004216:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004218:	69bb      	ldr	r3, [r7, #24]
	}
 800421a:	4618      	mov	r0, r3
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	461a      	mov	r2, r3
 800423c:	21a5      	movs	r1, #165	; 0xa5
 800423e:	f001 fdf9 	bl	8005e34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800424c:	3b01      	subs	r3, #1
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	f023 0307 	bic.w	r3, r3, #7
 800425a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	617b      	str	r3, [r7, #20]
}
 8004278:	bf00      	nop
 800427a:	e7fe      	b.n	800427a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	e012      	b.n	80042a8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	4413      	add	r3, r2
 8004288:	7819      	ldrb	r1, [r3, #0]
 800428a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	4413      	add	r3, r2
 8004290:	3334      	adds	r3, #52	; 0x34
 8004292:	460a      	mov	r2, r1
 8004294:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	4413      	add	r3, r2
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d006      	beq.n	80042b0 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	3301      	adds	r3, #1
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	2b0f      	cmp	r3, #15
 80042ac:	d9e9      	bls.n	8004282 <prvInitialiseNewTask+0x5e>
 80042ae:	e000      	b.n	80042b2 <prvInitialiseNewTask+0x8e>
		{
			break;
 80042b0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042bc:	2b37      	cmp	r3, #55	; 0x37
 80042be:	d901      	bls.n	80042c4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042c0:	2337      	movs	r3, #55	; 0x37
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	2200      	movs	r2, #0
 80042d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	3304      	adds	r3, #4
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff f94d 	bl	800357a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	3318      	adds	r3, #24
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff f948 	bl	800357a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004302:	2200      	movs	r2, #0
 8004304:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	2200      	movs	r2, #0
 800430c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	3354      	adds	r3, #84	; 0x54
 8004314:	224c      	movs	r2, #76	; 0x4c
 8004316:	2100      	movs	r1, #0
 8004318:	4618      	mov	r0, r3
 800431a:	f001 fd8b 	bl	8005e34 <memset>
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	4a0c      	ldr	r2, [pc, #48]	; (8004354 <prvInitialiseNewTask+0x130>)
 8004322:	659a      	str	r2, [r3, #88]	; 0x58
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	4a0c      	ldr	r2, [pc, #48]	; (8004358 <prvInitialiseNewTask+0x134>)
 8004328:	65da      	str	r2, [r3, #92]	; 0x5c
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	4a0b      	ldr	r2, [pc, #44]	; (800435c <prvInitialiseNewTask+0x138>)
 800432e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	68f9      	ldr	r1, [r7, #12]
 8004334:	69b8      	ldr	r0, [r7, #24]
 8004336:	f001 f90b 	bl	8005550 <pxPortInitialiseStack>
 800433a:	4602      	mov	r2, r0
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800434c:	bf00      	nop
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20001b48 	.word	0x20001b48
 8004358:	20001bb0 	.word	0x20001bb0
 800435c:	20001c18 	.word	0x20001c18

08004360 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004368:	f001 f9e0 	bl	800572c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800436c:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <prvAddNewTaskToReadyList+0xc4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3301      	adds	r3, #1
 8004372:	4a2c      	ldr	r2, [pc, #176]	; (8004424 <prvAddNewTaskToReadyList+0xc4>)
 8004374:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004376:	4b2c      	ldr	r3, [pc, #176]	; (8004428 <prvAddNewTaskToReadyList+0xc8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800437e:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <prvAddNewTaskToReadyList+0xc8>)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <prvAddNewTaskToReadyList+0xc4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d110      	bne.n	80043ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800438c:	f000 fc28 	bl	8004be0 <prvInitialiseTaskLists>
 8004390:	e00d      	b.n	80043ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004392:	4b26      	ldr	r3, [pc, #152]	; (800442c <prvAddNewTaskToReadyList+0xcc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800439a:	4b23      	ldr	r3, [pc, #140]	; (8004428 <prvAddNewTaskToReadyList+0xc8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d802      	bhi.n	80043ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043a8:	4a1f      	ldr	r2, [pc, #124]	; (8004428 <prvAddNewTaskToReadyList+0xc8>)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043ae:	4b20      	ldr	r3, [pc, #128]	; (8004430 <prvAddNewTaskToReadyList+0xd0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3301      	adds	r3, #1
 80043b4:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <prvAddNewTaskToReadyList+0xd0>)
 80043b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043b8:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <prvAddNewTaskToReadyList+0xd0>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c4:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <prvAddNewTaskToReadyList+0xd4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d903      	bls.n	80043d4 <prvAddNewTaskToReadyList+0x74>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	4a18      	ldr	r2, [pc, #96]	; (8004434 <prvAddNewTaskToReadyList+0xd4>)
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4a15      	ldr	r2, [pc, #84]	; (8004438 <prvAddNewTaskToReadyList+0xd8>)
 80043e2:	441a      	add	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4619      	mov	r1, r3
 80043ea:	4610      	mov	r0, r2
 80043ec:	f7ff f8d1 	bl	8003592 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043f0:	f001 f9cc 	bl	800578c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043f4:	4b0d      	ldr	r3, [pc, #52]	; (800442c <prvAddNewTaskToReadyList+0xcc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00e      	beq.n	800441a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <prvAddNewTaskToReadyList+0xc8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	429a      	cmp	r2, r3
 8004408:	d207      	bcs.n	800441a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800440a:	4b0c      	ldr	r3, [pc, #48]	; (800443c <prvAddNewTaskToReadyList+0xdc>)
 800440c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000dd0 	.word	0x20000dd0
 8004428:	200008fc 	.word	0x200008fc
 800442c:	20000ddc 	.word	0x20000ddc
 8004430:	20000dec 	.word	0x20000dec
 8004434:	20000dd8 	.word	0x20000dd8
 8004438:	20000900 	.word	0x20000900
 800443c:	e000ed04 	.word	0xe000ed04

08004440 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d017      	beq.n	8004482 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004452:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <vTaskDelay+0x60>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <vTaskDelay+0x30>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	60bb      	str	r3, [r7, #8]
}
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004470:	f000 f88a 	bl	8004588 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004474:	2100      	movs	r1, #0
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fd04 	bl	8004e84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800447c:	f000 f892 	bl	80045a4 <xTaskResumeAll>
 8004480:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d107      	bne.n	8004498 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004488:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <vTaskDelay+0x64>)
 800448a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000df8 	.word	0x20000df8
 80044a4:	e000ed04 	.word	0xe000ed04

080044a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08a      	sub	sp, #40	; 0x28
 80044ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044b6:	463a      	mov	r2, r7
 80044b8:	1d39      	adds	r1, r7, #4
 80044ba:	f107 0308 	add.w	r3, r7, #8
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff f80a 	bl	80034d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044c4:	6839      	ldr	r1, [r7, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	9202      	str	r2, [sp, #8]
 80044cc:	9301      	str	r3, [sp, #4]
 80044ce:	2300      	movs	r3, #0
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	2300      	movs	r3, #0
 80044d4:	460a      	mov	r2, r1
 80044d6:	4924      	ldr	r1, [pc, #144]	; (8004568 <vTaskStartScheduler+0xc0>)
 80044d8:	4824      	ldr	r0, [pc, #144]	; (800456c <vTaskStartScheduler+0xc4>)
 80044da:	f7ff fe01 	bl	80040e0 <xTaskCreateStatic>
 80044de:	4603      	mov	r3, r0
 80044e0:	4a23      	ldr	r2, [pc, #140]	; (8004570 <vTaskStartScheduler+0xc8>)
 80044e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044e4:	4b22      	ldr	r3, [pc, #136]	; (8004570 <vTaskStartScheduler+0xc8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044ec:	2301      	movs	r3, #1
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	e001      	b.n	80044f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d102      	bne.n	8004502 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044fc:	f000 fd16 	bl	8004f2c <xTimerCreateTimerTask>
 8004500:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d11b      	bne.n	8004540 <vTaskStartScheduler+0x98>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	613b      	str	r3, [r7, #16]
}
 800451a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800451c:	4b15      	ldr	r3, [pc, #84]	; (8004574 <vTaskStartScheduler+0xcc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3354      	adds	r3, #84	; 0x54
 8004522:	4a15      	ldr	r2, [pc, #84]	; (8004578 <vTaskStartScheduler+0xd0>)
 8004524:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004526:	4b15      	ldr	r3, [pc, #84]	; (800457c <vTaskStartScheduler+0xd4>)
 8004528:	f04f 32ff 	mov.w	r2, #4294967295
 800452c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800452e:	4b14      	ldr	r3, [pc, #80]	; (8004580 <vTaskStartScheduler+0xd8>)
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004534:	4b13      	ldr	r3, [pc, #76]	; (8004584 <vTaskStartScheduler+0xdc>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800453a:	f001 f885 	bl	8005648 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800453e:	e00e      	b.n	800455e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004546:	d10a      	bne.n	800455e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	60fb      	str	r3, [r7, #12]
}
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <vTaskStartScheduler+0xb4>
}
 800455e:	bf00      	nop
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	0800688c 	.word	0x0800688c
 800456c:	08004bb1 	.word	0x08004bb1
 8004570:	20000df4 	.word	0x20000df4
 8004574:	200008fc 	.word	0x200008fc
 8004578:	2000005c 	.word	0x2000005c
 800457c:	20000df0 	.word	0x20000df0
 8004580:	20000ddc 	.word	0x20000ddc
 8004584:	20000dd4 	.word	0x20000dd4

08004588 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <vTaskSuspendAll+0x18>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3301      	adds	r3, #1
 8004592:	4a03      	ldr	r2, [pc, #12]	; (80045a0 <vTaskSuspendAll+0x18>)
 8004594:	6013      	str	r3, [r2, #0]
}
 8004596:	bf00      	nop
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	20000df8 	.word	0x20000df8

080045a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045b2:	4b42      	ldr	r3, [pc, #264]	; (80046bc <xTaskResumeAll+0x118>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	603b      	str	r3, [r7, #0]
}
 80045cc:	bf00      	nop
 80045ce:	e7fe      	b.n	80045ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045d0:	f001 f8ac 	bl	800572c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045d4:	4b39      	ldr	r3, [pc, #228]	; (80046bc <xTaskResumeAll+0x118>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3b01      	subs	r3, #1
 80045da:	4a38      	ldr	r2, [pc, #224]	; (80046bc <xTaskResumeAll+0x118>)
 80045dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045de:	4b37      	ldr	r3, [pc, #220]	; (80046bc <xTaskResumeAll+0x118>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d162      	bne.n	80046ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045e6:	4b36      	ldr	r3, [pc, #216]	; (80046c0 <xTaskResumeAll+0x11c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d05e      	beq.n	80046ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045ee:	e02f      	b.n	8004650 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80045f0:	4b34      	ldr	r3, [pc, #208]	; (80046c4 <xTaskResumeAll+0x120>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3318      	adds	r3, #24
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff f823 	bl	8003648 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3304      	adds	r3, #4
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff f81e 	bl	8003648 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	4b2d      	ldr	r3, [pc, #180]	; (80046c8 <xTaskResumeAll+0x124>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d903      	bls.n	8004620 <xTaskResumeAll+0x7c>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	4a2a      	ldr	r2, [pc, #168]	; (80046c8 <xTaskResumeAll+0x124>)
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4a27      	ldr	r2, [pc, #156]	; (80046cc <xTaskResumeAll+0x128>)
 800462e:	441a      	add	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3304      	adds	r3, #4
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f7fe ffab 	bl	8003592 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004640:	4b23      	ldr	r3, [pc, #140]	; (80046d0 <xTaskResumeAll+0x12c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	429a      	cmp	r2, r3
 8004648:	d302      	bcc.n	8004650 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800464a:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <xTaskResumeAll+0x130>)
 800464c:	2201      	movs	r2, #1
 800464e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004650:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <xTaskResumeAll+0x120>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1cb      	bne.n	80045f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800465e:	f000 fb61 	bl	8004d24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004662:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <xTaskResumeAll+0x134>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d010      	beq.n	8004690 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800466e:	f000 f845 	bl	80046fc <xTaskIncrementTick>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004678:	4b16      	ldr	r3, [pc, #88]	; (80046d4 <xTaskResumeAll+0x130>)
 800467a:	2201      	movs	r2, #1
 800467c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3b01      	subs	r3, #1
 8004682:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f1      	bne.n	800466e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <xTaskResumeAll+0x134>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004690:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <xTaskResumeAll+0x130>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d009      	beq.n	80046ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004698:	2301      	movs	r3, #1
 800469a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800469c:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <xTaskResumeAll+0x138>)
 800469e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046ac:	f001 f86e 	bl	800578c <vPortExitCritical>

	return xAlreadyYielded;
 80046b0:	68bb      	ldr	r3, [r7, #8]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20000df8 	.word	0x20000df8
 80046c0:	20000dd0 	.word	0x20000dd0
 80046c4:	20000d90 	.word	0x20000d90
 80046c8:	20000dd8 	.word	0x20000dd8
 80046cc:	20000900 	.word	0x20000900
 80046d0:	200008fc 	.word	0x200008fc
 80046d4:	20000de4 	.word	0x20000de4
 80046d8:	20000de0 	.word	0x20000de0
 80046dc:	e000ed04 	.word	0xe000ed04

080046e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046e6:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <xTaskGetTickCount+0x18>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046ec:	687b      	ldr	r3, [r7, #4]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr
 80046f8:	20000dd4 	.word	0x20000dd4

080046fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004706:	4b51      	ldr	r3, [pc, #324]	; (800484c <xTaskIncrementTick+0x150>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	f040 808e 	bne.w	800482c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004710:	4b4f      	ldr	r3, [pc, #316]	; (8004850 <xTaskIncrementTick+0x154>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3301      	adds	r3, #1
 8004716:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004718:	4a4d      	ldr	r2, [pc, #308]	; (8004850 <xTaskIncrementTick+0x154>)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d120      	bne.n	8004766 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004724:	4b4b      	ldr	r3, [pc, #300]	; (8004854 <xTaskIncrementTick+0x158>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <xTaskIncrementTick+0x48>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	603b      	str	r3, [r7, #0]
}
 8004740:	bf00      	nop
 8004742:	e7fe      	b.n	8004742 <xTaskIncrementTick+0x46>
 8004744:	4b43      	ldr	r3, [pc, #268]	; (8004854 <xTaskIncrementTick+0x158>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	4b43      	ldr	r3, [pc, #268]	; (8004858 <xTaskIncrementTick+0x15c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a41      	ldr	r2, [pc, #260]	; (8004854 <xTaskIncrementTick+0x158>)
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	4a41      	ldr	r2, [pc, #260]	; (8004858 <xTaskIncrementTick+0x15c>)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	4b40      	ldr	r3, [pc, #256]	; (800485c <xTaskIncrementTick+0x160>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3301      	adds	r3, #1
 800475e:	4a3f      	ldr	r2, [pc, #252]	; (800485c <xTaskIncrementTick+0x160>)
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	f000 fadf 	bl	8004d24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004766:	4b3e      	ldr	r3, [pc, #248]	; (8004860 <xTaskIncrementTick+0x164>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	429a      	cmp	r2, r3
 800476e:	d34e      	bcc.n	800480e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004770:	4b38      	ldr	r3, [pc, #224]	; (8004854 <xTaskIncrementTick+0x158>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <xTaskIncrementTick+0x82>
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <xTaskIncrementTick+0x84>
 800477e:	2300      	movs	r3, #0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d004      	beq.n	800478e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004784:	4b36      	ldr	r3, [pc, #216]	; (8004860 <xTaskIncrementTick+0x164>)
 8004786:	f04f 32ff 	mov.w	r2, #4294967295
 800478a:	601a      	str	r2, [r3, #0]
					break;
 800478c:	e03f      	b.n	800480e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800478e:	4b31      	ldr	r3, [pc, #196]	; (8004854 <xTaskIncrementTick+0x158>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d203      	bcs.n	80047ae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047a6:	4a2e      	ldr	r2, [pc, #184]	; (8004860 <xTaskIncrementTick+0x164>)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6013      	str	r3, [r2, #0]
						break;
 80047ac:	e02f      	b.n	800480e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe ff48 	bl	8003648 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d004      	beq.n	80047ca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	3318      	adds	r3, #24
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fe ff3f 	bl	8003648 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ce:	4b25      	ldr	r3, [pc, #148]	; (8004864 <xTaskIncrementTick+0x168>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d903      	bls.n	80047de <xTaskIncrementTick+0xe2>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	4a22      	ldr	r2, [pc, #136]	; (8004864 <xTaskIncrementTick+0x168>)
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <xTaskIncrementTick+0x16c>)
 80047ec:	441a      	add	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3304      	adds	r3, #4
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f7fe fecc 	bl	8003592 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fe:	4b1b      	ldr	r3, [pc, #108]	; (800486c <xTaskIncrementTick+0x170>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	429a      	cmp	r2, r3
 8004806:	d3b3      	bcc.n	8004770 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004808:	2301      	movs	r3, #1
 800480a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800480c:	e7b0      	b.n	8004770 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800480e:	4b17      	ldr	r3, [pc, #92]	; (800486c <xTaskIncrementTick+0x170>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004814:	4914      	ldr	r1, [pc, #80]	; (8004868 <xTaskIncrementTick+0x16c>)
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d907      	bls.n	8004836 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004826:	2301      	movs	r3, #1
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	e004      	b.n	8004836 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800482c:	4b10      	ldr	r3, [pc, #64]	; (8004870 <xTaskIncrementTick+0x174>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3301      	adds	r3, #1
 8004832:	4a0f      	ldr	r2, [pc, #60]	; (8004870 <xTaskIncrementTick+0x174>)
 8004834:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004836:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <xTaskIncrementTick+0x178>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800483e:	2301      	movs	r3, #1
 8004840:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004842:	697b      	ldr	r3, [r7, #20]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	20000df8 	.word	0x20000df8
 8004850:	20000dd4 	.word	0x20000dd4
 8004854:	20000d88 	.word	0x20000d88
 8004858:	20000d8c 	.word	0x20000d8c
 800485c:	20000de8 	.word	0x20000de8
 8004860:	20000df0 	.word	0x20000df0
 8004864:	20000dd8 	.word	0x20000dd8
 8004868:	20000900 	.word	0x20000900
 800486c:	200008fc 	.word	0x200008fc
 8004870:	20000de0 	.word	0x20000de0
 8004874:	20000de4 	.word	0x20000de4

08004878 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800487e:	4b2a      	ldr	r3, [pc, #168]	; (8004928 <vTaskSwitchContext+0xb0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004886:	4b29      	ldr	r3, [pc, #164]	; (800492c <vTaskSwitchContext+0xb4>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800488c:	e046      	b.n	800491c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800488e:	4b27      	ldr	r3, [pc, #156]	; (800492c <vTaskSwitchContext+0xb4>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004894:	4b26      	ldr	r3, [pc, #152]	; (8004930 <vTaskSwitchContext+0xb8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	e010      	b.n	80048be <vTaskSwitchContext+0x46>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	607b      	str	r3, [r7, #4]
}
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <vTaskSwitchContext+0x3e>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	491d      	ldr	r1, [pc, #116]	; (8004934 <vTaskSwitchContext+0xbc>)
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0e4      	beq.n	800489c <vTaskSwitchContext+0x24>
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4a15      	ldr	r2, [pc, #84]	; (8004934 <vTaskSwitchContext+0xbc>)
 80048de:	4413      	add	r3, r2
 80048e0:	60bb      	str	r3, [r7, #8]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	605a      	str	r2, [r3, #4]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	3308      	adds	r3, #8
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d104      	bne.n	8004902 <vTaskSwitchContext+0x8a>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	4a0b      	ldr	r2, [pc, #44]	; (8004938 <vTaskSwitchContext+0xc0>)
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	4a08      	ldr	r2, [pc, #32]	; (8004930 <vTaskSwitchContext+0xb8>)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <vTaskSwitchContext+0xc0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3354      	adds	r3, #84	; 0x54
 8004918:	4a08      	ldr	r2, [pc, #32]	; (800493c <vTaskSwitchContext+0xc4>)
 800491a:	6013      	str	r3, [r2, #0]
}
 800491c:	bf00      	nop
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20000df8 	.word	0x20000df8
 800492c:	20000de4 	.word	0x20000de4
 8004930:	20000dd8 	.word	0x20000dd8
 8004934:	20000900 	.word	0x20000900
 8004938:	200008fc 	.word	0x200008fc
 800493c:	2000005c 	.word	0x2000005c

08004940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10a      	bne.n	8004966 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	60fb      	str	r3, [r7, #12]
}
 8004962:	bf00      	nop
 8004964:	e7fe      	b.n	8004964 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004966:	4b07      	ldr	r3, [pc, #28]	; (8004984 <vTaskPlaceOnEventList+0x44>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3318      	adds	r3, #24
 800496c:	4619      	mov	r1, r3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fe fe32 	bl	80035d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004974:	2101      	movs	r1, #1
 8004976:	6838      	ldr	r0, [r7, #0]
 8004978:	f000 fa84 	bl	8004e84 <prvAddCurrentTaskToDelayedList>
}
 800497c:	bf00      	nop
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	200008fc 	.word	0x200008fc

08004988 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10a      	bne.n	80049b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	617b      	str	r3, [r7, #20]
}
 80049ac:	bf00      	nop
 80049ae:	e7fe      	b.n	80049ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <vTaskPlaceOnEventListRestricted+0x54>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3318      	adds	r3, #24
 80049b6:	4619      	mov	r1, r3
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7fe fdea 	bl	8003592 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295
 80049c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	68b8      	ldr	r0, [r7, #8]
 80049ce:	f000 fa59 	bl	8004e84 <prvAddCurrentTaskToDelayedList>
	}
 80049d2:	bf00      	nop
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	200008fc 	.word	0x200008fc

080049e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	60fb      	str	r3, [r7, #12]
}
 8004a08:	bf00      	nop
 8004a0a:	e7fe      	b.n	8004a0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	3318      	adds	r3, #24
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe fe19 	bl	8003648 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a16:	4b1e      	ldr	r3, [pc, #120]	; (8004a90 <xTaskRemoveFromEventList+0xb0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d11d      	bne.n	8004a5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	3304      	adds	r3, #4
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fe fe10 	bl	8003648 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <xTaskRemoveFromEventList+0xb4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d903      	bls.n	8004a3c <xTaskRemoveFromEventList+0x5c>
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	4a16      	ldr	r2, [pc, #88]	; (8004a94 <xTaskRemoveFromEventList+0xb4>)
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <xTaskRemoveFromEventList+0xb8>)
 8004a4a:	441a      	add	r2, r3
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f7fe fd9d 	bl	8003592 <vListInsertEnd>
 8004a58:	e005      	b.n	8004a66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	3318      	adds	r3, #24
 8004a5e:	4619      	mov	r1, r3
 8004a60:	480e      	ldr	r0, [pc, #56]	; (8004a9c <xTaskRemoveFromEventList+0xbc>)
 8004a62:	f7fe fd96 	bl	8003592 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6a:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <xTaskRemoveFromEventList+0xc0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d905      	bls.n	8004a80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a74:	2301      	movs	r3, #1
 8004a76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <xTaskRemoveFromEventList+0xc4>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	e001      	b.n	8004a84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004a84:	697b      	ldr	r3, [r7, #20]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000df8 	.word	0x20000df8
 8004a94:	20000dd8 	.word	0x20000dd8
 8004a98:	20000900 	.word	0x20000900
 8004a9c:	20000d90 	.word	0x20000d90
 8004aa0:	200008fc 	.word	0x200008fc
 8004aa4:	20000de4 	.word	0x20000de4

08004aa8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ab0:	4b06      	ldr	r3, [pc, #24]	; (8004acc <vTaskInternalSetTimeOutState+0x24>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <vTaskInternalSetTimeOutState+0x28>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	605a      	str	r2, [r3, #4]
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	20000de8 	.word	0x20000de8
 8004ad0:	20000dd4 	.word	0x20000dd4

08004ad4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	613b      	str	r3, [r7, #16]
}
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10a      	bne.n	8004b16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	60fb      	str	r3, [r7, #12]
}
 8004b12:	bf00      	nop
 8004b14:	e7fe      	b.n	8004b14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004b16:	f000 fe09 	bl	800572c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b1a:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <xTaskCheckForTimeOut+0xbc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b32:	d102      	bne.n	8004b3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	61fb      	str	r3, [r7, #28]
 8004b38:	e023      	b.n	8004b82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <xTaskCheckForTimeOut+0xc0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d007      	beq.n	8004b56 <xTaskCheckForTimeOut+0x82>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d302      	bcc.n	8004b56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b50:	2301      	movs	r3, #1
 8004b52:	61fb      	str	r3, [r7, #28]
 8004b54:	e015      	b.n	8004b82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d20b      	bcs.n	8004b78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	1ad2      	subs	r2, r2, r3
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff ff9b 	bl	8004aa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	e004      	b.n	8004b82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b82:	f000 fe03 	bl	800578c <vPortExitCritical>

	return xReturn;
 8004b86:	69fb      	ldr	r3, [r7, #28]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3720      	adds	r7, #32
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20000dd4 	.word	0x20000dd4
 8004b94:	20000de8 	.word	0x20000de8

08004b98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b9c:	4b03      	ldr	r3, [pc, #12]	; (8004bac <vTaskMissedYield+0x14>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
}
 8004ba2:	bf00      	nop
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	20000de4 	.word	0x20000de4

08004bb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bb8:	f000 f852 	bl	8004c60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bbc:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <prvIdleTask+0x28>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d9f9      	bls.n	8004bb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <prvIdleTask+0x2c>)
 8004bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bd4:	e7f0      	b.n	8004bb8 <prvIdleTask+0x8>
 8004bd6:	bf00      	nop
 8004bd8:	20000900 	.word	0x20000900
 8004bdc:	e000ed04 	.word	0xe000ed04

08004be0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004be6:	2300      	movs	r3, #0
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	e00c      	b.n	8004c06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4a12      	ldr	r2, [pc, #72]	; (8004c40 <prvInitialiseTaskLists+0x60>)
 8004bf8:	4413      	add	r3, r2
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fe fc9e 	bl	800353c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3301      	adds	r3, #1
 8004c04:	607b      	str	r3, [r7, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b37      	cmp	r3, #55	; 0x37
 8004c0a:	d9ef      	bls.n	8004bec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c0c:	480d      	ldr	r0, [pc, #52]	; (8004c44 <prvInitialiseTaskLists+0x64>)
 8004c0e:	f7fe fc95 	bl	800353c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c12:	480d      	ldr	r0, [pc, #52]	; (8004c48 <prvInitialiseTaskLists+0x68>)
 8004c14:	f7fe fc92 	bl	800353c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c18:	480c      	ldr	r0, [pc, #48]	; (8004c4c <prvInitialiseTaskLists+0x6c>)
 8004c1a:	f7fe fc8f 	bl	800353c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c1e:	480c      	ldr	r0, [pc, #48]	; (8004c50 <prvInitialiseTaskLists+0x70>)
 8004c20:	f7fe fc8c 	bl	800353c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c24:	480b      	ldr	r0, [pc, #44]	; (8004c54 <prvInitialiseTaskLists+0x74>)
 8004c26:	f7fe fc89 	bl	800353c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <prvInitialiseTaskLists+0x78>)
 8004c2c:	4a05      	ldr	r2, [pc, #20]	; (8004c44 <prvInitialiseTaskLists+0x64>)
 8004c2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c30:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <prvInitialiseTaskLists+0x7c>)
 8004c32:	4a05      	ldr	r2, [pc, #20]	; (8004c48 <prvInitialiseTaskLists+0x68>)
 8004c34:	601a      	str	r2, [r3, #0]
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000900 	.word	0x20000900
 8004c44:	20000d60 	.word	0x20000d60
 8004c48:	20000d74 	.word	0x20000d74
 8004c4c:	20000d90 	.word	0x20000d90
 8004c50:	20000da4 	.word	0x20000da4
 8004c54:	20000dbc 	.word	0x20000dbc
 8004c58:	20000d88 	.word	0x20000d88
 8004c5c:	20000d8c 	.word	0x20000d8c

08004c60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c66:	e019      	b.n	8004c9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c68:	f000 fd60 	bl	800572c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004c6c:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <prvCheckTasksWaitingTermination+0x50>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fe fce5 	bl	8003648 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <prvCheckTasksWaitingTermination+0x54>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	4a0b      	ldr	r2, [pc, #44]	; (8004cb4 <prvCheckTasksWaitingTermination+0x54>)
 8004c86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c88:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <prvCheckTasksWaitingTermination+0x58>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <prvCheckTasksWaitingTermination+0x58>)
 8004c90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c92:	f000 fd7b 	bl	800578c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f810 	bl	8004cbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c9c:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <prvCheckTasksWaitingTermination+0x58>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e1      	bne.n	8004c68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000da4 	.word	0x20000da4
 8004cb4:	20000dd0 	.word	0x20000dd0
 8004cb8:	20000db8 	.word	0x20000db8

08004cbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3354      	adds	r3, #84	; 0x54
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 f8bb 	bl	8005e44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d108      	bne.n	8004cea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 fee9 	bl	8005ab4 <vPortFree>
				vPortFree( pxTCB );
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fee6 	bl	8005ab4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ce8:	e018      	b.n	8004d1c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d103      	bne.n	8004cfc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fedd 	bl	8005ab4 <vPortFree>
	}
 8004cfa:	e00f      	b.n	8004d1c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d00a      	beq.n	8004d1c <prvDeleteTCB+0x60>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	60fb      	str	r3, [r7, #12]
}
 8004d18:	bf00      	nop
 8004d1a:	e7fe      	b.n	8004d1a <prvDeleteTCB+0x5e>
	}
 8004d1c:	bf00      	nop
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d2a:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <prvResetNextTaskUnblockTime+0x40>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <prvResetNextTaskUnblockTime+0x14>
 8004d34:	2301      	movs	r3, #1
 8004d36:	e000      	b.n	8004d3a <prvResetNextTaskUnblockTime+0x16>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d004      	beq.n	8004d48 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d3e:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <prvResetNextTaskUnblockTime+0x44>)
 8004d40:	f04f 32ff 	mov.w	r2, #4294967295
 8004d44:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d46:	e008      	b.n	8004d5a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d48:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <prvResetNextTaskUnblockTime+0x40>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	4a04      	ldr	r2, [pc, #16]	; (8004d68 <prvResetNextTaskUnblockTime+0x44>)
 8004d58:	6013      	str	r3, [r2, #0]
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr
 8004d64:	20000d88 	.word	0x20000d88
 8004d68:	20000df0 	.word	0x20000df0

08004d6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <xTaskGetSchedulerState+0x34>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	607b      	str	r3, [r7, #4]
 8004d7e:	e008      	b.n	8004d92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d80:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <xTaskGetSchedulerState+0x38>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	607b      	str	r3, [r7, #4]
 8004d8c:	e001      	b.n	8004d92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d92:	687b      	ldr	r3, [r7, #4]
	}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000ddc 	.word	0x20000ddc
 8004da4:	20000df8 	.word	0x20000df8

08004da8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d056      	beq.n	8004e6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004dbe:	4b2e      	ldr	r3, [pc, #184]	; (8004e78 <xTaskPriorityDisinherit+0xd0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d00a      	beq.n	8004dde <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	60fb      	str	r3, [r7, #12]
}
 8004dda:	bf00      	nop
 8004ddc:	e7fe      	b.n	8004ddc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10a      	bne.n	8004dfc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	60bb      	str	r3, [r7, #8]
}
 8004df8:	bf00      	nop
 8004dfa:	e7fe      	b.n	8004dfa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e00:	1e5a      	subs	r2, r3, #1
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d02c      	beq.n	8004e6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d128      	bne.n	8004e6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fe fc12 	bl	8003648 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <xTaskPriorityDisinherit+0xd4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d903      	bls.n	8004e4c <xTaskPriorityDisinherit+0xa4>
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	4a0c      	ldr	r2, [pc, #48]	; (8004e7c <xTaskPriorityDisinherit+0xd4>)
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <xTaskPriorityDisinherit+0xd8>)
 8004e5a:	441a      	add	r2, r3
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f7fe fb95 	bl	8003592 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e6c:	697b      	ldr	r3, [r7, #20]
	}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	200008fc 	.word	0x200008fc
 8004e7c:	20000dd8 	.word	0x20000dd8
 8004e80:	20000900 	.word	0x20000900

08004e84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e8e:	4b21      	ldr	r3, [pc, #132]	; (8004f14 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e94:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe fbd4 	bl	8003648 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d10a      	bne.n	8004ebe <prvAddCurrentTaskToDelayedList+0x3a>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eae:	4b1a      	ldr	r3, [pc, #104]	; (8004f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4819      	ldr	r0, [pc, #100]	; (8004f1c <prvAddCurrentTaskToDelayedList+0x98>)
 8004eb8:	f7fe fb6b 	bl	8003592 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ebc:	e026      	b.n	8004f0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ec6:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d209      	bcs.n	8004eea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ed6:	4b12      	ldr	r3, [pc, #72]	; (8004f20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4b0f      	ldr	r3, [pc, #60]	; (8004f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	f7fe fb78 	bl	80035d8 <vListInsert>
}
 8004ee8:	e010      	b.n	8004f0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eea:	4b0e      	ldr	r3, [pc, #56]	; (8004f24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	f7fe fb6e 	bl	80035d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004efc:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d202      	bcs.n	8004f0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f06:	4a08      	ldr	r2, [pc, #32]	; (8004f28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	6013      	str	r3, [r2, #0]
}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20000dd4 	.word	0x20000dd4
 8004f18:	200008fc 	.word	0x200008fc
 8004f1c:	20000dbc 	.word	0x20000dbc
 8004f20:	20000d8c 	.word	0x20000d8c
 8004f24:	20000d88 	.word	0x20000d88
 8004f28:	20000df0 	.word	0x20000df0

08004f2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08a      	sub	sp, #40	; 0x28
 8004f30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f36:	f000 facb 	bl	80054d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f3a:	4b1c      	ldr	r3, [pc, #112]	; (8004fac <xTimerCreateTimerTask+0x80>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d021      	beq.n	8004f86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f4a:	1d3a      	adds	r2, r7, #4
 8004f4c:	f107 0108 	add.w	r1, r7, #8
 8004f50:	f107 030c 	add.w	r3, r7, #12
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fe fad7 	bl	8003508 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	9202      	str	r2, [sp, #8]
 8004f62:	9301      	str	r3, [sp, #4]
 8004f64:	2302      	movs	r3, #2
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	460a      	mov	r2, r1
 8004f6c:	4910      	ldr	r1, [pc, #64]	; (8004fb0 <xTimerCreateTimerTask+0x84>)
 8004f6e:	4811      	ldr	r0, [pc, #68]	; (8004fb4 <xTimerCreateTimerTask+0x88>)
 8004f70:	f7ff f8b6 	bl	80040e0 <xTaskCreateStatic>
 8004f74:	4603      	mov	r3, r0
 8004f76:	4a10      	ldr	r2, [pc, #64]	; (8004fb8 <xTimerCreateTimerTask+0x8c>)
 8004f78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f7a:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <xTimerCreateTimerTask+0x8c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f82:	2301      	movs	r3, #1
 8004f84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	613b      	str	r3, [r7, #16]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004fa2:	697b      	ldr	r3, [r7, #20]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20000e2c 	.word	0x20000e2c
 8004fb0:	08006894 	.word	0x08006894
 8004fb4:	080050d9 	.word	0x080050d9
 8004fb8:	20000e30 	.word	0x20000e30

08004fbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08a      	sub	sp, #40	; 0x28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <xTimerGenericCommand+0x2e>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	623b      	str	r3, [r7, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004fea:	4b1a      	ldr	r3, [pc, #104]	; (8005054 <xTimerGenericCommand+0x98>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d02a      	beq.n	8005048 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b05      	cmp	r3, #5
 8005002:	dc18      	bgt.n	8005036 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005004:	f7ff feb2 	bl	8004d6c <xTaskGetSchedulerState>
 8005008:	4603      	mov	r3, r0
 800500a:	2b02      	cmp	r3, #2
 800500c:	d109      	bne.n	8005022 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800500e:	4b11      	ldr	r3, [pc, #68]	; (8005054 <xTimerGenericCommand+0x98>)
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	f107 0110 	add.w	r1, r7, #16
 8005016:	2300      	movs	r3, #0
 8005018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800501a:	f7fe fc7f 	bl	800391c <xQueueGenericSend>
 800501e:	6278      	str	r0, [r7, #36]	; 0x24
 8005020:	e012      	b.n	8005048 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005022:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <xTimerGenericCommand+0x98>)
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	f107 0110 	add.w	r1, r7, #16
 800502a:	2300      	movs	r3, #0
 800502c:	2200      	movs	r2, #0
 800502e:	f7fe fc75 	bl	800391c <xQueueGenericSend>
 8005032:	6278      	str	r0, [r7, #36]	; 0x24
 8005034:	e008      	b.n	8005048 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005036:	4b07      	ldr	r3, [pc, #28]	; (8005054 <xTimerGenericCommand+0x98>)
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	f107 0110 	add.w	r1, r7, #16
 800503e:	2300      	movs	r3, #0
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	f7fe fd69 	bl	8003b18 <xQueueGenericSendFromISR>
 8005046:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800504a:	4618      	mov	r0, r3
 800504c:	3728      	adds	r7, #40	; 0x28
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000e2c 	.word	0x20000e2c

08005058 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af02      	add	r7, sp, #8
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005062:	4b1c      	ldr	r3, [pc, #112]	; (80050d4 <prvProcessExpiredTimer+0x7c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	3304      	adds	r3, #4
 8005070:	4618      	mov	r0, r3
 8005072:	f7fe fae9 	bl	8003648 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d122      	bne.n	80050c4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	699a      	ldr	r2, [r3, #24]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	18d1      	adds	r1, r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	6978      	ldr	r0, [r7, #20]
 800508c:	f000 f8c8 	bl	8005220 <prvInsertTimerInActiveList>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d016      	beq.n	80050c4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005096:	2300      	movs	r3, #0
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	2300      	movs	r3, #0
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	2100      	movs	r1, #0
 80050a0:	6978      	ldr	r0, [r7, #20]
 80050a2:	f7ff ff8b 	bl	8004fbc <xTimerGenericCommand>
 80050a6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10a      	bne.n	80050c4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	60fb      	str	r3, [r7, #12]
}
 80050c0:	bf00      	nop
 80050c2:	e7fe      	b.n	80050c2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	6978      	ldr	r0, [r7, #20]
 80050ca:	4798      	blx	r3
}
 80050cc:	bf00      	nop
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000e24 	.word	0x20000e24

080050d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050e0:	f107 0308 	add.w	r3, r7, #8
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f857 	bl	8005198 <prvGetNextExpireTime>
 80050ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4619      	mov	r1, r3
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 f803 	bl	80050fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80050f6:	f000 f8d5 	bl	80052a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050fa:	e7f1      	b.n	80050e0 <prvTimerTask+0x8>

080050fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005106:	f7ff fa3f 	bl	8004588 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800510a:	f107 0308 	add.w	r3, r7, #8
 800510e:	4618      	mov	r0, r3
 8005110:	f000 f866 	bl	80051e0 <prvSampleTimeNow>
 8005114:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d130      	bne.n	800517e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <prvProcessTimerOrBlockTask+0x3c>
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	429a      	cmp	r2, r3
 8005128:	d806      	bhi.n	8005138 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800512a:	f7ff fa3b 	bl	80045a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800512e:	68f9      	ldr	r1, [r7, #12]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff ff91 	bl	8005058 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005136:	e024      	b.n	8005182 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d008      	beq.n	8005150 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800513e:	4b13      	ldr	r3, [pc, #76]	; (800518c <prvProcessTimerOrBlockTask+0x90>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005150:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <prvProcessTimerOrBlockTask+0x94>)
 8005152:	6818      	ldr	r0, [r3, #0]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	4619      	mov	r1, r3
 800515e:	f7fe ff8b 	bl	8004078 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005162:	f7ff fa1f 	bl	80045a4 <xTaskResumeAll>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10a      	bne.n	8005182 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800516c:	4b09      	ldr	r3, [pc, #36]	; (8005194 <prvProcessTimerOrBlockTask+0x98>)
 800516e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	f3bf 8f6f 	isb	sy
}
 800517c:	e001      	b.n	8005182 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800517e:	f7ff fa11 	bl	80045a4 <xTaskResumeAll>
}
 8005182:	bf00      	nop
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000e28 	.word	0x20000e28
 8005190:	20000e2c 	.word	0x20000e2c
 8005194:	e000ed04 	.word	0xe000ed04

08005198 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80051a0:	4b0e      	ldr	r3, [pc, #56]	; (80051dc <prvGetNextExpireTime+0x44>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	bf0c      	ite	eq
 80051aa:	2301      	moveq	r3, #1
 80051ac:	2300      	movne	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d105      	bne.n	80051ca <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051be:	4b07      	ldr	r3, [pc, #28]	; (80051dc <prvGetNextExpireTime+0x44>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	e001      	b.n	80051ce <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80051ce:	68fb      	ldr	r3, [r7, #12]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20000e24 	.word	0x20000e24

080051e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80051e8:	f7ff fa7a 	bl	80046e0 <xTaskGetTickCount>
 80051ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80051ee:	4b0b      	ldr	r3, [pc, #44]	; (800521c <prvSampleTimeNow+0x3c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d205      	bcs.n	8005204 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80051f8:	f000 f908 	bl	800540c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	e002      	b.n	800520a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800520a:	4a04      	ldr	r2, [pc, #16]	; (800521c <prvSampleTimeNow+0x3c>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005210:	68fb      	ldr	r3, [r7, #12]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000e34 	.word	0x20000e34

08005220 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	d812      	bhi.n	800526c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	1ad2      	subs	r2, r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	429a      	cmp	r2, r3
 8005252:	d302      	bcc.n	800525a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005254:	2301      	movs	r3, #1
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e01b      	b.n	8005292 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800525a:	4b10      	ldr	r3, [pc, #64]	; (800529c <prvInsertTimerInActiveList+0x7c>)
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3304      	adds	r3, #4
 8005262:	4619      	mov	r1, r3
 8005264:	4610      	mov	r0, r2
 8005266:	f7fe f9b7 	bl	80035d8 <vListInsert>
 800526a:	e012      	b.n	8005292 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d206      	bcs.n	8005282 <prvInsertTimerInActiveList+0x62>
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d302      	bcc.n	8005282 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800527c:	2301      	movs	r3, #1
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	e007      	b.n	8005292 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005282:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <prvInsertTimerInActiveList+0x80>)
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3304      	adds	r3, #4
 800528a:	4619      	mov	r1, r3
 800528c:	4610      	mov	r0, r2
 800528e:	f7fe f9a3 	bl	80035d8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005292:	697b      	ldr	r3, [r7, #20]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20000e28 	.word	0x20000e28
 80052a0:	20000e24 	.word	0x20000e24

080052a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08e      	sub	sp, #56	; 0x38
 80052a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052aa:	e09d      	b.n	80053e8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	da18      	bge.n	80052e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80052b2:	1d3b      	adds	r3, r7, #4
 80052b4:	3304      	adds	r3, #4
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	61fb      	str	r3, [r7, #28]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052da:	6850      	ldr	r0, [r2, #4]
 80052dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052de:	6892      	ldr	r2, [r2, #8]
 80052e0:	4611      	mov	r1, r2
 80052e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	db7e      	blt.n	80053e8 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f8:	3304      	adds	r3, #4
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fe f9a4 	bl	8003648 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005300:	463b      	mov	r3, r7
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff ff6c 	bl	80051e0 <prvSampleTimeNow>
 8005308:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b09      	cmp	r3, #9
 800530e:	d86a      	bhi.n	80053e6 <prvProcessReceivedCommands+0x142>
 8005310:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <prvProcessReceivedCommands+0x74>)
 8005312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005316:	bf00      	nop
 8005318:	08005341 	.word	0x08005341
 800531c:	08005341 	.word	0x08005341
 8005320:	08005341 	.word	0x08005341
 8005324:	080053e9 	.word	0x080053e9
 8005328:	0800539d 	.word	0x0800539d
 800532c:	080053d5 	.word	0x080053d5
 8005330:	08005341 	.word	0x08005341
 8005334:	08005341 	.word	0x08005341
 8005338:	080053e9 	.word	0x080053e9
 800533c:	0800539d 	.word	0x0800539d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	18d1      	adds	r1, r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800534e:	f7ff ff67 	bl	8005220 <prvInsertTimerInActiveList>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d047      	beq.n	80053e8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800535e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d13f      	bne.n	80053e8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	441a      	add	r2, r3
 8005370:	2300      	movs	r3, #0
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	2300      	movs	r3, #0
 8005376:	2100      	movs	r1, #0
 8005378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800537a:	f7ff fe1f 	bl	8004fbc <xTimerGenericCommand>
 800537e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d130      	bne.n	80053e8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	61bb      	str	r3, [r7, #24]
}
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10a      	bne.n	80053c0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	617b      	str	r3, [r7, #20]
}
 80053bc:	bf00      	nop
 80053be:	e7fe      	b.n	80053be <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	699a      	ldr	r2, [r3, #24]
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	18d1      	adds	r1, r2, r3
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ce:	f7ff ff27 	bl	8005220 <prvInsertTimerInActiveList>
					break;
 80053d2:	e009      	b.n	80053e8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d104      	bne.n	80053e8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80053de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053e0:	f000 fb68 	bl	8005ab4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80053e4:	e000      	b.n	80053e8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80053e6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053e8:	4b07      	ldr	r3, [pc, #28]	; (8005408 <prvProcessReceivedCommands+0x164>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	1d39      	adds	r1, r7, #4
 80053ee:	2200      	movs	r2, #0
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fe fc29 	bl	8003c48 <xQueueReceive>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f47f af57 	bne.w	80052ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80053fe:	bf00      	nop
 8005400:	bf00      	nop
 8005402:	3730      	adds	r7, #48	; 0x30
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	20000e2c 	.word	0x20000e2c

0800540c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005412:	e045      	b.n	80054a0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005414:	4b2c      	ldr	r3, [pc, #176]	; (80054c8 <prvSwitchTimerLists+0xbc>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800541e:	4b2a      	ldr	r3, [pc, #168]	; (80054c8 <prvSwitchTimerLists+0xbc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3304      	adds	r3, #4
 800542c:	4618      	mov	r0, r3
 800542e:	f7fe f90b 	bl	8003648 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d12e      	bne.n	80054a0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4413      	add	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	429a      	cmp	r2, r3
 8005452:	d90e      	bls.n	8005472 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005460:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <prvSwitchTimerLists+0xbc>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3304      	adds	r3, #4
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f7fe f8b4 	bl	80035d8 <vListInsert>
 8005470:	e016      	b.n	80054a0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005472:	2300      	movs	r3, #0
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	2300      	movs	r3, #0
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	2100      	movs	r1, #0
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f7ff fd9d 	bl	8004fbc <xTimerGenericCommand>
 8005482:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10a      	bne.n	80054a0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	603b      	str	r3, [r7, #0]
}
 800549c:	bf00      	nop
 800549e:	e7fe      	b.n	800549e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054a0:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <prvSwitchTimerLists+0xbc>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1b4      	bne.n	8005414 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054aa:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <prvSwitchTimerLists+0xbc>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054b0:	4b06      	ldr	r3, [pc, #24]	; (80054cc <prvSwitchTimerLists+0xc0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a04      	ldr	r2, [pc, #16]	; (80054c8 <prvSwitchTimerLists+0xbc>)
 80054b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054b8:	4a04      	ldr	r2, [pc, #16]	; (80054cc <prvSwitchTimerLists+0xc0>)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	6013      	str	r3, [r2, #0]
}
 80054be:	bf00      	nop
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000e24 	.word	0x20000e24
 80054cc:	20000e28 	.word	0x20000e28

080054d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80054d6:	f000 f929 	bl	800572c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80054da:	4b15      	ldr	r3, [pc, #84]	; (8005530 <prvCheckForValidListAndQueue+0x60>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d120      	bne.n	8005524 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80054e2:	4814      	ldr	r0, [pc, #80]	; (8005534 <prvCheckForValidListAndQueue+0x64>)
 80054e4:	f7fe f82a 	bl	800353c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80054e8:	4813      	ldr	r0, [pc, #76]	; (8005538 <prvCheckForValidListAndQueue+0x68>)
 80054ea:	f7fe f827 	bl	800353c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80054ee:	4b13      	ldr	r3, [pc, #76]	; (800553c <prvCheckForValidListAndQueue+0x6c>)
 80054f0:	4a10      	ldr	r2, [pc, #64]	; (8005534 <prvCheckForValidListAndQueue+0x64>)
 80054f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80054f4:	4b12      	ldr	r3, [pc, #72]	; (8005540 <prvCheckForValidListAndQueue+0x70>)
 80054f6:	4a10      	ldr	r2, [pc, #64]	; (8005538 <prvCheckForValidListAndQueue+0x68>)
 80054f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80054fa:	2300      	movs	r3, #0
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	4b11      	ldr	r3, [pc, #68]	; (8005544 <prvCheckForValidListAndQueue+0x74>)
 8005500:	4a11      	ldr	r2, [pc, #68]	; (8005548 <prvCheckForValidListAndQueue+0x78>)
 8005502:	2110      	movs	r1, #16
 8005504:	200a      	movs	r0, #10
 8005506:	f7fe f931 	bl	800376c <xQueueGenericCreateStatic>
 800550a:	4603      	mov	r3, r0
 800550c:	4a08      	ldr	r2, [pc, #32]	; (8005530 <prvCheckForValidListAndQueue+0x60>)
 800550e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005510:	4b07      	ldr	r3, [pc, #28]	; (8005530 <prvCheckForValidListAndQueue+0x60>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d005      	beq.n	8005524 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <prvCheckForValidListAndQueue+0x60>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	490b      	ldr	r1, [pc, #44]	; (800554c <prvCheckForValidListAndQueue+0x7c>)
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe fd82 	bl	8004028 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005524:	f000 f932 	bl	800578c <vPortExitCritical>
}
 8005528:	bf00      	nop
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000e2c 	.word	0x20000e2c
 8005534:	20000dfc 	.word	0x20000dfc
 8005538:	20000e10 	.word	0x20000e10
 800553c:	20000e24 	.word	0x20000e24
 8005540:	20000e28 	.word	0x20000e28
 8005544:	20000ed8 	.word	0x20000ed8
 8005548:	20000e38 	.word	0x20000e38
 800554c:	0800689c 	.word	0x0800689c

08005550 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3b04      	subs	r3, #4
 8005560:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3b04      	subs	r3, #4
 800556e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f023 0201 	bic.w	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3b04      	subs	r3, #4
 800557e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005580:	4a08      	ldr	r2, [pc, #32]	; (80055a4 <pxPortInitialiseStack+0x54>)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3b14      	subs	r3, #20
 800558a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3b20      	subs	r3, #32
 8005596:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005598:	68fb      	ldr	r3, [r7, #12]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr
 80055a4:	080055a9 	.word	0x080055a9

080055a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80055ae:	2300      	movs	r3, #0
 80055b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055b2:	4b12      	ldr	r3, [pc, #72]	; (80055fc <prvTaskExitError+0x54>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ba:	d00a      	beq.n	80055d2 <prvTaskExitError+0x2a>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	60fb      	str	r3, [r7, #12]
}
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <prvTaskExitError+0x28>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	60bb      	str	r3, [r7, #8]
}
 80055e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055e6:	bf00      	nop
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0fc      	beq.n	80055e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bc80      	pop	{r7}
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	2000000c 	.word	0x2000000c

08005600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <pxCurrentTCBConst2>)
 8005602:	6819      	ldr	r1, [r3, #0]
 8005604:	6808      	ldr	r0, [r1, #0]
 8005606:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800560a:	f380 8809 	msr	PSP, r0
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f04f 0000 	mov.w	r0, #0
 8005616:	f380 8811 	msr	BASEPRI, r0
 800561a:	f04e 0e0d 	orr.w	lr, lr, #13
 800561e:	4770      	bx	lr

08005620 <pxCurrentTCBConst2>:
 8005620:	200008fc 	.word	0x200008fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop

08005628 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005628:	4806      	ldr	r0, [pc, #24]	; (8005644 <prvPortStartFirstTask+0x1c>)
 800562a:	6800      	ldr	r0, [r0, #0]
 800562c:	6800      	ldr	r0, [r0, #0]
 800562e:	f380 8808 	msr	MSP, r0
 8005632:	b662      	cpsie	i
 8005634:	b661      	cpsie	f
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	df00      	svc	0
 8005640:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005642:	bf00      	nop
 8005644:	e000ed08 	.word	0xe000ed08

08005648 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800564e:	4b32      	ldr	r3, [pc, #200]	; (8005718 <xPortStartScheduler+0xd0>)
 8005650:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	22ff      	movs	r2, #255	; 0xff
 800565e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	b2db      	uxtb	r3, r3
 8005666:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005670:	b2da      	uxtb	r2, r3
 8005672:	4b2a      	ldr	r3, [pc, #168]	; (800571c <xPortStartScheduler+0xd4>)
 8005674:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005676:	4b2a      	ldr	r3, [pc, #168]	; (8005720 <xPortStartScheduler+0xd8>)
 8005678:	2207      	movs	r2, #7
 800567a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800567c:	e009      	b.n	8005692 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800567e:	4b28      	ldr	r3, [pc, #160]	; (8005720 <xPortStartScheduler+0xd8>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3b01      	subs	r3, #1
 8005684:	4a26      	ldr	r2, [pc, #152]	; (8005720 <xPortStartScheduler+0xd8>)
 8005686:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	b2db      	uxtb	r3, r3
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	b2db      	uxtb	r3, r3
 8005690:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	2b80      	cmp	r3, #128	; 0x80
 800569c:	d0ef      	beq.n	800567e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800569e:	4b20      	ldr	r3, [pc, #128]	; (8005720 <xPortStartScheduler+0xd8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f1c3 0307 	rsb	r3, r3, #7
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d00a      	beq.n	80056c0 <xPortStartScheduler+0x78>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	60bb      	str	r3, [r7, #8]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056c0:	4b17      	ldr	r3, [pc, #92]	; (8005720 <xPortStartScheduler+0xd8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	4a16      	ldr	r2, [pc, #88]	; (8005720 <xPortStartScheduler+0xd8>)
 80056c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056ca:	4b15      	ldr	r3, [pc, #84]	; (8005720 <xPortStartScheduler+0xd8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056d2:	4a13      	ldr	r2, [pc, #76]	; (8005720 <xPortStartScheduler+0xd8>)
 80056d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056de:	4b11      	ldr	r3, [pc, #68]	; (8005724 <xPortStartScheduler+0xdc>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a10      	ldr	r2, [pc, #64]	; (8005724 <xPortStartScheduler+0xdc>)
 80056e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056ea:	4b0e      	ldr	r3, [pc, #56]	; (8005724 <xPortStartScheduler+0xdc>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a0d      	ldr	r2, [pc, #52]	; (8005724 <xPortStartScheduler+0xdc>)
 80056f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80056f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056f6:	f000 f8b9 	bl	800586c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056fa:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <xPortStartScheduler+0xe0>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005700:	f7ff ff92 	bl	8005628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005704:	f7ff f8b8 	bl	8004878 <vTaskSwitchContext>
	prvTaskExitError();
 8005708:	f7ff ff4e 	bl	80055a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	e000e400 	.word	0xe000e400
 800571c:	20000f28 	.word	0x20000f28
 8005720:	20000f2c 	.word	0x20000f2c
 8005724:	e000ed20 	.word	0xe000ed20
 8005728:	2000000c 	.word	0x2000000c

0800572c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	607b      	str	r3, [r7, #4]
}
 8005744:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005746:	4b0f      	ldr	r3, [pc, #60]	; (8005784 <vPortEnterCritical+0x58>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3301      	adds	r3, #1
 800574c:	4a0d      	ldr	r2, [pc, #52]	; (8005784 <vPortEnterCritical+0x58>)
 800574e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005750:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <vPortEnterCritical+0x58>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d10f      	bne.n	8005778 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005758:	4b0b      	ldr	r3, [pc, #44]	; (8005788 <vPortEnterCritical+0x5c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <vPortEnterCritical+0x4c>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	603b      	str	r3, [r7, #0]
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <vPortEnterCritical+0x4a>
	}
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	2000000c 	.word	0x2000000c
 8005788:	e000ed04 	.word	0xe000ed04

0800578c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005792:	4b11      	ldr	r3, [pc, #68]	; (80057d8 <vPortExitCritical+0x4c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10a      	bne.n	80057b0 <vPortExitCritical+0x24>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	607b      	str	r3, [r7, #4]
}
 80057ac:	bf00      	nop
 80057ae:	e7fe      	b.n	80057ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057b0:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <vPortExitCritical+0x4c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	4a08      	ldr	r2, [pc, #32]	; (80057d8 <vPortExitCritical+0x4c>)
 80057b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057ba:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <vPortExitCritical+0x4c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d105      	bne.n	80057ce <vPortExitCritical+0x42>
 80057c2:	2300      	movs	r3, #0
 80057c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	f383 8811 	msr	BASEPRI, r3
}
 80057cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr
 80057d8:	2000000c 	.word	0x2000000c
 80057dc:	00000000 	.word	0x00000000

080057e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057e0:	f3ef 8009 	mrs	r0, PSP
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	4b0d      	ldr	r3, [pc, #52]	; (8005820 <pxCurrentTCBConst>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80057f0:	6010      	str	r0, [r2, #0]
 80057f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80057f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80057fa:	f380 8811 	msr	BASEPRI, r0
 80057fe:	f7ff f83b 	bl	8004878 <vTaskSwitchContext>
 8005802:	f04f 0000 	mov.w	r0, #0
 8005806:	f380 8811 	msr	BASEPRI, r0
 800580a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800580e:	6819      	ldr	r1, [r3, #0]
 8005810:	6808      	ldr	r0, [r1, #0]
 8005812:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005816:	f380 8809 	msr	PSP, r0
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	4770      	bx	lr

08005820 <pxCurrentTCBConst>:
 8005820:	200008fc 	.word	0x200008fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005824:	bf00      	nop
 8005826:	bf00      	nop

08005828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	607b      	str	r3, [r7, #4]
}
 8005840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005842:	f7fe ff5b 	bl	80046fc <xTaskIncrementTick>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800584c:	4b06      	ldr	r3, [pc, #24]	; (8005868 <SysTick_Handler+0x40>)
 800584e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	2300      	movs	r3, #0
 8005856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f383 8811 	msr	BASEPRI, r3
}
 800585e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	e000ed04 	.word	0xe000ed04

0800586c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005870:	4b0a      	ldr	r3, [pc, #40]	; (800589c <vPortSetupTimerInterrupt+0x30>)
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005876:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <vPortSetupTimerInterrupt+0x34>)
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800587c:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <vPortSetupTimerInterrupt+0x38>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a09      	ldr	r2, [pc, #36]	; (80058a8 <vPortSetupTimerInterrupt+0x3c>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	099b      	lsrs	r3, r3, #6
 8005888:	4a08      	ldr	r2, [pc, #32]	; (80058ac <vPortSetupTimerInterrupt+0x40>)
 800588a:	3b01      	subs	r3, #1
 800588c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800588e:	4b03      	ldr	r3, [pc, #12]	; (800589c <vPortSetupTimerInterrupt+0x30>)
 8005890:	2207      	movs	r2, #7
 8005892:	601a      	str	r2, [r3, #0]
}
 8005894:	bf00      	nop
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr
 800589c:	e000e010 	.word	0xe000e010
 80058a0:	e000e018 	.word	0xe000e018
 80058a4:	20000000 	.word	0x20000000
 80058a8:	10624dd3 	.word	0x10624dd3
 80058ac:	e000e014 	.word	0xe000e014

080058b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80058b6:	f3ef 8305 	mrs	r3, IPSR
 80058ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b0f      	cmp	r3, #15
 80058c0:	d914      	bls.n	80058ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80058c2:	4a16      	ldr	r2, [pc, #88]	; (800591c <vPortValidateInterruptPriority+0x6c>)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058cc:	4b14      	ldr	r3, [pc, #80]	; (8005920 <vPortValidateInterruptPriority+0x70>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	7afa      	ldrb	r2, [r7, #11]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d20a      	bcs.n	80058ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	607b      	str	r3, [r7, #4]
}
 80058e8:	bf00      	nop
 80058ea:	e7fe      	b.n	80058ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80058ec:	4b0d      	ldr	r3, [pc, #52]	; (8005924 <vPortValidateInterruptPriority+0x74>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058f4:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <vPortValidateInterruptPriority+0x78>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d90a      	bls.n	8005912 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	603b      	str	r3, [r7, #0]
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <vPortValidateInterruptPriority+0x60>
	}
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr
 800591c:	e000e3f0 	.word	0xe000e3f0
 8005920:	20000f28 	.word	0x20000f28
 8005924:	e000ed0c 	.word	0xe000ed0c
 8005928:	20000f2c 	.word	0x20000f2c

0800592c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b08a      	sub	sp, #40	; 0x28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005934:	2300      	movs	r3, #0
 8005936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005938:	f7fe fe26 	bl	8004588 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800593c:	4b58      	ldr	r3, [pc, #352]	; (8005aa0 <pvPortMalloc+0x174>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005944:	f000 f910 	bl	8005b68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005948:	4b56      	ldr	r3, [pc, #344]	; (8005aa4 <pvPortMalloc+0x178>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4013      	ands	r3, r2
 8005950:	2b00      	cmp	r3, #0
 8005952:	f040 808e 	bne.w	8005a72 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01d      	beq.n	8005998 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800595c:	2208      	movs	r2, #8
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4413      	add	r3, r2
 8005962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	2b00      	cmp	r3, #0
 800596c:	d014      	beq.n	8005998 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f023 0307 	bic.w	r3, r3, #7
 8005974:	3308      	adds	r3, #8
 8005976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <pvPortMalloc+0x6c>
	__asm volatile
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	617b      	str	r3, [r7, #20]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d069      	beq.n	8005a72 <pvPortMalloc+0x146>
 800599e:	4b42      	ldr	r3, [pc, #264]	; (8005aa8 <pvPortMalloc+0x17c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d864      	bhi.n	8005a72 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059a8:	4b40      	ldr	r3, [pc, #256]	; (8005aac <pvPortMalloc+0x180>)
 80059aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059ac:	4b3f      	ldr	r3, [pc, #252]	; (8005aac <pvPortMalloc+0x180>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059b2:	e004      	b.n	80059be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d903      	bls.n	80059d0 <pvPortMalloc+0xa4>
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f1      	bne.n	80059b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059d0:	4b33      	ldr	r3, [pc, #204]	; (8005aa0 <pvPortMalloc+0x174>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d04b      	beq.n	8005a72 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2208      	movs	r2, #8
 80059e0:	4413      	add	r3, r2
 80059e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	1ad2      	subs	r2, r2, r3
 80059f4:	2308      	movs	r3, #8
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d91f      	bls.n	8005a3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4413      	add	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <pvPortMalloc+0xf8>
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	613b      	str	r3, [r7, #16]
}
 8005a20:	bf00      	nop
 8005a22:	e7fe      	b.n	8005a22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	1ad2      	subs	r2, r2, r3
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a36:	69b8      	ldr	r0, [r7, #24]
 8005a38:	f000 f8f8 	bl	8005c2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a3c:	4b1a      	ldr	r3, [pc, #104]	; (8005aa8 <pvPortMalloc+0x17c>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	4a18      	ldr	r2, [pc, #96]	; (8005aa8 <pvPortMalloc+0x17c>)
 8005a48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a4a:	4b17      	ldr	r3, [pc, #92]	; (8005aa8 <pvPortMalloc+0x17c>)
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	4b18      	ldr	r3, [pc, #96]	; (8005ab0 <pvPortMalloc+0x184>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d203      	bcs.n	8005a5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a56:	4b14      	ldr	r3, [pc, #80]	; (8005aa8 <pvPortMalloc+0x17c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <pvPortMalloc+0x184>)
 8005a5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	4b10      	ldr	r3, [pc, #64]	; (8005aa4 <pvPortMalloc+0x178>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a72:	f7fe fd97 	bl	80045a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <pvPortMalloc+0x16a>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	60fb      	str	r3, [r7, #12]
}
 8005a92:	bf00      	nop
 8005a94:	e7fe      	b.n	8005a94 <pvPortMalloc+0x168>
	return pvReturn;
 8005a96:	69fb      	ldr	r3, [r7, #28]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3728      	adds	r7, #40	; 0x28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	20001b38 	.word	0x20001b38
 8005aa4:	20001b44 	.word	0x20001b44
 8005aa8:	20001b3c 	.word	0x20001b3c
 8005aac:	20001b30 	.word	0x20001b30
 8005ab0:	20001b40 	.word	0x20001b40

08005ab4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d048      	beq.n	8005b58 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	425b      	negs	r3, r3
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4413      	add	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	4b21      	ldr	r3, [pc, #132]	; (8005b60 <vPortFree+0xac>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4013      	ands	r3, r2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <vPortFree+0x44>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	60fb      	str	r3, [r7, #12]
}
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <vPortFree+0x62>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	60bb      	str	r3, [r7, #8]
}
 8005b12:	bf00      	nop
 8005b14:	e7fe      	b.n	8005b14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	4b11      	ldr	r3, [pc, #68]	; (8005b60 <vPortFree+0xac>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d019      	beq.n	8005b58 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d115      	bne.n	8005b58 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <vPortFree+0xac>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	43db      	mvns	r3, r3
 8005b36:	401a      	ands	r2, r3
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b3c:	f7fe fd24 	bl	8004588 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	4b07      	ldr	r3, [pc, #28]	; (8005b64 <vPortFree+0xb0>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4413      	add	r3, r2
 8005b4a:	4a06      	ldr	r2, [pc, #24]	; (8005b64 <vPortFree+0xb0>)
 8005b4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b4e:	6938      	ldr	r0, [r7, #16]
 8005b50:	f000 f86c 	bl	8005c2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005b54:	f7fe fd26 	bl	80045a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b58:	bf00      	nop
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	20001b44 	.word	0x20001b44
 8005b64:	20001b3c 	.word	0x20001b3c

08005b68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005b72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b74:	4b27      	ldr	r3, [pc, #156]	; (8005c14 <prvHeapInit+0xac>)
 8005b76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00c      	beq.n	8005b9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3307      	adds	r3, #7
 8005b86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0307 	bic.w	r3, r3, #7
 8005b8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	4a1f      	ldr	r2, [pc, #124]	; (8005c14 <prvHeapInit+0xac>)
 8005b98:	4413      	add	r3, r2
 8005b9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ba0:	4a1d      	ldr	r2, [pc, #116]	; (8005c18 <prvHeapInit+0xb0>)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ba6:	4b1c      	ldr	r3, [pc, #112]	; (8005c18 <prvHeapInit+0xb0>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005bb4:	2208      	movs	r2, #8
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	1a9b      	subs	r3, r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0307 	bic.w	r3, r3, #7
 8005bc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4a15      	ldr	r2, [pc, #84]	; (8005c1c <prvHeapInit+0xb4>)
 8005bc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005bca:	4b14      	ldr	r3, [pc, #80]	; (8005c1c <prvHeapInit+0xb4>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bd2:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <prvHeapInit+0xb4>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	1ad2      	subs	r2, r2, r3
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005be8:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <prvHeapInit+0xb4>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	4a0a      	ldr	r2, [pc, #40]	; (8005c20 <prvHeapInit+0xb8>)
 8005bf6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	4a09      	ldr	r2, [pc, #36]	; (8005c24 <prvHeapInit+0xbc>)
 8005bfe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c00:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <prvHeapInit+0xc0>)
 8005c02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c06:	601a      	str	r2, [r3, #0]
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20000f30 	.word	0x20000f30
 8005c18:	20001b30 	.word	0x20001b30
 8005c1c:	20001b38 	.word	0x20001b38
 8005c20:	20001b40 	.word	0x20001b40
 8005c24:	20001b3c 	.word	0x20001b3c
 8005c28:	20001b44 	.word	0x20001b44

08005c2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c34:	4b27      	ldr	r3, [pc, #156]	; (8005cd4 <prvInsertBlockIntoFreeList+0xa8>)
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	e002      	b.n	8005c40 <prvInsertBlockIntoFreeList+0x14>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d8f7      	bhi.n	8005c3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	4413      	add	r3, r2
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d108      	bne.n	8005c6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	441a      	add	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	441a      	add	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d118      	bne.n	8005cb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4b14      	ldr	r3, [pc, #80]	; (8005cd8 <prvInsertBlockIntoFreeList+0xac>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d00d      	beq.n	8005caa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	441a      	add	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	e008      	b.n	8005cbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <prvInsertBlockIntoFreeList+0xac>)
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	e003      	b.n	8005cbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d002      	beq.n	8005cca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr
 8005cd4:	20001b30 	.word	0x20001b30
 8005cd8:	20001b38 	.word	0x20001b38

08005cdc <atoi>:
 8005cdc:	220a      	movs	r2, #10
 8005cde:	2100      	movs	r1, #0
 8005ce0:	f000 b87e 	b.w	8005de0 <strtol>

08005ce4 <_strtol_l.constprop.0>:
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cea:	4686      	mov	lr, r0
 8005cec:	4690      	mov	r8, r2
 8005cee:	d001      	beq.n	8005cf4 <_strtol_l.constprop.0+0x10>
 8005cf0:	2b24      	cmp	r3, #36	; 0x24
 8005cf2:	d906      	bls.n	8005d02 <_strtol_l.constprop.0+0x1e>
 8005cf4:	f000 f8fc 	bl	8005ef0 <__errno>
 8005cf8:	2316      	movs	r3, #22
 8005cfa:	6003      	str	r3, [r0, #0]
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d02:	460d      	mov	r5, r1
 8005d04:	4835      	ldr	r0, [pc, #212]	; (8005ddc <_strtol_l.constprop.0+0xf8>)
 8005d06:	462a      	mov	r2, r5
 8005d08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d0c:	5d06      	ldrb	r6, [r0, r4]
 8005d0e:	f016 0608 	ands.w	r6, r6, #8
 8005d12:	d1f8      	bne.n	8005d06 <_strtol_l.constprop.0+0x22>
 8005d14:	2c2d      	cmp	r4, #45	; 0x2d
 8005d16:	d12e      	bne.n	8005d76 <_strtol_l.constprop.0+0x92>
 8005d18:	2601      	movs	r6, #1
 8005d1a:	782c      	ldrb	r4, [r5, #0]
 8005d1c:	1c95      	adds	r5, r2, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d057      	beq.n	8005dd2 <_strtol_l.constprop.0+0xee>
 8005d22:	2b10      	cmp	r3, #16
 8005d24:	d109      	bne.n	8005d3a <_strtol_l.constprop.0+0x56>
 8005d26:	2c30      	cmp	r4, #48	; 0x30
 8005d28:	d107      	bne.n	8005d3a <_strtol_l.constprop.0+0x56>
 8005d2a:	782a      	ldrb	r2, [r5, #0]
 8005d2c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005d30:	2a58      	cmp	r2, #88	; 0x58
 8005d32:	d149      	bne.n	8005dc8 <_strtol_l.constprop.0+0xe4>
 8005d34:	2310      	movs	r3, #16
 8005d36:	786c      	ldrb	r4, [r5, #1]
 8005d38:	3502      	adds	r5, #2
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8005d40:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005d44:	fbbc f9f3 	udiv	r9, ip, r3
 8005d48:	4610      	mov	r0, r2
 8005d4a:	fb03 ca19 	mls	sl, r3, r9, ip
 8005d4e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005d52:	2f09      	cmp	r7, #9
 8005d54:	d814      	bhi.n	8005d80 <_strtol_l.constprop.0+0x9c>
 8005d56:	463c      	mov	r4, r7
 8005d58:	42a3      	cmp	r3, r4
 8005d5a:	dd20      	ble.n	8005d9e <_strtol_l.constprop.0+0xba>
 8005d5c:	1c57      	adds	r7, r2, #1
 8005d5e:	d007      	beq.n	8005d70 <_strtol_l.constprop.0+0x8c>
 8005d60:	4581      	cmp	r9, r0
 8005d62:	d319      	bcc.n	8005d98 <_strtol_l.constprop.0+0xb4>
 8005d64:	d101      	bne.n	8005d6a <_strtol_l.constprop.0+0x86>
 8005d66:	45a2      	cmp	sl, r4
 8005d68:	db16      	blt.n	8005d98 <_strtol_l.constprop.0+0xb4>
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	fb00 4003 	mla	r0, r0, r3, r4
 8005d70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d74:	e7eb      	b.n	8005d4e <_strtol_l.constprop.0+0x6a>
 8005d76:	2c2b      	cmp	r4, #43	; 0x2b
 8005d78:	bf04      	itt	eq
 8005d7a:	782c      	ldrbeq	r4, [r5, #0]
 8005d7c:	1c95      	addeq	r5, r2, #2
 8005d7e:	e7ce      	b.n	8005d1e <_strtol_l.constprop.0+0x3a>
 8005d80:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005d84:	2f19      	cmp	r7, #25
 8005d86:	d801      	bhi.n	8005d8c <_strtol_l.constprop.0+0xa8>
 8005d88:	3c37      	subs	r4, #55	; 0x37
 8005d8a:	e7e5      	b.n	8005d58 <_strtol_l.constprop.0+0x74>
 8005d8c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005d90:	2f19      	cmp	r7, #25
 8005d92:	d804      	bhi.n	8005d9e <_strtol_l.constprop.0+0xba>
 8005d94:	3c57      	subs	r4, #87	; 0x57
 8005d96:	e7df      	b.n	8005d58 <_strtol_l.constprop.0+0x74>
 8005d98:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9c:	e7e8      	b.n	8005d70 <_strtol_l.constprop.0+0x8c>
 8005d9e:	1c53      	adds	r3, r2, #1
 8005da0:	d108      	bne.n	8005db4 <_strtol_l.constprop.0+0xd0>
 8005da2:	2322      	movs	r3, #34	; 0x22
 8005da4:	4660      	mov	r0, ip
 8005da6:	f8ce 3000 	str.w	r3, [lr]
 8005daa:	f1b8 0f00 	cmp.w	r8, #0
 8005dae:	d0a6      	beq.n	8005cfe <_strtol_l.constprop.0+0x1a>
 8005db0:	1e69      	subs	r1, r5, #1
 8005db2:	e006      	b.n	8005dc2 <_strtol_l.constprop.0+0xde>
 8005db4:	b106      	cbz	r6, 8005db8 <_strtol_l.constprop.0+0xd4>
 8005db6:	4240      	negs	r0, r0
 8005db8:	f1b8 0f00 	cmp.w	r8, #0
 8005dbc:	d09f      	beq.n	8005cfe <_strtol_l.constprop.0+0x1a>
 8005dbe:	2a00      	cmp	r2, #0
 8005dc0:	d1f6      	bne.n	8005db0 <_strtol_l.constprop.0+0xcc>
 8005dc2:	f8c8 1000 	str.w	r1, [r8]
 8005dc6:	e79a      	b.n	8005cfe <_strtol_l.constprop.0+0x1a>
 8005dc8:	2430      	movs	r4, #48	; 0x30
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1b5      	bne.n	8005d3a <_strtol_l.constprop.0+0x56>
 8005dce:	2308      	movs	r3, #8
 8005dd0:	e7b3      	b.n	8005d3a <_strtol_l.constprop.0+0x56>
 8005dd2:	2c30      	cmp	r4, #48	; 0x30
 8005dd4:	d0a9      	beq.n	8005d2a <_strtol_l.constprop.0+0x46>
 8005dd6:	230a      	movs	r3, #10
 8005dd8:	e7af      	b.n	8005d3a <_strtol_l.constprop.0+0x56>
 8005dda:	bf00      	nop
 8005ddc:	080068f3 	.word	0x080068f3

08005de0 <strtol>:
 8005de0:	4613      	mov	r3, r2
 8005de2:	460a      	mov	r2, r1
 8005de4:	4601      	mov	r1, r0
 8005de6:	4802      	ldr	r0, [pc, #8]	; (8005df0 <strtol+0x10>)
 8005de8:	6800      	ldr	r0, [r0, #0]
 8005dea:	f7ff bf7b 	b.w	8005ce4 <_strtol_l.constprop.0>
 8005dee:	bf00      	nop
 8005df0:	2000005c 	.word	0x2000005c

08005df4 <siprintf>:
 8005df4:	b40e      	push	{r1, r2, r3}
 8005df6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dfa:	b500      	push	{lr}
 8005dfc:	b09c      	sub	sp, #112	; 0x70
 8005dfe:	ab1d      	add	r3, sp, #116	; 0x74
 8005e00:	9002      	str	r0, [sp, #8]
 8005e02:	9006      	str	r0, [sp, #24]
 8005e04:	9107      	str	r1, [sp, #28]
 8005e06:	9104      	str	r1, [sp, #16]
 8005e08:	4808      	ldr	r0, [pc, #32]	; (8005e2c <siprintf+0x38>)
 8005e0a:	4909      	ldr	r1, [pc, #36]	; (8005e30 <siprintf+0x3c>)
 8005e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e10:	9105      	str	r1, [sp, #20]
 8005e12:	6800      	ldr	r0, [r0, #0]
 8005e14:	a902      	add	r1, sp, #8
 8005e16:	9301      	str	r3, [sp, #4]
 8005e18:	f000 f9f2 	bl	8006200 <_svfiprintf_r>
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	9b02      	ldr	r3, [sp, #8]
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	b01c      	add	sp, #112	; 0x70
 8005e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e28:	b003      	add	sp, #12
 8005e2a:	4770      	bx	lr
 8005e2c:	2000005c 	.word	0x2000005c
 8005e30:	ffff0208 	.word	0xffff0208

08005e34 <memset>:
 8005e34:	4603      	mov	r3, r0
 8005e36:	4402      	add	r2, r0
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d100      	bne.n	8005e3e <memset+0xa>
 8005e3c:	4770      	bx	lr
 8005e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e42:	e7f9      	b.n	8005e38 <memset+0x4>

08005e44 <_reclaim_reent>:
 8005e44:	4b29      	ldr	r3, [pc, #164]	; (8005eec <_reclaim_reent+0xa8>)
 8005e46:	b570      	push	{r4, r5, r6, lr}
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	4283      	cmp	r3, r0
 8005e4e:	d04b      	beq.n	8005ee8 <_reclaim_reent+0xa4>
 8005e50:	69c3      	ldr	r3, [r0, #28]
 8005e52:	b143      	cbz	r3, 8005e66 <_reclaim_reent+0x22>
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d144      	bne.n	8005ee4 <_reclaim_reent+0xa0>
 8005e5a:	69e3      	ldr	r3, [r4, #28]
 8005e5c:	6819      	ldr	r1, [r3, #0]
 8005e5e:	b111      	cbz	r1, 8005e66 <_reclaim_reent+0x22>
 8005e60:	4620      	mov	r0, r4
 8005e62:	f000 f87f 	bl	8005f64 <_free_r>
 8005e66:	6961      	ldr	r1, [r4, #20]
 8005e68:	b111      	cbz	r1, 8005e70 <_reclaim_reent+0x2c>
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f000 f87a 	bl	8005f64 <_free_r>
 8005e70:	69e1      	ldr	r1, [r4, #28]
 8005e72:	b111      	cbz	r1, 8005e7a <_reclaim_reent+0x36>
 8005e74:	4620      	mov	r0, r4
 8005e76:	f000 f875 	bl	8005f64 <_free_r>
 8005e7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005e7c:	b111      	cbz	r1, 8005e84 <_reclaim_reent+0x40>
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f000 f870 	bl	8005f64 <_free_r>
 8005e84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e86:	b111      	cbz	r1, 8005e8e <_reclaim_reent+0x4a>
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f000 f86b 	bl	8005f64 <_free_r>
 8005e8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005e90:	b111      	cbz	r1, 8005e98 <_reclaim_reent+0x54>
 8005e92:	4620      	mov	r0, r4
 8005e94:	f000 f866 	bl	8005f64 <_free_r>
 8005e98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005e9a:	b111      	cbz	r1, 8005ea2 <_reclaim_reent+0x5e>
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f000 f861 	bl	8005f64 <_free_r>
 8005ea2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005ea4:	b111      	cbz	r1, 8005eac <_reclaim_reent+0x68>
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f000 f85c 	bl	8005f64 <_free_r>
 8005eac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005eae:	b111      	cbz	r1, 8005eb6 <_reclaim_reent+0x72>
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f000 f857 	bl	8005f64 <_free_r>
 8005eb6:	6a23      	ldr	r3, [r4, #32]
 8005eb8:	b1b3      	cbz	r3, 8005ee8 <_reclaim_reent+0xa4>
 8005eba:	4620      	mov	r0, r4
 8005ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ec0:	4718      	bx	r3
 8005ec2:	5949      	ldr	r1, [r1, r5]
 8005ec4:	b941      	cbnz	r1, 8005ed8 <_reclaim_reent+0x94>
 8005ec6:	3504      	adds	r5, #4
 8005ec8:	69e3      	ldr	r3, [r4, #28]
 8005eca:	2d80      	cmp	r5, #128	; 0x80
 8005ecc:	68d9      	ldr	r1, [r3, #12]
 8005ece:	d1f8      	bne.n	8005ec2 <_reclaim_reent+0x7e>
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f000 f847 	bl	8005f64 <_free_r>
 8005ed6:	e7c0      	b.n	8005e5a <_reclaim_reent+0x16>
 8005ed8:	680e      	ldr	r6, [r1, #0]
 8005eda:	4620      	mov	r0, r4
 8005edc:	f000 f842 	bl	8005f64 <_free_r>
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	e7ef      	b.n	8005ec4 <_reclaim_reent+0x80>
 8005ee4:	2500      	movs	r5, #0
 8005ee6:	e7ef      	b.n	8005ec8 <_reclaim_reent+0x84>
 8005ee8:	bd70      	pop	{r4, r5, r6, pc}
 8005eea:	bf00      	nop
 8005eec:	2000005c 	.word	0x2000005c

08005ef0 <__errno>:
 8005ef0:	4b01      	ldr	r3, [pc, #4]	; (8005ef8 <__errno+0x8>)
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	2000005c 	.word	0x2000005c

08005efc <__libc_init_array>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	2600      	movs	r6, #0
 8005f00:	4d0c      	ldr	r5, [pc, #48]	; (8005f34 <__libc_init_array+0x38>)
 8005f02:	4c0d      	ldr	r4, [pc, #52]	; (8005f38 <__libc_init_array+0x3c>)
 8005f04:	1b64      	subs	r4, r4, r5
 8005f06:	10a4      	asrs	r4, r4, #2
 8005f08:	42a6      	cmp	r6, r4
 8005f0a:	d109      	bne.n	8005f20 <__libc_init_array+0x24>
 8005f0c:	f000 fc7a 	bl	8006804 <_init>
 8005f10:	2600      	movs	r6, #0
 8005f12:	4d0a      	ldr	r5, [pc, #40]	; (8005f3c <__libc_init_array+0x40>)
 8005f14:	4c0a      	ldr	r4, [pc, #40]	; (8005f40 <__libc_init_array+0x44>)
 8005f16:	1b64      	subs	r4, r4, r5
 8005f18:	10a4      	asrs	r4, r4, #2
 8005f1a:	42a6      	cmp	r6, r4
 8005f1c:	d105      	bne.n	8005f2a <__libc_init_array+0x2e>
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
 8005f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f24:	4798      	blx	r3
 8005f26:	3601      	adds	r6, #1
 8005f28:	e7ee      	b.n	8005f08 <__libc_init_array+0xc>
 8005f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f2e:	4798      	blx	r3
 8005f30:	3601      	adds	r6, #1
 8005f32:	e7f2      	b.n	8005f1a <__libc_init_array+0x1e>
 8005f34:	08006a28 	.word	0x08006a28
 8005f38:	08006a28 	.word	0x08006a28
 8005f3c:	08006a28 	.word	0x08006a28
 8005f40:	08006a2c 	.word	0x08006a2c

08005f44 <__retarget_lock_acquire_recursive>:
 8005f44:	4770      	bx	lr

08005f46 <__retarget_lock_release_recursive>:
 8005f46:	4770      	bx	lr

08005f48 <memcpy>:
 8005f48:	440a      	add	r2, r1
 8005f4a:	4291      	cmp	r1, r2
 8005f4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f50:	d100      	bne.n	8005f54 <memcpy+0xc>
 8005f52:	4770      	bx	lr
 8005f54:	b510      	push	{r4, lr}
 8005f56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f5a:	4291      	cmp	r1, r2
 8005f5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f60:	d1f9      	bne.n	8005f56 <memcpy+0xe>
 8005f62:	bd10      	pop	{r4, pc}

08005f64 <_free_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4605      	mov	r5, r0
 8005f68:	2900      	cmp	r1, #0
 8005f6a:	d040      	beq.n	8005fee <_free_r+0x8a>
 8005f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f70:	1f0c      	subs	r4, r1, #4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	bfb8      	it	lt
 8005f76:	18e4      	addlt	r4, r4, r3
 8005f78:	f000 f8dc 	bl	8006134 <__malloc_lock>
 8005f7c:	4a1c      	ldr	r2, [pc, #112]	; (8005ff0 <_free_r+0x8c>)
 8005f7e:	6813      	ldr	r3, [r2, #0]
 8005f80:	b933      	cbnz	r3, 8005f90 <_free_r+0x2c>
 8005f82:	6063      	str	r3, [r4, #4]
 8005f84:	6014      	str	r4, [r2, #0]
 8005f86:	4628      	mov	r0, r5
 8005f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f8c:	f000 b8d8 	b.w	8006140 <__malloc_unlock>
 8005f90:	42a3      	cmp	r3, r4
 8005f92:	d908      	bls.n	8005fa6 <_free_r+0x42>
 8005f94:	6820      	ldr	r0, [r4, #0]
 8005f96:	1821      	adds	r1, r4, r0
 8005f98:	428b      	cmp	r3, r1
 8005f9a:	bf01      	itttt	eq
 8005f9c:	6819      	ldreq	r1, [r3, #0]
 8005f9e:	685b      	ldreq	r3, [r3, #4]
 8005fa0:	1809      	addeq	r1, r1, r0
 8005fa2:	6021      	streq	r1, [r4, #0]
 8005fa4:	e7ed      	b.n	8005f82 <_free_r+0x1e>
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	b10b      	cbz	r3, 8005fb0 <_free_r+0x4c>
 8005fac:	42a3      	cmp	r3, r4
 8005fae:	d9fa      	bls.n	8005fa6 <_free_r+0x42>
 8005fb0:	6811      	ldr	r1, [r2, #0]
 8005fb2:	1850      	adds	r0, r2, r1
 8005fb4:	42a0      	cmp	r0, r4
 8005fb6:	d10b      	bne.n	8005fd0 <_free_r+0x6c>
 8005fb8:	6820      	ldr	r0, [r4, #0]
 8005fba:	4401      	add	r1, r0
 8005fbc:	1850      	adds	r0, r2, r1
 8005fbe:	4283      	cmp	r3, r0
 8005fc0:	6011      	str	r1, [r2, #0]
 8005fc2:	d1e0      	bne.n	8005f86 <_free_r+0x22>
 8005fc4:	6818      	ldr	r0, [r3, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	4408      	add	r0, r1
 8005fca:	6010      	str	r0, [r2, #0]
 8005fcc:	6053      	str	r3, [r2, #4]
 8005fce:	e7da      	b.n	8005f86 <_free_r+0x22>
 8005fd0:	d902      	bls.n	8005fd8 <_free_r+0x74>
 8005fd2:	230c      	movs	r3, #12
 8005fd4:	602b      	str	r3, [r5, #0]
 8005fd6:	e7d6      	b.n	8005f86 <_free_r+0x22>
 8005fd8:	6820      	ldr	r0, [r4, #0]
 8005fda:	1821      	adds	r1, r4, r0
 8005fdc:	428b      	cmp	r3, r1
 8005fde:	bf01      	itttt	eq
 8005fe0:	6819      	ldreq	r1, [r3, #0]
 8005fe2:	685b      	ldreq	r3, [r3, #4]
 8005fe4:	1809      	addeq	r1, r1, r0
 8005fe6:	6021      	streq	r1, [r4, #0]
 8005fe8:	6063      	str	r3, [r4, #4]
 8005fea:	6054      	str	r4, [r2, #4]
 8005fec:	e7cb      	b.n	8005f86 <_free_r+0x22>
 8005fee:	bd38      	pop	{r3, r4, r5, pc}
 8005ff0:	20001c88 	.word	0x20001c88

08005ff4 <sbrk_aligned>:
 8005ff4:	b570      	push	{r4, r5, r6, lr}
 8005ff6:	4e0e      	ldr	r6, [pc, #56]	; (8006030 <sbrk_aligned+0x3c>)
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	6831      	ldr	r1, [r6, #0]
 8005ffc:	4605      	mov	r5, r0
 8005ffe:	b911      	cbnz	r1, 8006006 <sbrk_aligned+0x12>
 8006000:	f000 fbaa 	bl	8006758 <_sbrk_r>
 8006004:	6030      	str	r0, [r6, #0]
 8006006:	4621      	mov	r1, r4
 8006008:	4628      	mov	r0, r5
 800600a:	f000 fba5 	bl	8006758 <_sbrk_r>
 800600e:	1c43      	adds	r3, r0, #1
 8006010:	d00a      	beq.n	8006028 <sbrk_aligned+0x34>
 8006012:	1cc4      	adds	r4, r0, #3
 8006014:	f024 0403 	bic.w	r4, r4, #3
 8006018:	42a0      	cmp	r0, r4
 800601a:	d007      	beq.n	800602c <sbrk_aligned+0x38>
 800601c:	1a21      	subs	r1, r4, r0
 800601e:	4628      	mov	r0, r5
 8006020:	f000 fb9a 	bl	8006758 <_sbrk_r>
 8006024:	3001      	adds	r0, #1
 8006026:	d101      	bne.n	800602c <sbrk_aligned+0x38>
 8006028:	f04f 34ff 	mov.w	r4, #4294967295
 800602c:	4620      	mov	r0, r4
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	20001c8c 	.word	0x20001c8c

08006034 <_malloc_r>:
 8006034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006038:	1ccd      	adds	r5, r1, #3
 800603a:	f025 0503 	bic.w	r5, r5, #3
 800603e:	3508      	adds	r5, #8
 8006040:	2d0c      	cmp	r5, #12
 8006042:	bf38      	it	cc
 8006044:	250c      	movcc	r5, #12
 8006046:	2d00      	cmp	r5, #0
 8006048:	4607      	mov	r7, r0
 800604a:	db01      	blt.n	8006050 <_malloc_r+0x1c>
 800604c:	42a9      	cmp	r1, r5
 800604e:	d905      	bls.n	800605c <_malloc_r+0x28>
 8006050:	230c      	movs	r3, #12
 8006052:	2600      	movs	r6, #0
 8006054:	603b      	str	r3, [r7, #0]
 8006056:	4630      	mov	r0, r6
 8006058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800605c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006130 <_malloc_r+0xfc>
 8006060:	f000 f868 	bl	8006134 <__malloc_lock>
 8006064:	f8d8 3000 	ldr.w	r3, [r8]
 8006068:	461c      	mov	r4, r3
 800606a:	bb5c      	cbnz	r4, 80060c4 <_malloc_r+0x90>
 800606c:	4629      	mov	r1, r5
 800606e:	4638      	mov	r0, r7
 8006070:	f7ff ffc0 	bl	8005ff4 <sbrk_aligned>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	4604      	mov	r4, r0
 8006078:	d155      	bne.n	8006126 <_malloc_r+0xf2>
 800607a:	f8d8 4000 	ldr.w	r4, [r8]
 800607e:	4626      	mov	r6, r4
 8006080:	2e00      	cmp	r6, #0
 8006082:	d145      	bne.n	8006110 <_malloc_r+0xdc>
 8006084:	2c00      	cmp	r4, #0
 8006086:	d048      	beq.n	800611a <_malloc_r+0xe6>
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	4631      	mov	r1, r6
 800608c:	4638      	mov	r0, r7
 800608e:	eb04 0903 	add.w	r9, r4, r3
 8006092:	f000 fb61 	bl	8006758 <_sbrk_r>
 8006096:	4581      	cmp	r9, r0
 8006098:	d13f      	bne.n	800611a <_malloc_r+0xe6>
 800609a:	6821      	ldr	r1, [r4, #0]
 800609c:	4638      	mov	r0, r7
 800609e:	1a6d      	subs	r5, r5, r1
 80060a0:	4629      	mov	r1, r5
 80060a2:	f7ff ffa7 	bl	8005ff4 <sbrk_aligned>
 80060a6:	3001      	adds	r0, #1
 80060a8:	d037      	beq.n	800611a <_malloc_r+0xe6>
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	442b      	add	r3, r5
 80060ae:	6023      	str	r3, [r4, #0]
 80060b0:	f8d8 3000 	ldr.w	r3, [r8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d038      	beq.n	800612a <_malloc_r+0xf6>
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	42a2      	cmp	r2, r4
 80060bc:	d12b      	bne.n	8006116 <_malloc_r+0xe2>
 80060be:	2200      	movs	r2, #0
 80060c0:	605a      	str	r2, [r3, #4]
 80060c2:	e00f      	b.n	80060e4 <_malloc_r+0xb0>
 80060c4:	6822      	ldr	r2, [r4, #0]
 80060c6:	1b52      	subs	r2, r2, r5
 80060c8:	d41f      	bmi.n	800610a <_malloc_r+0xd6>
 80060ca:	2a0b      	cmp	r2, #11
 80060cc:	d917      	bls.n	80060fe <_malloc_r+0xca>
 80060ce:	1961      	adds	r1, r4, r5
 80060d0:	42a3      	cmp	r3, r4
 80060d2:	6025      	str	r5, [r4, #0]
 80060d4:	bf18      	it	ne
 80060d6:	6059      	strne	r1, [r3, #4]
 80060d8:	6863      	ldr	r3, [r4, #4]
 80060da:	bf08      	it	eq
 80060dc:	f8c8 1000 	streq.w	r1, [r8]
 80060e0:	5162      	str	r2, [r4, r5]
 80060e2:	604b      	str	r3, [r1, #4]
 80060e4:	4638      	mov	r0, r7
 80060e6:	f104 060b 	add.w	r6, r4, #11
 80060ea:	f000 f829 	bl	8006140 <__malloc_unlock>
 80060ee:	f026 0607 	bic.w	r6, r6, #7
 80060f2:	1d23      	adds	r3, r4, #4
 80060f4:	1af2      	subs	r2, r6, r3
 80060f6:	d0ae      	beq.n	8006056 <_malloc_r+0x22>
 80060f8:	1b9b      	subs	r3, r3, r6
 80060fa:	50a3      	str	r3, [r4, r2]
 80060fc:	e7ab      	b.n	8006056 <_malloc_r+0x22>
 80060fe:	42a3      	cmp	r3, r4
 8006100:	6862      	ldr	r2, [r4, #4]
 8006102:	d1dd      	bne.n	80060c0 <_malloc_r+0x8c>
 8006104:	f8c8 2000 	str.w	r2, [r8]
 8006108:	e7ec      	b.n	80060e4 <_malloc_r+0xb0>
 800610a:	4623      	mov	r3, r4
 800610c:	6864      	ldr	r4, [r4, #4]
 800610e:	e7ac      	b.n	800606a <_malloc_r+0x36>
 8006110:	4634      	mov	r4, r6
 8006112:	6876      	ldr	r6, [r6, #4]
 8006114:	e7b4      	b.n	8006080 <_malloc_r+0x4c>
 8006116:	4613      	mov	r3, r2
 8006118:	e7cc      	b.n	80060b4 <_malloc_r+0x80>
 800611a:	230c      	movs	r3, #12
 800611c:	4638      	mov	r0, r7
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	f000 f80e 	bl	8006140 <__malloc_unlock>
 8006124:	e797      	b.n	8006056 <_malloc_r+0x22>
 8006126:	6025      	str	r5, [r4, #0]
 8006128:	e7dc      	b.n	80060e4 <_malloc_r+0xb0>
 800612a:	605b      	str	r3, [r3, #4]
 800612c:	deff      	udf	#255	; 0xff
 800612e:	bf00      	nop
 8006130:	20001c88 	.word	0x20001c88

08006134 <__malloc_lock>:
 8006134:	4801      	ldr	r0, [pc, #4]	; (800613c <__malloc_lock+0x8>)
 8006136:	f7ff bf05 	b.w	8005f44 <__retarget_lock_acquire_recursive>
 800613a:	bf00      	nop
 800613c:	20001c84 	.word	0x20001c84

08006140 <__malloc_unlock>:
 8006140:	4801      	ldr	r0, [pc, #4]	; (8006148 <__malloc_unlock+0x8>)
 8006142:	f7ff bf00 	b.w	8005f46 <__retarget_lock_release_recursive>
 8006146:	bf00      	nop
 8006148:	20001c84 	.word	0x20001c84

0800614c <__ssputs_r>:
 800614c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006150:	461f      	mov	r7, r3
 8006152:	688e      	ldr	r6, [r1, #8]
 8006154:	4682      	mov	sl, r0
 8006156:	42be      	cmp	r6, r7
 8006158:	460c      	mov	r4, r1
 800615a:	4690      	mov	r8, r2
 800615c:	680b      	ldr	r3, [r1, #0]
 800615e:	d82c      	bhi.n	80061ba <__ssputs_r+0x6e>
 8006160:	898a      	ldrh	r2, [r1, #12]
 8006162:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006166:	d026      	beq.n	80061b6 <__ssputs_r+0x6a>
 8006168:	6965      	ldr	r5, [r4, #20]
 800616a:	6909      	ldr	r1, [r1, #16]
 800616c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006170:	eba3 0901 	sub.w	r9, r3, r1
 8006174:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006178:	1c7b      	adds	r3, r7, #1
 800617a:	444b      	add	r3, r9
 800617c:	106d      	asrs	r5, r5, #1
 800617e:	429d      	cmp	r5, r3
 8006180:	bf38      	it	cc
 8006182:	461d      	movcc	r5, r3
 8006184:	0553      	lsls	r3, r2, #21
 8006186:	d527      	bpl.n	80061d8 <__ssputs_r+0x8c>
 8006188:	4629      	mov	r1, r5
 800618a:	f7ff ff53 	bl	8006034 <_malloc_r>
 800618e:	4606      	mov	r6, r0
 8006190:	b360      	cbz	r0, 80061ec <__ssputs_r+0xa0>
 8006192:	464a      	mov	r2, r9
 8006194:	6921      	ldr	r1, [r4, #16]
 8006196:	f7ff fed7 	bl	8005f48 <memcpy>
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a4:	81a3      	strh	r3, [r4, #12]
 80061a6:	6126      	str	r6, [r4, #16]
 80061a8:	444e      	add	r6, r9
 80061aa:	6026      	str	r6, [r4, #0]
 80061ac:	463e      	mov	r6, r7
 80061ae:	6165      	str	r5, [r4, #20]
 80061b0:	eba5 0509 	sub.w	r5, r5, r9
 80061b4:	60a5      	str	r5, [r4, #8]
 80061b6:	42be      	cmp	r6, r7
 80061b8:	d900      	bls.n	80061bc <__ssputs_r+0x70>
 80061ba:	463e      	mov	r6, r7
 80061bc:	4632      	mov	r2, r6
 80061be:	4641      	mov	r1, r8
 80061c0:	6820      	ldr	r0, [r4, #0]
 80061c2:	f000 faaf 	bl	8006724 <memmove>
 80061c6:	2000      	movs	r0, #0
 80061c8:	68a3      	ldr	r3, [r4, #8]
 80061ca:	1b9b      	subs	r3, r3, r6
 80061cc:	60a3      	str	r3, [r4, #8]
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	4433      	add	r3, r6
 80061d2:	6023      	str	r3, [r4, #0]
 80061d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d8:	462a      	mov	r2, r5
 80061da:	f000 fadb 	bl	8006794 <_realloc_r>
 80061de:	4606      	mov	r6, r0
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d1e0      	bne.n	80061a6 <__ssputs_r+0x5a>
 80061e4:	4650      	mov	r0, sl
 80061e6:	6921      	ldr	r1, [r4, #16]
 80061e8:	f7ff febc 	bl	8005f64 <_free_r>
 80061ec:	230c      	movs	r3, #12
 80061ee:	f8ca 3000 	str.w	r3, [sl]
 80061f2:	89a3      	ldrh	r3, [r4, #12]
 80061f4:	f04f 30ff 	mov.w	r0, #4294967295
 80061f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061fc:	81a3      	strh	r3, [r4, #12]
 80061fe:	e7e9      	b.n	80061d4 <__ssputs_r+0x88>

08006200 <_svfiprintf_r>:
 8006200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006204:	4698      	mov	r8, r3
 8006206:	898b      	ldrh	r3, [r1, #12]
 8006208:	4607      	mov	r7, r0
 800620a:	061b      	lsls	r3, r3, #24
 800620c:	460d      	mov	r5, r1
 800620e:	4614      	mov	r4, r2
 8006210:	b09d      	sub	sp, #116	; 0x74
 8006212:	d50e      	bpl.n	8006232 <_svfiprintf_r+0x32>
 8006214:	690b      	ldr	r3, [r1, #16]
 8006216:	b963      	cbnz	r3, 8006232 <_svfiprintf_r+0x32>
 8006218:	2140      	movs	r1, #64	; 0x40
 800621a:	f7ff ff0b 	bl	8006034 <_malloc_r>
 800621e:	6028      	str	r0, [r5, #0]
 8006220:	6128      	str	r0, [r5, #16]
 8006222:	b920      	cbnz	r0, 800622e <_svfiprintf_r+0x2e>
 8006224:	230c      	movs	r3, #12
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	f04f 30ff 	mov.w	r0, #4294967295
 800622c:	e0d0      	b.n	80063d0 <_svfiprintf_r+0x1d0>
 800622e:	2340      	movs	r3, #64	; 0x40
 8006230:	616b      	str	r3, [r5, #20]
 8006232:	2300      	movs	r3, #0
 8006234:	9309      	str	r3, [sp, #36]	; 0x24
 8006236:	2320      	movs	r3, #32
 8006238:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800623c:	2330      	movs	r3, #48	; 0x30
 800623e:	f04f 0901 	mov.w	r9, #1
 8006242:	f8cd 800c 	str.w	r8, [sp, #12]
 8006246:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80063e8 <_svfiprintf_r+0x1e8>
 800624a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800624e:	4623      	mov	r3, r4
 8006250:	469a      	mov	sl, r3
 8006252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006256:	b10a      	cbz	r2, 800625c <_svfiprintf_r+0x5c>
 8006258:	2a25      	cmp	r2, #37	; 0x25
 800625a:	d1f9      	bne.n	8006250 <_svfiprintf_r+0x50>
 800625c:	ebba 0b04 	subs.w	fp, sl, r4
 8006260:	d00b      	beq.n	800627a <_svfiprintf_r+0x7a>
 8006262:	465b      	mov	r3, fp
 8006264:	4622      	mov	r2, r4
 8006266:	4629      	mov	r1, r5
 8006268:	4638      	mov	r0, r7
 800626a:	f7ff ff6f 	bl	800614c <__ssputs_r>
 800626e:	3001      	adds	r0, #1
 8006270:	f000 80a9 	beq.w	80063c6 <_svfiprintf_r+0x1c6>
 8006274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006276:	445a      	add	r2, fp
 8006278:	9209      	str	r2, [sp, #36]	; 0x24
 800627a:	f89a 3000 	ldrb.w	r3, [sl]
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 80a1 	beq.w	80063c6 <_svfiprintf_r+0x1c6>
 8006284:	2300      	movs	r3, #0
 8006286:	f04f 32ff 	mov.w	r2, #4294967295
 800628a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800628e:	f10a 0a01 	add.w	sl, sl, #1
 8006292:	9304      	str	r3, [sp, #16]
 8006294:	9307      	str	r3, [sp, #28]
 8006296:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800629a:	931a      	str	r3, [sp, #104]	; 0x68
 800629c:	4654      	mov	r4, sl
 800629e:	2205      	movs	r2, #5
 80062a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a4:	4850      	ldr	r0, [pc, #320]	; (80063e8 <_svfiprintf_r+0x1e8>)
 80062a6:	f000 fa67 	bl	8006778 <memchr>
 80062aa:	9a04      	ldr	r2, [sp, #16]
 80062ac:	b9d8      	cbnz	r0, 80062e6 <_svfiprintf_r+0xe6>
 80062ae:	06d0      	lsls	r0, r2, #27
 80062b0:	bf44      	itt	mi
 80062b2:	2320      	movmi	r3, #32
 80062b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062b8:	0711      	lsls	r1, r2, #28
 80062ba:	bf44      	itt	mi
 80062bc:	232b      	movmi	r3, #43	; 0x2b
 80062be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062c2:	f89a 3000 	ldrb.w	r3, [sl]
 80062c6:	2b2a      	cmp	r3, #42	; 0x2a
 80062c8:	d015      	beq.n	80062f6 <_svfiprintf_r+0xf6>
 80062ca:	4654      	mov	r4, sl
 80062cc:	2000      	movs	r0, #0
 80062ce:	f04f 0c0a 	mov.w	ip, #10
 80062d2:	9a07      	ldr	r2, [sp, #28]
 80062d4:	4621      	mov	r1, r4
 80062d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062da:	3b30      	subs	r3, #48	; 0x30
 80062dc:	2b09      	cmp	r3, #9
 80062de:	d94d      	bls.n	800637c <_svfiprintf_r+0x17c>
 80062e0:	b1b0      	cbz	r0, 8006310 <_svfiprintf_r+0x110>
 80062e2:	9207      	str	r2, [sp, #28]
 80062e4:	e014      	b.n	8006310 <_svfiprintf_r+0x110>
 80062e6:	eba0 0308 	sub.w	r3, r0, r8
 80062ea:	fa09 f303 	lsl.w	r3, r9, r3
 80062ee:	4313      	orrs	r3, r2
 80062f0:	46a2      	mov	sl, r4
 80062f2:	9304      	str	r3, [sp, #16]
 80062f4:	e7d2      	b.n	800629c <_svfiprintf_r+0x9c>
 80062f6:	9b03      	ldr	r3, [sp, #12]
 80062f8:	1d19      	adds	r1, r3, #4
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	9103      	str	r1, [sp, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	bfbb      	ittet	lt
 8006302:	425b      	neglt	r3, r3
 8006304:	f042 0202 	orrlt.w	r2, r2, #2
 8006308:	9307      	strge	r3, [sp, #28]
 800630a:	9307      	strlt	r3, [sp, #28]
 800630c:	bfb8      	it	lt
 800630e:	9204      	strlt	r2, [sp, #16]
 8006310:	7823      	ldrb	r3, [r4, #0]
 8006312:	2b2e      	cmp	r3, #46	; 0x2e
 8006314:	d10c      	bne.n	8006330 <_svfiprintf_r+0x130>
 8006316:	7863      	ldrb	r3, [r4, #1]
 8006318:	2b2a      	cmp	r3, #42	; 0x2a
 800631a:	d134      	bne.n	8006386 <_svfiprintf_r+0x186>
 800631c:	9b03      	ldr	r3, [sp, #12]
 800631e:	3402      	adds	r4, #2
 8006320:	1d1a      	adds	r2, r3, #4
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	9203      	str	r2, [sp, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	bfb8      	it	lt
 800632a:	f04f 33ff 	movlt.w	r3, #4294967295
 800632e:	9305      	str	r3, [sp, #20]
 8006330:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80063ec <_svfiprintf_r+0x1ec>
 8006334:	2203      	movs	r2, #3
 8006336:	4650      	mov	r0, sl
 8006338:	7821      	ldrb	r1, [r4, #0]
 800633a:	f000 fa1d 	bl	8006778 <memchr>
 800633e:	b138      	cbz	r0, 8006350 <_svfiprintf_r+0x150>
 8006340:	2240      	movs	r2, #64	; 0x40
 8006342:	9b04      	ldr	r3, [sp, #16]
 8006344:	eba0 000a 	sub.w	r0, r0, sl
 8006348:	4082      	lsls	r2, r0
 800634a:	4313      	orrs	r3, r2
 800634c:	3401      	adds	r4, #1
 800634e:	9304      	str	r3, [sp, #16]
 8006350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006354:	2206      	movs	r2, #6
 8006356:	4826      	ldr	r0, [pc, #152]	; (80063f0 <_svfiprintf_r+0x1f0>)
 8006358:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800635c:	f000 fa0c 	bl	8006778 <memchr>
 8006360:	2800      	cmp	r0, #0
 8006362:	d038      	beq.n	80063d6 <_svfiprintf_r+0x1d6>
 8006364:	4b23      	ldr	r3, [pc, #140]	; (80063f4 <_svfiprintf_r+0x1f4>)
 8006366:	bb1b      	cbnz	r3, 80063b0 <_svfiprintf_r+0x1b0>
 8006368:	9b03      	ldr	r3, [sp, #12]
 800636a:	3307      	adds	r3, #7
 800636c:	f023 0307 	bic.w	r3, r3, #7
 8006370:	3308      	adds	r3, #8
 8006372:	9303      	str	r3, [sp, #12]
 8006374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006376:	4433      	add	r3, r6
 8006378:	9309      	str	r3, [sp, #36]	; 0x24
 800637a:	e768      	b.n	800624e <_svfiprintf_r+0x4e>
 800637c:	460c      	mov	r4, r1
 800637e:	2001      	movs	r0, #1
 8006380:	fb0c 3202 	mla	r2, ip, r2, r3
 8006384:	e7a6      	b.n	80062d4 <_svfiprintf_r+0xd4>
 8006386:	2300      	movs	r3, #0
 8006388:	f04f 0c0a 	mov.w	ip, #10
 800638c:	4619      	mov	r1, r3
 800638e:	3401      	adds	r4, #1
 8006390:	9305      	str	r3, [sp, #20]
 8006392:	4620      	mov	r0, r4
 8006394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006398:	3a30      	subs	r2, #48	; 0x30
 800639a:	2a09      	cmp	r2, #9
 800639c:	d903      	bls.n	80063a6 <_svfiprintf_r+0x1a6>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0c6      	beq.n	8006330 <_svfiprintf_r+0x130>
 80063a2:	9105      	str	r1, [sp, #20]
 80063a4:	e7c4      	b.n	8006330 <_svfiprintf_r+0x130>
 80063a6:	4604      	mov	r4, r0
 80063a8:	2301      	movs	r3, #1
 80063aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80063ae:	e7f0      	b.n	8006392 <_svfiprintf_r+0x192>
 80063b0:	ab03      	add	r3, sp, #12
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	462a      	mov	r2, r5
 80063b6:	4638      	mov	r0, r7
 80063b8:	4b0f      	ldr	r3, [pc, #60]	; (80063f8 <_svfiprintf_r+0x1f8>)
 80063ba:	a904      	add	r1, sp, #16
 80063bc:	f3af 8000 	nop.w
 80063c0:	1c42      	adds	r2, r0, #1
 80063c2:	4606      	mov	r6, r0
 80063c4:	d1d6      	bne.n	8006374 <_svfiprintf_r+0x174>
 80063c6:	89ab      	ldrh	r3, [r5, #12]
 80063c8:	065b      	lsls	r3, r3, #25
 80063ca:	f53f af2d 	bmi.w	8006228 <_svfiprintf_r+0x28>
 80063ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063d0:	b01d      	add	sp, #116	; 0x74
 80063d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d6:	ab03      	add	r3, sp, #12
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	462a      	mov	r2, r5
 80063dc:	4638      	mov	r0, r7
 80063de:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <_svfiprintf_r+0x1f8>)
 80063e0:	a904      	add	r1, sp, #16
 80063e2:	f000 f87d 	bl	80064e0 <_printf_i>
 80063e6:	e7eb      	b.n	80063c0 <_svfiprintf_r+0x1c0>
 80063e8:	080069f3 	.word	0x080069f3
 80063ec:	080069f9 	.word	0x080069f9
 80063f0:	080069fd 	.word	0x080069fd
 80063f4:	00000000 	.word	0x00000000
 80063f8:	0800614d 	.word	0x0800614d

080063fc <_printf_common>:
 80063fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006400:	4616      	mov	r6, r2
 8006402:	4699      	mov	r9, r3
 8006404:	688a      	ldr	r2, [r1, #8]
 8006406:	690b      	ldr	r3, [r1, #16]
 8006408:	4607      	mov	r7, r0
 800640a:	4293      	cmp	r3, r2
 800640c:	bfb8      	it	lt
 800640e:	4613      	movlt	r3, r2
 8006410:	6033      	str	r3, [r6, #0]
 8006412:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006416:	460c      	mov	r4, r1
 8006418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800641c:	b10a      	cbz	r2, 8006422 <_printf_common+0x26>
 800641e:	3301      	adds	r3, #1
 8006420:	6033      	str	r3, [r6, #0]
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	0699      	lsls	r1, r3, #26
 8006426:	bf42      	ittt	mi
 8006428:	6833      	ldrmi	r3, [r6, #0]
 800642a:	3302      	addmi	r3, #2
 800642c:	6033      	strmi	r3, [r6, #0]
 800642e:	6825      	ldr	r5, [r4, #0]
 8006430:	f015 0506 	ands.w	r5, r5, #6
 8006434:	d106      	bne.n	8006444 <_printf_common+0x48>
 8006436:	f104 0a19 	add.w	sl, r4, #25
 800643a:	68e3      	ldr	r3, [r4, #12]
 800643c:	6832      	ldr	r2, [r6, #0]
 800643e:	1a9b      	subs	r3, r3, r2
 8006440:	42ab      	cmp	r3, r5
 8006442:	dc2b      	bgt.n	800649c <_printf_common+0xa0>
 8006444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006448:	1e13      	subs	r3, r2, #0
 800644a:	6822      	ldr	r2, [r4, #0]
 800644c:	bf18      	it	ne
 800644e:	2301      	movne	r3, #1
 8006450:	0692      	lsls	r2, r2, #26
 8006452:	d430      	bmi.n	80064b6 <_printf_common+0xba>
 8006454:	4649      	mov	r1, r9
 8006456:	4638      	mov	r0, r7
 8006458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800645c:	47c0      	blx	r8
 800645e:	3001      	adds	r0, #1
 8006460:	d023      	beq.n	80064aa <_printf_common+0xae>
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	6922      	ldr	r2, [r4, #16]
 8006466:	f003 0306 	and.w	r3, r3, #6
 800646a:	2b04      	cmp	r3, #4
 800646c:	bf14      	ite	ne
 800646e:	2500      	movne	r5, #0
 8006470:	6833      	ldreq	r3, [r6, #0]
 8006472:	f04f 0600 	mov.w	r6, #0
 8006476:	bf08      	it	eq
 8006478:	68e5      	ldreq	r5, [r4, #12]
 800647a:	f104 041a 	add.w	r4, r4, #26
 800647e:	bf08      	it	eq
 8006480:	1aed      	subeq	r5, r5, r3
 8006482:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006486:	bf08      	it	eq
 8006488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800648c:	4293      	cmp	r3, r2
 800648e:	bfc4      	itt	gt
 8006490:	1a9b      	subgt	r3, r3, r2
 8006492:	18ed      	addgt	r5, r5, r3
 8006494:	42b5      	cmp	r5, r6
 8006496:	d11a      	bne.n	80064ce <_printf_common+0xd2>
 8006498:	2000      	movs	r0, #0
 800649a:	e008      	b.n	80064ae <_printf_common+0xb2>
 800649c:	2301      	movs	r3, #1
 800649e:	4652      	mov	r2, sl
 80064a0:	4649      	mov	r1, r9
 80064a2:	4638      	mov	r0, r7
 80064a4:	47c0      	blx	r8
 80064a6:	3001      	adds	r0, #1
 80064a8:	d103      	bne.n	80064b2 <_printf_common+0xb6>
 80064aa:	f04f 30ff 	mov.w	r0, #4294967295
 80064ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b2:	3501      	adds	r5, #1
 80064b4:	e7c1      	b.n	800643a <_printf_common+0x3e>
 80064b6:	2030      	movs	r0, #48	; 0x30
 80064b8:	18e1      	adds	r1, r4, r3
 80064ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064c4:	4422      	add	r2, r4
 80064c6:	3302      	adds	r3, #2
 80064c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064cc:	e7c2      	b.n	8006454 <_printf_common+0x58>
 80064ce:	2301      	movs	r3, #1
 80064d0:	4622      	mov	r2, r4
 80064d2:	4649      	mov	r1, r9
 80064d4:	4638      	mov	r0, r7
 80064d6:	47c0      	blx	r8
 80064d8:	3001      	adds	r0, #1
 80064da:	d0e6      	beq.n	80064aa <_printf_common+0xae>
 80064dc:	3601      	adds	r6, #1
 80064de:	e7d9      	b.n	8006494 <_printf_common+0x98>

080064e0 <_printf_i>:
 80064e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064e4:	7e0f      	ldrb	r7, [r1, #24]
 80064e6:	4691      	mov	r9, r2
 80064e8:	2f78      	cmp	r7, #120	; 0x78
 80064ea:	4680      	mov	r8, r0
 80064ec:	460c      	mov	r4, r1
 80064ee:	469a      	mov	sl, r3
 80064f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064f6:	d807      	bhi.n	8006508 <_printf_i+0x28>
 80064f8:	2f62      	cmp	r7, #98	; 0x62
 80064fa:	d80a      	bhi.n	8006512 <_printf_i+0x32>
 80064fc:	2f00      	cmp	r7, #0
 80064fe:	f000 80d5 	beq.w	80066ac <_printf_i+0x1cc>
 8006502:	2f58      	cmp	r7, #88	; 0x58
 8006504:	f000 80c1 	beq.w	800668a <_printf_i+0x1aa>
 8006508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800650c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006510:	e03a      	b.n	8006588 <_printf_i+0xa8>
 8006512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006516:	2b15      	cmp	r3, #21
 8006518:	d8f6      	bhi.n	8006508 <_printf_i+0x28>
 800651a:	a101      	add	r1, pc, #4	; (adr r1, 8006520 <_printf_i+0x40>)
 800651c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006520:	08006579 	.word	0x08006579
 8006524:	0800658d 	.word	0x0800658d
 8006528:	08006509 	.word	0x08006509
 800652c:	08006509 	.word	0x08006509
 8006530:	08006509 	.word	0x08006509
 8006534:	08006509 	.word	0x08006509
 8006538:	0800658d 	.word	0x0800658d
 800653c:	08006509 	.word	0x08006509
 8006540:	08006509 	.word	0x08006509
 8006544:	08006509 	.word	0x08006509
 8006548:	08006509 	.word	0x08006509
 800654c:	08006693 	.word	0x08006693
 8006550:	080065b9 	.word	0x080065b9
 8006554:	0800664d 	.word	0x0800664d
 8006558:	08006509 	.word	0x08006509
 800655c:	08006509 	.word	0x08006509
 8006560:	080066b5 	.word	0x080066b5
 8006564:	08006509 	.word	0x08006509
 8006568:	080065b9 	.word	0x080065b9
 800656c:	08006509 	.word	0x08006509
 8006570:	08006509 	.word	0x08006509
 8006574:	08006655 	.word	0x08006655
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	1d1a      	adds	r2, r3, #4
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	602a      	str	r2, [r5, #0]
 8006580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006588:	2301      	movs	r3, #1
 800658a:	e0a0      	b.n	80066ce <_printf_i+0x1ee>
 800658c:	6820      	ldr	r0, [r4, #0]
 800658e:	682b      	ldr	r3, [r5, #0]
 8006590:	0607      	lsls	r7, r0, #24
 8006592:	f103 0104 	add.w	r1, r3, #4
 8006596:	6029      	str	r1, [r5, #0]
 8006598:	d501      	bpl.n	800659e <_printf_i+0xbe>
 800659a:	681e      	ldr	r6, [r3, #0]
 800659c:	e003      	b.n	80065a6 <_printf_i+0xc6>
 800659e:	0646      	lsls	r6, r0, #25
 80065a0:	d5fb      	bpl.n	800659a <_printf_i+0xba>
 80065a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80065a6:	2e00      	cmp	r6, #0
 80065a8:	da03      	bge.n	80065b2 <_printf_i+0xd2>
 80065aa:	232d      	movs	r3, #45	; 0x2d
 80065ac:	4276      	negs	r6, r6
 80065ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065b2:	230a      	movs	r3, #10
 80065b4:	4859      	ldr	r0, [pc, #356]	; (800671c <_printf_i+0x23c>)
 80065b6:	e012      	b.n	80065de <_printf_i+0xfe>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	6820      	ldr	r0, [r4, #0]
 80065bc:	1d19      	adds	r1, r3, #4
 80065be:	6029      	str	r1, [r5, #0]
 80065c0:	0605      	lsls	r5, r0, #24
 80065c2:	d501      	bpl.n	80065c8 <_printf_i+0xe8>
 80065c4:	681e      	ldr	r6, [r3, #0]
 80065c6:	e002      	b.n	80065ce <_printf_i+0xee>
 80065c8:	0641      	lsls	r1, r0, #25
 80065ca:	d5fb      	bpl.n	80065c4 <_printf_i+0xe4>
 80065cc:	881e      	ldrh	r6, [r3, #0]
 80065ce:	2f6f      	cmp	r7, #111	; 0x6f
 80065d0:	bf0c      	ite	eq
 80065d2:	2308      	moveq	r3, #8
 80065d4:	230a      	movne	r3, #10
 80065d6:	4851      	ldr	r0, [pc, #324]	; (800671c <_printf_i+0x23c>)
 80065d8:	2100      	movs	r1, #0
 80065da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065de:	6865      	ldr	r5, [r4, #4]
 80065e0:	2d00      	cmp	r5, #0
 80065e2:	bfa8      	it	ge
 80065e4:	6821      	ldrge	r1, [r4, #0]
 80065e6:	60a5      	str	r5, [r4, #8]
 80065e8:	bfa4      	itt	ge
 80065ea:	f021 0104 	bicge.w	r1, r1, #4
 80065ee:	6021      	strge	r1, [r4, #0]
 80065f0:	b90e      	cbnz	r6, 80065f6 <_printf_i+0x116>
 80065f2:	2d00      	cmp	r5, #0
 80065f4:	d04b      	beq.n	800668e <_printf_i+0x1ae>
 80065f6:	4615      	mov	r5, r2
 80065f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80065fc:	fb03 6711 	mls	r7, r3, r1, r6
 8006600:	5dc7      	ldrb	r7, [r0, r7]
 8006602:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006606:	4637      	mov	r7, r6
 8006608:	42bb      	cmp	r3, r7
 800660a:	460e      	mov	r6, r1
 800660c:	d9f4      	bls.n	80065f8 <_printf_i+0x118>
 800660e:	2b08      	cmp	r3, #8
 8006610:	d10b      	bne.n	800662a <_printf_i+0x14a>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	07de      	lsls	r6, r3, #31
 8006616:	d508      	bpl.n	800662a <_printf_i+0x14a>
 8006618:	6923      	ldr	r3, [r4, #16]
 800661a:	6861      	ldr	r1, [r4, #4]
 800661c:	4299      	cmp	r1, r3
 800661e:	bfde      	ittt	le
 8006620:	2330      	movle	r3, #48	; 0x30
 8006622:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006626:	f105 35ff 	addle.w	r5, r5, #4294967295
 800662a:	1b52      	subs	r2, r2, r5
 800662c:	6122      	str	r2, [r4, #16]
 800662e:	464b      	mov	r3, r9
 8006630:	4621      	mov	r1, r4
 8006632:	4640      	mov	r0, r8
 8006634:	f8cd a000 	str.w	sl, [sp]
 8006638:	aa03      	add	r2, sp, #12
 800663a:	f7ff fedf 	bl	80063fc <_printf_common>
 800663e:	3001      	adds	r0, #1
 8006640:	d14a      	bne.n	80066d8 <_printf_i+0x1f8>
 8006642:	f04f 30ff 	mov.w	r0, #4294967295
 8006646:	b004      	add	sp, #16
 8006648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	f043 0320 	orr.w	r3, r3, #32
 8006652:	6023      	str	r3, [r4, #0]
 8006654:	2778      	movs	r7, #120	; 0x78
 8006656:	4832      	ldr	r0, [pc, #200]	; (8006720 <_printf_i+0x240>)
 8006658:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	6829      	ldr	r1, [r5, #0]
 8006660:	061f      	lsls	r7, r3, #24
 8006662:	f851 6b04 	ldr.w	r6, [r1], #4
 8006666:	d402      	bmi.n	800666e <_printf_i+0x18e>
 8006668:	065f      	lsls	r7, r3, #25
 800666a:	bf48      	it	mi
 800666c:	b2b6      	uxthmi	r6, r6
 800666e:	07df      	lsls	r7, r3, #31
 8006670:	bf48      	it	mi
 8006672:	f043 0320 	orrmi.w	r3, r3, #32
 8006676:	6029      	str	r1, [r5, #0]
 8006678:	bf48      	it	mi
 800667a:	6023      	strmi	r3, [r4, #0]
 800667c:	b91e      	cbnz	r6, 8006686 <_printf_i+0x1a6>
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	f023 0320 	bic.w	r3, r3, #32
 8006684:	6023      	str	r3, [r4, #0]
 8006686:	2310      	movs	r3, #16
 8006688:	e7a6      	b.n	80065d8 <_printf_i+0xf8>
 800668a:	4824      	ldr	r0, [pc, #144]	; (800671c <_printf_i+0x23c>)
 800668c:	e7e4      	b.n	8006658 <_printf_i+0x178>
 800668e:	4615      	mov	r5, r2
 8006690:	e7bd      	b.n	800660e <_printf_i+0x12e>
 8006692:	682b      	ldr	r3, [r5, #0]
 8006694:	6826      	ldr	r6, [r4, #0]
 8006696:	1d18      	adds	r0, r3, #4
 8006698:	6961      	ldr	r1, [r4, #20]
 800669a:	6028      	str	r0, [r5, #0]
 800669c:	0635      	lsls	r5, r6, #24
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	d501      	bpl.n	80066a6 <_printf_i+0x1c6>
 80066a2:	6019      	str	r1, [r3, #0]
 80066a4:	e002      	b.n	80066ac <_printf_i+0x1cc>
 80066a6:	0670      	lsls	r0, r6, #25
 80066a8:	d5fb      	bpl.n	80066a2 <_printf_i+0x1c2>
 80066aa:	8019      	strh	r1, [r3, #0]
 80066ac:	2300      	movs	r3, #0
 80066ae:	4615      	mov	r5, r2
 80066b0:	6123      	str	r3, [r4, #16]
 80066b2:	e7bc      	b.n	800662e <_printf_i+0x14e>
 80066b4:	682b      	ldr	r3, [r5, #0]
 80066b6:	2100      	movs	r1, #0
 80066b8:	1d1a      	adds	r2, r3, #4
 80066ba:	602a      	str	r2, [r5, #0]
 80066bc:	681d      	ldr	r5, [r3, #0]
 80066be:	6862      	ldr	r2, [r4, #4]
 80066c0:	4628      	mov	r0, r5
 80066c2:	f000 f859 	bl	8006778 <memchr>
 80066c6:	b108      	cbz	r0, 80066cc <_printf_i+0x1ec>
 80066c8:	1b40      	subs	r0, r0, r5
 80066ca:	6060      	str	r0, [r4, #4]
 80066cc:	6863      	ldr	r3, [r4, #4]
 80066ce:	6123      	str	r3, [r4, #16]
 80066d0:	2300      	movs	r3, #0
 80066d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d6:	e7aa      	b.n	800662e <_printf_i+0x14e>
 80066d8:	462a      	mov	r2, r5
 80066da:	4649      	mov	r1, r9
 80066dc:	4640      	mov	r0, r8
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	47d0      	blx	sl
 80066e2:	3001      	adds	r0, #1
 80066e4:	d0ad      	beq.n	8006642 <_printf_i+0x162>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	079b      	lsls	r3, r3, #30
 80066ea:	d413      	bmi.n	8006714 <_printf_i+0x234>
 80066ec:	68e0      	ldr	r0, [r4, #12]
 80066ee:	9b03      	ldr	r3, [sp, #12]
 80066f0:	4298      	cmp	r0, r3
 80066f2:	bfb8      	it	lt
 80066f4:	4618      	movlt	r0, r3
 80066f6:	e7a6      	b.n	8006646 <_printf_i+0x166>
 80066f8:	2301      	movs	r3, #1
 80066fa:	4632      	mov	r2, r6
 80066fc:	4649      	mov	r1, r9
 80066fe:	4640      	mov	r0, r8
 8006700:	47d0      	blx	sl
 8006702:	3001      	adds	r0, #1
 8006704:	d09d      	beq.n	8006642 <_printf_i+0x162>
 8006706:	3501      	adds	r5, #1
 8006708:	68e3      	ldr	r3, [r4, #12]
 800670a:	9903      	ldr	r1, [sp, #12]
 800670c:	1a5b      	subs	r3, r3, r1
 800670e:	42ab      	cmp	r3, r5
 8006710:	dcf2      	bgt.n	80066f8 <_printf_i+0x218>
 8006712:	e7eb      	b.n	80066ec <_printf_i+0x20c>
 8006714:	2500      	movs	r5, #0
 8006716:	f104 0619 	add.w	r6, r4, #25
 800671a:	e7f5      	b.n	8006708 <_printf_i+0x228>
 800671c:	08006a04 	.word	0x08006a04
 8006720:	08006a15 	.word	0x08006a15

08006724 <memmove>:
 8006724:	4288      	cmp	r0, r1
 8006726:	b510      	push	{r4, lr}
 8006728:	eb01 0402 	add.w	r4, r1, r2
 800672c:	d902      	bls.n	8006734 <memmove+0x10>
 800672e:	4284      	cmp	r4, r0
 8006730:	4623      	mov	r3, r4
 8006732:	d807      	bhi.n	8006744 <memmove+0x20>
 8006734:	1e43      	subs	r3, r0, #1
 8006736:	42a1      	cmp	r1, r4
 8006738:	d008      	beq.n	800674c <memmove+0x28>
 800673a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800673e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006742:	e7f8      	b.n	8006736 <memmove+0x12>
 8006744:	4601      	mov	r1, r0
 8006746:	4402      	add	r2, r0
 8006748:	428a      	cmp	r2, r1
 800674a:	d100      	bne.n	800674e <memmove+0x2a>
 800674c:	bd10      	pop	{r4, pc}
 800674e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006756:	e7f7      	b.n	8006748 <memmove+0x24>

08006758 <_sbrk_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	2300      	movs	r3, #0
 800675c:	4d05      	ldr	r5, [pc, #20]	; (8006774 <_sbrk_r+0x1c>)
 800675e:	4604      	mov	r4, r0
 8006760:	4608      	mov	r0, r1
 8006762:	602b      	str	r3, [r5, #0]
 8006764:	f7fa f8d6 	bl	8000914 <_sbrk>
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	d102      	bne.n	8006772 <_sbrk_r+0x1a>
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	b103      	cbz	r3, 8006772 <_sbrk_r+0x1a>
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	bd38      	pop	{r3, r4, r5, pc}
 8006774:	20001c80 	.word	0x20001c80

08006778 <memchr>:
 8006778:	4603      	mov	r3, r0
 800677a:	b510      	push	{r4, lr}
 800677c:	b2c9      	uxtb	r1, r1
 800677e:	4402      	add	r2, r0
 8006780:	4293      	cmp	r3, r2
 8006782:	4618      	mov	r0, r3
 8006784:	d101      	bne.n	800678a <memchr+0x12>
 8006786:	2000      	movs	r0, #0
 8006788:	e003      	b.n	8006792 <memchr+0x1a>
 800678a:	7804      	ldrb	r4, [r0, #0]
 800678c:	3301      	adds	r3, #1
 800678e:	428c      	cmp	r4, r1
 8006790:	d1f6      	bne.n	8006780 <memchr+0x8>
 8006792:	bd10      	pop	{r4, pc}

08006794 <_realloc_r>:
 8006794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006798:	4680      	mov	r8, r0
 800679a:	4614      	mov	r4, r2
 800679c:	460e      	mov	r6, r1
 800679e:	b921      	cbnz	r1, 80067aa <_realloc_r+0x16>
 80067a0:	4611      	mov	r1, r2
 80067a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067a6:	f7ff bc45 	b.w	8006034 <_malloc_r>
 80067aa:	b92a      	cbnz	r2, 80067b8 <_realloc_r+0x24>
 80067ac:	f7ff fbda 	bl	8005f64 <_free_r>
 80067b0:	4625      	mov	r5, r4
 80067b2:	4628      	mov	r0, r5
 80067b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067b8:	f000 f81b 	bl	80067f2 <_malloc_usable_size_r>
 80067bc:	4284      	cmp	r4, r0
 80067be:	4607      	mov	r7, r0
 80067c0:	d802      	bhi.n	80067c8 <_realloc_r+0x34>
 80067c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067c6:	d812      	bhi.n	80067ee <_realloc_r+0x5a>
 80067c8:	4621      	mov	r1, r4
 80067ca:	4640      	mov	r0, r8
 80067cc:	f7ff fc32 	bl	8006034 <_malloc_r>
 80067d0:	4605      	mov	r5, r0
 80067d2:	2800      	cmp	r0, #0
 80067d4:	d0ed      	beq.n	80067b2 <_realloc_r+0x1e>
 80067d6:	42bc      	cmp	r4, r7
 80067d8:	4622      	mov	r2, r4
 80067da:	4631      	mov	r1, r6
 80067dc:	bf28      	it	cs
 80067de:	463a      	movcs	r2, r7
 80067e0:	f7ff fbb2 	bl	8005f48 <memcpy>
 80067e4:	4631      	mov	r1, r6
 80067e6:	4640      	mov	r0, r8
 80067e8:	f7ff fbbc 	bl	8005f64 <_free_r>
 80067ec:	e7e1      	b.n	80067b2 <_realloc_r+0x1e>
 80067ee:	4635      	mov	r5, r6
 80067f0:	e7df      	b.n	80067b2 <_realloc_r+0x1e>

080067f2 <_malloc_usable_size_r>:
 80067f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067f6:	1f18      	subs	r0, r3, #4
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	bfbc      	itt	lt
 80067fc:	580b      	ldrlt	r3, [r1, r0]
 80067fe:	18c0      	addlt	r0, r0, r3
 8006800:	4770      	bx	lr
	...

08006804 <_init>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	bf00      	nop
 8006808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680a:	bc08      	pop	{r3}
 800680c:	469e      	mov	lr, r3
 800680e:	4770      	bx	lr

08006810 <_fini>:
 8006810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006812:	bf00      	nop
 8006814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006816:	bc08      	pop	{r3}
 8006818:	469e      	mov	lr, r3
 800681a:	4770      	bx	lr
