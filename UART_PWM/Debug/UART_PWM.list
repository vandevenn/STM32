
UART_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e34  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08005f44  08005f44  00015f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060f4  080060f4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080060f4  080060f4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060f4  080060f4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f4  080060f4  000160f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f8  080060f8  000160f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080060fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c80  20000060  0800615c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ce0  0800615c  00021ce0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001740f  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003286  00000000  00000000  000374db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001378  00000000  00000000  0003a768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f36  00000000  00000000  0003bae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b6c  00000000  00000000  0003ca16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e1d  00000000  00000000  0003f582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093b95  00000000  00000000  0005539f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005560  00000000  00000000  000e8f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ee494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f2c 	.word	0x08005f2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005f2c 	.word	0x08005f2c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char rxData[80];
uint16_t value = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	static char rxBuffer[10];
	static uint8_t index = 0;

	if (huart->Instance == USART2) {
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0e      	ldr	r2, [pc, #56]	; (80001a8 <HAL_UART_RxCpltCallback+0x48>)
 800016e:	4293      	cmp	r3, r2
 8000170:	d116      	bne.n	80001a0 <HAL_UART_RxCpltCallback+0x40>
	        rxBuffer[index++] = rxData[0];
 8000172:	4b0e      	ldr	r3, [pc, #56]	; (80001ac <HAL_UART_RxCpltCallback+0x4c>)
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	1c5a      	adds	r2, r3, #1
 8000178:	b2d1      	uxtb	r1, r2
 800017a:	4a0c      	ldr	r2, [pc, #48]	; (80001ac <HAL_UART_RxCpltCallback+0x4c>)
 800017c:	7011      	strb	r1, [r2, #0]
 800017e:	461a      	mov	r2, r3
 8000180:	4b0b      	ldr	r3, [pc, #44]	; (80001b0 <HAL_UART_RxCpltCallback+0x50>)
 8000182:	7819      	ldrb	r1, [r3, #0]
 8000184:	4b0b      	ldr	r3, [pc, #44]	; (80001b4 <HAL_UART_RxCpltCallback+0x54>)
 8000186:	5499      	strb	r1, [r3, r2]
	        // 데이터를 큐에 보냄
	        xQueueSendToBackFromISR(uartQueue, &rxData, NULL);
 8000188:	4b0b      	ldr	r3, [pc, #44]	; (80001b8 <HAL_UART_RxCpltCallback+0x58>)
 800018a:	6818      	ldr	r0, [r3, #0]
 800018c:	2300      	movs	r3, #0
 800018e:	2200      	movs	r2, #0
 8000190:	4907      	ldr	r1, [pc, #28]	; (80001b0 <HAL_UART_RxCpltCallback+0x50>)
 8000192:	f003 fc6d 	bl	8003a70 <xQueueGenericSendFromISR>
	        // 다음 데이터 수신을 기다림
	        HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000196:	2201      	movs	r2, #1
 8000198:	4905      	ldr	r1, [pc, #20]	; (80001b0 <HAL_UART_RxCpltCallback+0x50>)
 800019a:	4808      	ldr	r0, [pc, #32]	; (80001bc <HAL_UART_RxCpltCallback+0x5c>)
 800019c:	f002 fa65 	bl	800266a <HAL_UART_Receive_IT>
	    }
	}
 80001a0:	bf00      	nop
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40004400 	.word	0x40004400
 80001ac:	20000166 	.word	0x20000166
 80001b0:	20000114 	.word	0x20000114
 80001b4:	20000168 	.word	0x20000168
 80001b8:	2000010c 	.word	0x2000010c
 80001bc:	200000c4 	.word	0x200000c4

080001c0 <UART_Task>:

void UART_Task(void *pvParameters) {
 80001c0:	b5b0      	push	{r4, r5, r7, lr}
 80001c2:	b0a4      	sub	sp, #144	; 0x90
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
    char rxBuffer[80];
    uint8_t index = 0;
 80001c8:	2300      	movs	r3, #0
 80001ca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    while (1) {
        // 큐에서 데이터를 받음
        if (xQueueReceive(uartQueue, &rxBuffer[index], portMAX_DELAY) == pdTRUE) {
 80001ce:	4b2d      	ldr	r3, [pc, #180]	; (8000284 <UART_Task+0xc4>)
 80001d0:	6818      	ldr	r0, [r3, #0]
 80001d2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80001d6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80001da:	4413      	add	r3, r2
 80001dc:	f04f 32ff 	mov.w	r2, #4294967295
 80001e0:	4619      	mov	r1, r3
 80001e2:	f003 fcdd 	bl	8003ba0 <xQueueReceive>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d1f0      	bne.n	80001ce <UART_Task+0xe>
            if (rxBuffer[index] == '\r') {
 80001ec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80001f0:	3390      	adds	r3, #144	; 0x90
 80001f2:	443b      	add	r3, r7
 80001f4:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80001f8:	2b0d      	cmp	r3, #13
 80001fa:	d136      	bne.n	800026a <UART_Task+0xaa>
                value = atoi(rxBuffer);
 80001fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000200:	4618      	mov	r0, r3
 8000202:	f005 fd1b 	bl	8005c3c <atoi>
 8000206:	4603      	mov	r3, r0
 8000208:	b29a      	uxth	r2, r3
 800020a:	4b1f      	ldr	r3, [pc, #124]	; (8000288 <UART_Task+0xc8>)
 800020c:	801a      	strh	r2, [r3, #0]
                if ((value >= 500) && (value <= 1000)) {
 800020e:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <UART_Task+0xc8>)
 8000210:	881b      	ldrh	r3, [r3, #0]
 8000212:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000216:	d30a      	bcc.n	800022e <UART_Task+0x6e>
 8000218:	4b1b      	ldr	r3, [pc, #108]	; (8000288 <UART_Task+0xc8>)
 800021a:	881b      	ldrh	r3, [r3, #0]
 800021c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000220:	d805      	bhi.n	800022e <UART_Task+0x6e>
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, value);
 8000222:	4b19      	ldr	r3, [pc, #100]	; (8000288 <UART_Task+0xc8>)
 8000224:	881a      	ldrh	r2, [r3, #0]
 8000226:	4b19      	ldr	r3, [pc, #100]	; (800028c <UART_Task+0xcc>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	639a      	str	r2, [r3, #56]	; 0x38
 800022c:	e019      	b.n	8000262 <UART_Task+0xa2>
                }
                else {
                    char error_msg[] = "Error: PWM width must be between 500 and 1000\r\n";
 800022e:	4b18      	ldr	r3, [pc, #96]	; (8000290 <UART_Task+0xd0>)
 8000230:	f107 040c 	add.w	r4, r7, #12
 8000234:	461d      	mov	r5, r3
 8000236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800023a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800023c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800023e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                    HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8000246:	f107 030c 	add.w	r3, r7, #12
 800024a:	4618      	mov	r0, r3
 800024c:	f7ff ff80 	bl	8000150 <strlen>
 8000250:	4603      	mov	r3, r0
 8000252:	b29a      	uxth	r2, r3
 8000254:	f107 010c 	add.w	r1, r7, #12
 8000258:	f04f 33ff 	mov.w	r3, #4294967295
 800025c:	480d      	ldr	r0, [pc, #52]	; (8000294 <UART_Task+0xd4>)
 800025e:	f002 f981 	bl	8002564 <HAL_UART_Transmit>
                }
                index = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000268:	e7b1      	b.n	80001ce <UART_Task+0xe>
            }
            else {
                index++;
 800026a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800026e:	3301      	adds	r3, #1
 8000270:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                if (index >= sizeof(rxBuffer)) {
 8000274:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000278:	2b4f      	cmp	r3, #79	; 0x4f
 800027a:	d9a8      	bls.n	80001ce <UART_Task+0xe>
                    // 버퍼가 가득 찼을 때 처리
                    index = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        if (xQueueReceive(uartQueue, &rxBuffer[index], portMAX_DELAY) == pdTRUE) {
 8000282:	e7a4      	b.n	80001ce <UART_Task+0xe>
 8000284:	2000010c 	.word	0x2000010c
 8000288:	20000164 	.word	0x20000164
 800028c:	2000007c 	.word	0x2000007c
 8000290:	08005f50 	.word	0x08005f50
 8000294:	200000c4 	.word	0x200000c4

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029e:	f000 fb47 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a2:	f000 f843 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a6:	f000 f90b 	bl	80004c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002aa:	f000 f8df 	bl	800046c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80002ae:	f000 f883 	bl	80003b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uartQueue = xQueueCreate(80, sizeof(char));
 80002b2:	2200      	movs	r2, #0
 80002b4:	2101      	movs	r1, #1
 80002b6:	2050      	movs	r0, #80	; 0x50
 80002b8:	f003 fa7b 	bl	80037b2 <xQueueGenericCreate>
 80002bc:	4603      	mov	r3, r0
 80002be:	4a12      	ldr	r2, [pc, #72]	; (8000308 <main+0x70>)
 80002c0:	6013      	str	r3, [r2, #0]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80002c2:	2104      	movs	r1, #4
 80002c4:	4811      	ldr	r0, [pc, #68]	; (800030c <main+0x74>)
 80002c6:	f001 fbef 	bl	8001aa8 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)rxData, 1);
 80002ca:	2201      	movs	r2, #1
 80002cc:	4910      	ldr	r1, [pc, #64]	; (8000310 <main+0x78>)
 80002ce:	4811      	ldr	r0, [pc, #68]	; (8000314 <main+0x7c>)
 80002d0:	f002 f9cb 	bl	800266a <HAL_UART_Receive_IT>
  xTaskCreate(UART_Task, "UART_Task", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 80002d4:	2300      	movs	r3, #0
 80002d6:	9301      	str	r3, [sp, #4]
 80002d8:	2301      	movs	r3, #1
 80002da:	9300      	str	r3, [sp, #0]
 80002dc:	2300      	movs	r3, #0
 80002de:	2280      	movs	r2, #128	; 0x80
 80002e0:	490d      	ldr	r1, [pc, #52]	; (8000318 <main+0x80>)
 80002e2:	480e      	ldr	r0, [pc, #56]	; (800031c <main+0x84>)
 80002e4:	f003 ff04 	bl	80040f0 <xTaskCreate>

  vTaskStartScheduler();
 80002e8:	f004 f88a 	bl	8004400 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002ec:	f002 ff62 	bl	80031b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002f0:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <main+0x88>)
 80002f2:	2100      	movs	r1, #0
 80002f4:	480b      	ldr	r0, [pc, #44]	; (8000324 <main+0x8c>)
 80002f6:	f002 ffc3 	bl	8003280 <osThreadNew>
 80002fa:	4603      	mov	r3, r0
 80002fc:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <main+0x90>)
 80002fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000300:	f002 ff8a 	bl	8003218 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000304:	e7fe      	b.n	8000304 <main+0x6c>
 8000306:	bf00      	nop
 8000308:	2000010c 	.word	0x2000010c
 800030c:	2000007c 	.word	0x2000007c
 8000310:	20000114 	.word	0x20000114
 8000314:	200000c4 	.word	0x200000c4
 8000318:	08005f80 	.word	0x08005f80
 800031c:	080001c1 	.word	0x080001c1
 8000320:	08005fa4 	.word	0x08005fa4
 8000324:	0800059d 	.word	0x0800059d
 8000328:	20000110 	.word	0x20000110

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b090      	sub	sp, #64	; 0x40
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2228      	movs	r2, #40	; 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f005 fd0a 	bl	8005d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034e:	2301      	movs	r3, #1
 8000350:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000356:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035c:	2301      	movs	r3, #1
 800035e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000360:	2302      	movs	r3, #2
 8000362:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000368:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800036a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800036e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000370:	f107 0318 	add.w	r3, r7, #24
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fe5d 	bl	8001034 <HAL_RCC_OscConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000380:	f000 f926 	bl	80005d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000384:	230f      	movs	r3, #15
 8000386:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000388:	2302      	movs	r3, #2
 800038a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000394:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2102      	movs	r1, #2
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 f8ca 	bl	8001538 <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003aa:	f000 f911 	bl	80005d0 <Error_Handler>
  }
}
 80003ae:	bf00      	nop
 80003b0:	3740      	adds	r7, #64	; 0x40
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b08a      	sub	sp, #40	; 0x28
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003be:	f107 0320 	add.w	r3, r7, #32
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]
 80003d6:	615a      	str	r2, [r3, #20]
 80003d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003da:	4b22      	ldr	r3, [pc, #136]	; (8000464 <MX_TIM3_Init+0xac>)
 80003dc:	4a22      	ldr	r2, [pc, #136]	; (8000468 <MX_TIM3_Init+0xb0>)
 80003de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80003e0:	4b20      	ldr	r3, [pc, #128]	; (8000464 <MX_TIM3_Init+0xac>)
 80003e2:	2247      	movs	r2, #71	; 0x47
 80003e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e6:	4b1f      	ldr	r3, [pc, #124]	; (8000464 <MX_TIM3_Init+0xac>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80003ec:	4b1d      	ldr	r3, [pc, #116]	; (8000464 <MX_TIM3_Init+0xac>)
 80003ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <MX_TIM3_Init+0xac>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fa:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <MX_TIM3_Init+0xac>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000400:	4818      	ldr	r0, [pc, #96]	; (8000464 <MX_TIM3_Init+0xac>)
 8000402:	f001 fb01 	bl	8001a08 <HAL_TIM_PWM_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800040c:	f000 f8e0 	bl	80005d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000410:	2300      	movs	r3, #0
 8000412:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000418:	f107 0320 	add.w	r3, r7, #32
 800041c:	4619      	mov	r1, r3
 800041e:	4811      	ldr	r0, [pc, #68]	; (8000464 <MX_TIM3_Init+0xac>)
 8000420:	f001 ffe0 	bl	80023e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800042a:	f000 f8d1 	bl	80005d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800042e:	2360      	movs	r3, #96	; 0x60
 8000430:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000436:	2300      	movs	r3, #0
 8000438:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2204      	movs	r2, #4
 8000442:	4619      	mov	r1, r3
 8000444:	4807      	ldr	r0, [pc, #28]	; (8000464 <MX_TIM3_Init+0xac>)
 8000446:	f001 fcd9 	bl	8001dfc <HAL_TIM_PWM_ConfigChannel>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000450:	f000 f8be 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000454:	4803      	ldr	r0, [pc, #12]	; (8000464 <MX_TIM3_Init+0xac>)
 8000456:	f000 f917 	bl	8000688 <HAL_TIM_MspPostInit>

}
 800045a:	bf00      	nop
 800045c:	3728      	adds	r7, #40	; 0x28
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	2000007c 	.word	0x2000007c
 8000468:	40000400 	.word	0x40000400

0800046c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 8000472:	4a12      	ldr	r2, [pc, #72]	; (80004bc <MX_USART2_UART_Init+0x50>)
 8000474:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 8000478:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800047c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 8000486:	2200      	movs	r2, #0
 8000488:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 8000492:	220c      	movs	r2, #12
 8000494:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <MX_USART2_UART_Init+0x4c>)
 80004a4:	f002 f80e 	bl	80024c4 <HAL_UART_Init>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004ae:	f000 f88f 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	200000c4 	.word	0x200000c4
 80004bc:	40004400 	.word	0x40004400

080004c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d4:	4b2d      	ldr	r3, [pc, #180]	; (800058c <MX_GPIO_Init+0xcc>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a2c      	ldr	r2, [pc, #176]	; (800058c <MX_GPIO_Init+0xcc>)
 80004da:	f043 0310 	orr.w	r3, r3, #16
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b2a      	ldr	r3, [pc, #168]	; (800058c <MX_GPIO_Init+0xcc>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0310 	and.w	r3, r3, #16
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ec:	4b27      	ldr	r3, [pc, #156]	; (800058c <MX_GPIO_Init+0xcc>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a26      	ldr	r2, [pc, #152]	; (800058c <MX_GPIO_Init+0xcc>)
 80004f2:	f043 0320 	orr.w	r3, r3, #32
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b24      	ldr	r3, [pc, #144]	; (800058c <MX_GPIO_Init+0xcc>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0320 	and.w	r3, r3, #32
 8000500:	60bb      	str	r3, [r7, #8]
 8000502:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b21      	ldr	r3, [pc, #132]	; (800058c <MX_GPIO_Init+0xcc>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a20      	ldr	r2, [pc, #128]	; (800058c <MX_GPIO_Init+0xcc>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b1e      	ldr	r3, [pc, #120]	; (800058c <MX_GPIO_Init+0xcc>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <MX_GPIO_Init+0xcc>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a1a      	ldr	r2, [pc, #104]	; (800058c <MX_GPIO_Init+0xcc>)
 8000522:	f043 0308 	orr.w	r3, r3, #8
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b18      	ldr	r3, [pc, #96]	; (800058c <MX_GPIO_Init+0xcc>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0308 	and.w	r3, r3, #8
 8000530:	603b      	str	r3, [r7, #0]
 8000532:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2120      	movs	r1, #32
 8000538:	4815      	ldr	r0, [pc, #84]	; (8000590 <MX_GPIO_Init+0xd0>)
 800053a:	f000 fd41 	bl	8000fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800053e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <MX_GPIO_Init+0xd4>)
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	4619      	mov	r1, r3
 8000552:	4811      	ldr	r0, [pc, #68]	; (8000598 <MX_GPIO_Init+0xd8>)
 8000554:	f000 fbb0 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000558:	2320      	movs	r3, #32
 800055a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2302      	movs	r3, #2
 8000566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000570:	f000 fba2 	bl	8000cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2105      	movs	r1, #5
 8000578:	2028      	movs	r0, #40	; 0x28
 800057a:	f000 fac0 	bl	8000afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800057e:	2028      	movs	r0, #40	; 0x28
 8000580:	f000 fad9 	bl	8000b36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000584:	bf00      	nop
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	40010800 	.word	0x40010800
 8000594:	10110000 	.word	0x10110000
 8000598:	40011000 	.word	0x40011000

0800059c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f002 ff15 	bl	80033d4 <osDelay>
 80005aa:	e7fb      	b.n	80005a4 <StartDefaultTask+0x8>

080005ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d101      	bne.n	80005c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005be:	f000 f9cd 	bl	800095c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40000800 	.word	0x40000800

080005d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d4:	b672      	cpsid	i
}
 80005d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <Error_Handler+0x8>
	...

080005dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <HAL_MspInit+0x68>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <HAL_MspInit+0x68>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_MspInit+0x68>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_MspInit+0x68>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a11      	ldr	r2, [pc, #68]	; (8000644 <HAL_MspInit+0x68>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_MspInit+0x68>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	210f      	movs	r1, #15
 8000616:	f06f 0001 	mvn.w	r0, #1
 800061a:	f000 fa70 	bl	8000afe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HAL_MspInit+0x6c>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_MspInit+0x6c>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000
 8000648:	40010000 	.word	0x40010000

0800064c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a09      	ldr	r2, [pc, #36]	; (8000680 <HAL_TIM_PWM_MspInit+0x34>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d10b      	bne.n	8000676 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_TIM_PWM_MspInit+0x38>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	4a08      	ldr	r2, [pc, #32]	; (8000684 <HAL_TIM_PWM_MspInit+0x38>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	61d3      	str	r3, [r2, #28]
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_TIM_PWM_MspInit+0x38>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	40000400 	.word	0x40000400
 8000684:	40021000 	.word	0x40021000

08000688 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <HAL_TIM_MspPostInit+0x58>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d117      	bne.n	80006d8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <HAL_TIM_MspPostInit+0x5c>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <HAL_TIM_MspPostInit+0x5c>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <HAL_TIM_MspPostInit+0x5c>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <HAL_TIM_MspPostInit+0x60>)
 80006d4:	f000 faf0 	bl	8000cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40000400 	.word	0x40000400
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010800 	.word	0x40010800

080006ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a19      	ldr	r2, [pc, #100]	; (800076c <HAL_UART_MspInit+0x80>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d12b      	bne.n	8000764 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <HAL_UART_MspInit+0x84>)
 800070e:	69db      	ldr	r3, [r3, #28]
 8000710:	4a17      	ldr	r2, [pc, #92]	; (8000770 <HAL_UART_MspInit+0x84>)
 8000712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000716:	61d3      	str	r3, [r2, #28]
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_UART_MspInit+0x84>)
 800071a:	69db      	ldr	r3, [r3, #28]
 800071c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_UART_MspInit+0x84>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a11      	ldr	r2, [pc, #68]	; (8000770 <HAL_UART_MspInit+0x84>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <HAL_UART_MspInit+0x84>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0304 	and.w	r3, r3, #4
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800073c:	230c      	movs	r3, #12
 800073e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2302      	movs	r3, #2
 8000746:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	4619      	mov	r1, r3
 800074e:	4809      	ldr	r0, [pc, #36]	; (8000774 <HAL_UART_MspInit+0x88>)
 8000750:	f000 fab2 	bl	8000cb8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2105      	movs	r1, #5
 8000758:	2026      	movs	r0, #38	; 0x26
 800075a:	f000 f9d0 	bl	8000afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800075e:	2026      	movs	r0, #38	; 0x26
 8000760:	f000 f9e9 	bl	8000b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40004400 	.word	0x40004400
 8000770:	40021000 	.word	0x40021000
 8000774:	40010800 	.word	0x40010800

08000778 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08e      	sub	sp, #56	; 0x38
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000780:	2300      	movs	r3, #0
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000784:	2300      	movs	r3, #0
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000788:	2300      	movs	r3, #0
 800078a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800078e:	4b34      	ldr	r3, [pc, #208]	; (8000860 <HAL_InitTick+0xe8>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a33      	ldr	r2, [pc, #204]	; (8000860 <HAL_InitTick+0xe8>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <HAL_InitTick+0xe8>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007a6:	f107 0210 	add.w	r2, r7, #16
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 f831 	bl	8001818 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007b6:	6a3b      	ldr	r3, [r7, #32]
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d103      	bne.n	80007c8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007c0:	f001 f802 	bl	80017c8 <HAL_RCC_GetPCLK1Freq>
 80007c4:	6378      	str	r0, [r7, #52]	; 0x34
 80007c6:	e004      	b.n	80007d2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007c8:	f000 fffe 	bl	80017c8 <HAL_RCC_GetPCLK1Freq>
 80007cc:	4603      	mov	r3, r0
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d4:	4a23      	ldr	r2, [pc, #140]	; (8000864 <HAL_InitTick+0xec>)
 80007d6:	fba2 2303 	umull	r2, r3, r2, r3
 80007da:	0c9b      	lsrs	r3, r3, #18
 80007dc:	3b01      	subs	r3, #1
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <HAL_InitTick+0xf0>)
 80007e2:	4a22      	ldr	r2, [pc, #136]	; (800086c <HAL_InitTick+0xf4>)
 80007e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <HAL_InitTick+0xf0>)
 80007e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007ec:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80007ee:	4a1e      	ldr	r2, [pc, #120]	; (8000868 <HAL_InitTick+0xf0>)
 80007f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <HAL_InitTick+0xf0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <HAL_InitTick+0xf0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <HAL_InitTick+0xf0>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000806:	4818      	ldr	r0, [pc, #96]	; (8000868 <HAL_InitTick+0xf0>)
 8000808:	f001 f854 	bl	80018b4 <HAL_TIM_Base_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000812:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000816:	2b00      	cmp	r3, #0
 8000818:	d11b      	bne.n	8000852 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800081a:	4813      	ldr	r0, [pc, #76]	; (8000868 <HAL_InitTick+0xf0>)
 800081c:	f001 f8a2 	bl	8001964 <HAL_TIM_Base_Start_IT>
 8000820:	4603      	mov	r3, r0
 8000822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000826:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800082a:	2b00      	cmp	r3, #0
 800082c:	d111      	bne.n	8000852 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800082e:	201e      	movs	r0, #30
 8000830:	f000 f981 	bl	8000b36 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b0f      	cmp	r3, #15
 8000838:	d808      	bhi.n	800084c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800083a:	2200      	movs	r2, #0
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	201e      	movs	r0, #30
 8000840:	f000 f95d 	bl	8000afe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000844:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <HAL_InitTick+0xf8>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	e002      	b.n	8000852 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000852:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000856:	4618      	mov	r0, r3
 8000858:	3738      	adds	r7, #56	; 0x38
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000
 8000864:	431bde83 	.word	0x431bde83
 8000868:	20000174 	.word	0x20000174
 800086c:	40000800 	.word	0x40000800
 8000870:	20000004 	.word	0x20000004

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000878:	e7fe      	b.n	8000878 <NMI_Handler+0x4>

0800087a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <HardFault_Handler+0x4>

08000880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <MemManage_Handler+0x4>

08000886 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <UsageFault_Handler+0x4>

08000892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
	...

080008a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <TIM4_IRQHandler+0x10>)
 80008a6:	f001 f9a1 	bl	8001bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000174 	.word	0x20000174

080008b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <USART2_IRQHandler+0x10>)
 80008ba:	f001 fefb 	bl	80026b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000c4 	.word	0x200000c4

080008c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008d0:	f000 fb8e 	bl	8000ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e4:	f7ff fff8 	bl	80008d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e8:	480b      	ldr	r0, [pc, #44]	; (8000918 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008ea:	490c      	ldr	r1, [pc, #48]	; (800091c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008ec:	4a0c      	ldr	r2, [pc, #48]	; (8000920 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fe:	4a09      	ldr	r2, [pc, #36]	; (8000924 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000900:	4c09      	ldr	r4, [pc, #36]	; (8000928 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090e:	f005 fa85 	bl	8005e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000912:	f7ff fcc1 	bl	8000298 <main>
  bx lr
 8000916:	4770      	bx	lr
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000920:	080060fc 	.word	0x080060fc
  ldr r2, =_sbss
 8000924:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000928:	20001ce0 	.word	0x20001ce0

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_Init+0x28>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a07      	ldr	r2, [pc, #28]	; (8000958 <HAL_Init+0x28>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 f8d1 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000946:	200f      	movs	r0, #15
 8000948:	f7ff ff16 	bl	8000778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800094c:	f7ff fe46 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40022000 	.word	0x40022000

0800095c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x1c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x20>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a03      	ldr	r2, [pc, #12]	; (800097c <HAL_IncTick+0x20>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	20000008 	.word	0x20000008
 800097c:	200001bc 	.word	0x200001bc

08000980 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b02      	ldr	r3, [pc, #8]	; (8000990 <HAL_GetTick+0x10>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	200001bc 	.word	0x200001bc

08000994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <__NVIC_GetPriorityGrouping+0x18>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	f003 0307 	and.w	r3, r3, #7
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	db0b      	blt.n	8000a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f003 021f 	and.w	r2, r3, #31
 8000a10:	4906      	ldr	r1, [pc, #24]	; (8000a2c <__NVIC_EnableIRQ+0x34>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	095b      	lsrs	r3, r3, #5
 8000a18:	2001      	movs	r0, #1
 8000a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	e000e100 	.word	0xe000e100

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	db0a      	blt.n	8000a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	490c      	ldr	r1, [pc, #48]	; (8000a7c <__NVIC_SetPriority+0x4c>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	0112      	lsls	r2, r2, #4
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	440b      	add	r3, r1
 8000a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a58:	e00a      	b.n	8000a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4908      	ldr	r1, [pc, #32]	; (8000a80 <__NVIC_SetPriority+0x50>)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	3b04      	subs	r3, #4
 8000a68:	0112      	lsls	r2, r2, #4
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	761a      	strb	r2, [r3, #24]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	f1c3 0307 	rsb	r3, r3, #7
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	bf28      	it	cs
 8000aa2:	2304      	movcs	r3, #4
 8000aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d902      	bls.n	8000ab4 <NVIC_EncodePriority+0x30>
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3b03      	subs	r3, #3
 8000ab2:	e000      	b.n	8000ab6 <NVIC_EncodePriority+0x32>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	43d9      	mvns	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	4313      	orrs	r3, r2
         );
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3724      	adds	r7, #36	; 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff4f 	bl	8000994 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b10:	f7ff ff64 	bl	80009dc <__NVIC_GetPriorityGrouping>
 8000b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	6978      	ldr	r0, [r7, #20]
 8000b1c:	f7ff ffb2 	bl	8000a84 <NVIC_EncodePriority>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff81 	bl	8000a30 <__NVIC_SetPriority>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff57 	bl	80009f8 <__NVIC_EnableIRQ>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b085      	sub	sp, #20
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d008      	beq.n	8000b7c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e020      	b.n	8000bbe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f022 020e 	bic.w	r2, r2, #14
 8000b8a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f022 0201 	bic.w	r2, r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8000baa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d005      	beq.n	8000bec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2204      	movs	r2, #4
 8000be4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	73fb      	strb	r3, [r7, #15]
 8000bea:	e051      	b.n	8000c90 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f022 020e 	bic.w	r2, r2, #14
 8000bfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f022 0201 	bic.w	r2, r2, #1
 8000c0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a22      	ldr	r2, [pc, #136]	; (8000c9c <HAL_DMA_Abort_IT+0xd4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d029      	beq.n	8000c6a <HAL_DMA_Abort_IT+0xa2>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a21      	ldr	r2, [pc, #132]	; (8000ca0 <HAL_DMA_Abort_IT+0xd8>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d022      	beq.n	8000c66 <HAL_DMA_Abort_IT+0x9e>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a1f      	ldr	r2, [pc, #124]	; (8000ca4 <HAL_DMA_Abort_IT+0xdc>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d01a      	beq.n	8000c60 <HAL_DMA_Abort_IT+0x98>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ca8 <HAL_DMA_Abort_IT+0xe0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d012      	beq.n	8000c5a <HAL_DMA_Abort_IT+0x92>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a1c      	ldr	r2, [pc, #112]	; (8000cac <HAL_DMA_Abort_IT+0xe4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d00a      	beq.n	8000c54 <HAL_DMA_Abort_IT+0x8c>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <HAL_DMA_Abort_IT+0xe8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d102      	bne.n	8000c4e <HAL_DMA_Abort_IT+0x86>
 8000c48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c4c:	e00e      	b.n	8000c6c <HAL_DMA_Abort_IT+0xa4>
 8000c4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c52:	e00b      	b.n	8000c6c <HAL_DMA_Abort_IT+0xa4>
 8000c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c58:	e008      	b.n	8000c6c <HAL_DMA_Abort_IT+0xa4>
 8000c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5e:	e005      	b.n	8000c6c <HAL_DMA_Abort_IT+0xa4>
 8000c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c64:	e002      	b.n	8000c6c <HAL_DMA_Abort_IT+0xa4>
 8000c66:	2310      	movs	r3, #16
 8000c68:	e000      	b.n	8000c6c <HAL_DMA_Abort_IT+0xa4>
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	4a11      	ldr	r2, [pc, #68]	; (8000cb4 <HAL_DMA_Abort_IT+0xec>)
 8000c6e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2201      	movs	r2, #1
 8000c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	4798      	blx	r3
    } 
  }
  return status;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40020008 	.word	0x40020008
 8000ca0:	4002001c 	.word	0x4002001c
 8000ca4:	40020030 	.word	0x40020030
 8000ca8:	40020044 	.word	0x40020044
 8000cac:	40020058 	.word	0x40020058
 8000cb0:	4002006c 	.word	0x4002006c
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b08b      	sub	sp, #44	; 0x2c
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cca:	e169      	b.n	8000fa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	69fa      	ldr	r2, [r7, #28]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f040 8158 	bne.w	8000f9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	4a9a      	ldr	r2, [pc, #616]	; (8000f58 <HAL_GPIO_Init+0x2a0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d05e      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
 8000cf4:	4a98      	ldr	r2, [pc, #608]	; (8000f58 <HAL_GPIO_Init+0x2a0>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d875      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000cfa:	4a98      	ldr	r2, [pc, #608]	; (8000f5c <HAL_GPIO_Init+0x2a4>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d058      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
 8000d00:	4a96      	ldr	r2, [pc, #600]	; (8000f5c <HAL_GPIO_Init+0x2a4>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d86f      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000d06:	4a96      	ldr	r2, [pc, #600]	; (8000f60 <HAL_GPIO_Init+0x2a8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d052      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
 8000d0c:	4a94      	ldr	r2, [pc, #592]	; (8000f60 <HAL_GPIO_Init+0x2a8>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d869      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000d12:	4a94      	ldr	r2, [pc, #592]	; (8000f64 <HAL_GPIO_Init+0x2ac>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d04c      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
 8000d18:	4a92      	ldr	r2, [pc, #584]	; (8000f64 <HAL_GPIO_Init+0x2ac>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d863      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000d1e:	4a92      	ldr	r2, [pc, #584]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d046      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
 8000d24:	4a90      	ldr	r2, [pc, #576]	; (8000f68 <HAL_GPIO_Init+0x2b0>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d85d      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000d2a:	2b12      	cmp	r3, #18
 8000d2c:	d82a      	bhi.n	8000d84 <HAL_GPIO_Init+0xcc>
 8000d2e:	2b12      	cmp	r3, #18
 8000d30:	d859      	bhi.n	8000de6 <HAL_GPIO_Init+0x12e>
 8000d32:	a201      	add	r2, pc, #4	; (adr r2, 8000d38 <HAL_GPIO_Init+0x80>)
 8000d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d38:	08000db3 	.word	0x08000db3
 8000d3c:	08000d8d 	.word	0x08000d8d
 8000d40:	08000d9f 	.word	0x08000d9f
 8000d44:	08000de1 	.word	0x08000de1
 8000d48:	08000de7 	.word	0x08000de7
 8000d4c:	08000de7 	.word	0x08000de7
 8000d50:	08000de7 	.word	0x08000de7
 8000d54:	08000de7 	.word	0x08000de7
 8000d58:	08000de7 	.word	0x08000de7
 8000d5c:	08000de7 	.word	0x08000de7
 8000d60:	08000de7 	.word	0x08000de7
 8000d64:	08000de7 	.word	0x08000de7
 8000d68:	08000de7 	.word	0x08000de7
 8000d6c:	08000de7 	.word	0x08000de7
 8000d70:	08000de7 	.word	0x08000de7
 8000d74:	08000de7 	.word	0x08000de7
 8000d78:	08000de7 	.word	0x08000de7
 8000d7c:	08000d95 	.word	0x08000d95
 8000d80:	08000da9 	.word	0x08000da9
 8000d84:	4a79      	ldr	r2, [pc, #484]	; (8000f6c <HAL_GPIO_Init+0x2b4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d013      	beq.n	8000db2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d8a:	e02c      	b.n	8000de6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	623b      	str	r3, [r7, #32]
          break;
 8000d92:	e029      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	623b      	str	r3, [r7, #32]
          break;
 8000d9c:	e024      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	3308      	adds	r3, #8
 8000da4:	623b      	str	r3, [r7, #32]
          break;
 8000da6:	e01f      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	330c      	adds	r3, #12
 8000dae:	623b      	str	r3, [r7, #32]
          break;
 8000db0:	e01a      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d102      	bne.n	8000dc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	623b      	str	r3, [r7, #32]
          break;
 8000dbe:	e013      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d105      	bne.n	8000dd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dc8:	2308      	movs	r3, #8
 8000dca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69fa      	ldr	r2, [r7, #28]
 8000dd0:	611a      	str	r2, [r3, #16]
          break;
 8000dd2:	e009      	b.n	8000de8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	615a      	str	r2, [r3, #20]
          break;
 8000dde:	e003      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
          break;
 8000de4:	e000      	b.n	8000de8 <HAL_GPIO_Init+0x130>
          break;
 8000de6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	2bff      	cmp	r3, #255	; 0xff
 8000dec:	d801      	bhi.n	8000df2 <HAL_GPIO_Init+0x13a>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	e001      	b.n	8000df6 <HAL_GPIO_Init+0x13e>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3304      	adds	r3, #4
 8000df6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	2bff      	cmp	r3, #255	; 0xff
 8000dfc:	d802      	bhi.n	8000e04 <HAL_GPIO_Init+0x14c>
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	e002      	b.n	8000e0a <HAL_GPIO_Init+0x152>
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	3b08      	subs	r3, #8
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	210f      	movs	r1, #15
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	6a39      	ldr	r1, [r7, #32]
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	431a      	orrs	r2, r3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 80b1 	beq.w	8000f9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e38:	4b4d      	ldr	r3, [pc, #308]	; (8000f70 <HAL_GPIO_Init+0x2b8>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a4c      	ldr	r2, [pc, #304]	; (8000f70 <HAL_GPIO_Init+0x2b8>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b4a      	ldr	r3, [pc, #296]	; (8000f70 <HAL_GPIO_Init+0x2b8>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e50:	4a48      	ldr	r2, [pc, #288]	; (8000f74 <HAL_GPIO_Init+0x2bc>)
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	3302      	adds	r3, #2
 8000e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a40      	ldr	r2, [pc, #256]	; (8000f78 <HAL_GPIO_Init+0x2c0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d013      	beq.n	8000ea4 <HAL_GPIO_Init+0x1ec>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a3f      	ldr	r2, [pc, #252]	; (8000f7c <HAL_GPIO_Init+0x2c4>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d00d      	beq.n	8000ea0 <HAL_GPIO_Init+0x1e8>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a3e      	ldr	r2, [pc, #248]	; (8000f80 <HAL_GPIO_Init+0x2c8>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d007      	beq.n	8000e9c <HAL_GPIO_Init+0x1e4>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a3d      	ldr	r2, [pc, #244]	; (8000f84 <HAL_GPIO_Init+0x2cc>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d101      	bne.n	8000e98 <HAL_GPIO_Init+0x1e0>
 8000e94:	2303      	movs	r3, #3
 8000e96:	e006      	b.n	8000ea6 <HAL_GPIO_Init+0x1ee>
 8000e98:	2304      	movs	r3, #4
 8000e9a:	e004      	b.n	8000ea6 <HAL_GPIO_Init+0x1ee>
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	e002      	b.n	8000ea6 <HAL_GPIO_Init+0x1ee>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <HAL_GPIO_Init+0x1ee>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea8:	f002 0203 	and.w	r2, r2, #3
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	4093      	lsls	r3, r2
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eb6:	492f      	ldr	r1, [pc, #188]	; (8000f74 <HAL_GPIO_Init+0x2bc>)
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d006      	beq.n	8000ede <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	492c      	ldr	r1, [pc, #176]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	608b      	str	r3, [r1, #8]
 8000edc:	e006      	b.n	8000eec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ede:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	4928      	ldr	r1, [pc, #160]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ef8:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	4922      	ldr	r1, [pc, #136]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	60cb      	str	r3, [r1, #12]
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	491e      	ldr	r1, [pc, #120]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d006      	beq.n	8000f2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	4918      	ldr	r1, [pc, #96]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	604b      	str	r3, [r1, #4]
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	4914      	ldr	r1, [pc, #80]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d021      	beq.n	8000f8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	490e      	ldr	r1, [pc, #56]	; (8000f88 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	600b      	str	r3, [r1, #0]
 8000f54:	e021      	b.n	8000f9a <HAL_GPIO_Init+0x2e2>
 8000f56:	bf00      	nop
 8000f58:	10320000 	.word	0x10320000
 8000f5c:	10310000 	.word	0x10310000
 8000f60:	10220000 	.word	0x10220000
 8000f64:	10210000 	.word	0x10210000
 8000f68:	10120000 	.word	0x10120000
 8000f6c:	10110000 	.word	0x10110000
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000
 8000f78:	40010800 	.word	0x40010800
 8000f7c:	40010c00 	.word	0x40010c00
 8000f80:	40011000 	.word	0x40011000
 8000f84:	40011400 	.word	0x40011400
 8000f88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_GPIO_Init+0x304>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	4909      	ldr	r1, [pc, #36]	; (8000fbc <HAL_GPIO_Init+0x304>)
 8000f96:	4013      	ands	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f47f ae8e 	bne.w	8000ccc <HAL_GPIO_Init+0x14>
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	372c      	adds	r7, #44	; 0x2c
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	40010400 	.word	0x40010400

08000fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd0:	787b      	ldrb	r3, [r7, #1]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fd6:	887a      	ldrh	r2, [r7, #2]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fdc:	e003      	b.n	8000fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	041a      	lsls	r2, r3, #16
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	611a      	str	r2, [r3, #16]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ffc:	695a      	ldr	r2, [r3, #20]
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	4013      	ands	r3, r2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d006      	beq.n	8001014 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f806 	bl	8001020 <HAL_GPIO_EXTI_Callback>
  }
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40010400 	.word	0x40010400

08001020 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e272      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 8087 	beq.w	8001162 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001054:	4b92      	ldr	r3, [pc, #584]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	2b04      	cmp	r3, #4
 800105e:	d00c      	beq.n	800107a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001060:	4b8f      	ldr	r3, [pc, #572]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 030c 	and.w	r3, r3, #12
 8001068:	2b08      	cmp	r3, #8
 800106a:	d112      	bne.n	8001092 <HAL_RCC_OscConfig+0x5e>
 800106c:	4b8c      	ldr	r3, [pc, #560]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001078:	d10b      	bne.n	8001092 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107a:	4b89      	ldr	r3, [pc, #548]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d06c      	beq.n	8001160 <HAL_RCC_OscConfig+0x12c>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d168      	bne.n	8001160 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e24c      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109a:	d106      	bne.n	80010aa <HAL_RCC_OscConfig+0x76>
 800109c:	4b80      	ldr	r3, [pc, #512]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a7f      	ldr	r2, [pc, #508]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	e02e      	b.n	8001108 <HAL_RCC_OscConfig+0xd4>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10c      	bne.n	80010cc <HAL_RCC_OscConfig+0x98>
 80010b2:	4b7b      	ldr	r3, [pc, #492]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a7a      	ldr	r2, [pc, #488]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	4b78      	ldr	r3, [pc, #480]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a77      	ldr	r2, [pc, #476]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e01d      	b.n	8001108 <HAL_RCC_OscConfig+0xd4>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010d4:	d10c      	bne.n	80010f0 <HAL_RCC_OscConfig+0xbc>
 80010d6:	4b72      	ldr	r3, [pc, #456]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a71      	ldr	r2, [pc, #452]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b6f      	ldr	r3, [pc, #444]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a6e      	ldr	r2, [pc, #440]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e00b      	b.n	8001108 <HAL_RCC_OscConfig+0xd4>
 80010f0:	4b6b      	ldr	r3, [pc, #428]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a6a      	ldr	r2, [pc, #424]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	4b68      	ldr	r3, [pc, #416]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a67      	ldr	r2, [pc, #412]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 8001102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001106:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d013      	beq.n	8001138 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fc36 	bl	8000980 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001118:	f7ff fc32 	bl	8000980 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b64      	cmp	r3, #100	; 0x64
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e200      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112a:	4b5d      	ldr	r3, [pc, #372]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0f0      	beq.n	8001118 <HAL_RCC_OscConfig+0xe4>
 8001136:	e014      	b.n	8001162 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001138:	f7ff fc22 	bl	8000980 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001140:	f7ff fc1e 	bl	8000980 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b64      	cmp	r3, #100	; 0x64
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e1ec      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001152:	4b53      	ldr	r3, [pc, #332]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f0      	bne.n	8001140 <HAL_RCC_OscConfig+0x10c>
 800115e:	e000      	b.n	8001162 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d063      	beq.n	8001236 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800116e:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00b      	beq.n	8001192 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800117a:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 030c 	and.w	r3, r3, #12
 8001182:	2b08      	cmp	r3, #8
 8001184:	d11c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x18c>
 8001186:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d116      	bne.n	80011c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001192:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d005      	beq.n	80011aa <HAL_RCC_OscConfig+0x176>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d001      	beq.n	80011aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e1c0      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	4939      	ldr	r1, [pc, #228]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011be:	e03a      	b.n	8001236 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d020      	beq.n	800120a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c8:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ce:	f7ff fbd7 	bl	8000980 <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d6:	f7ff fbd3 	bl	8000980 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e1a1      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e8:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f0      	beq.n	80011d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f4:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	4927      	ldr	r1, [pc, #156]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 8001204:	4313      	orrs	r3, r2
 8001206:	600b      	str	r3, [r1, #0]
 8001208:	e015      	b.n	8001236 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800120a:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <HAL_RCC_OscConfig+0x270>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fbb6 	bl	8000980 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001218:	f7ff fbb2 	bl	8000980 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e180      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	2b00      	cmp	r3, #0
 8001240:	d03a      	beq.n	80012b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d019      	beq.n	800127e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <HAL_RCC_OscConfig+0x274>)
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001250:	f7ff fb96 	bl	8000980 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001258:	f7ff fb92 	bl	8000980 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e160      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_RCC_OscConfig+0x26c>)
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001276:	2001      	movs	r0, #1
 8001278:	f000 fafe 	bl	8001878 <RCC_Delay>
 800127c:	e01c      	b.n	80012b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_RCC_OscConfig+0x274>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001284:	f7ff fb7c 	bl	8000980 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800128a:	e00f      	b.n	80012ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800128c:	f7ff fb78 	bl	8000980 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d908      	bls.n	80012ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e146      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	42420000 	.word	0x42420000
 80012a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ac:	4b92      	ldr	r3, [pc, #584]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1e9      	bne.n	800128c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80a6 	beq.w	8001412 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ca:	4b8b      	ldr	r3, [pc, #556]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10d      	bne.n	80012f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	4b88      	ldr	r3, [pc, #544]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	4a87      	ldr	r2, [pc, #540]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e0:	61d3      	str	r3, [r2, #28]
 80012e2:	4b85      	ldr	r3, [pc, #532]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ee:	2301      	movs	r3, #1
 80012f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f2:	4b82      	ldr	r3, [pc, #520]	; (80014fc <HAL_RCC_OscConfig+0x4c8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d118      	bne.n	8001330 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012fe:	4b7f      	ldr	r3, [pc, #508]	; (80014fc <HAL_RCC_OscConfig+0x4c8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a7e      	ldr	r2, [pc, #504]	; (80014fc <HAL_RCC_OscConfig+0x4c8>)
 8001304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800130a:	f7ff fb39 	bl	8000980 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001312:	f7ff fb35 	bl	8000980 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b64      	cmp	r3, #100	; 0x64
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e103      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	4b75      	ldr	r3, [pc, #468]	; (80014fc <HAL_RCC_OscConfig+0x4c8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d106      	bne.n	8001346 <HAL_RCC_OscConfig+0x312>
 8001338:	4b6f      	ldr	r3, [pc, #444]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	4a6e      	ldr	r2, [pc, #440]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6213      	str	r3, [r2, #32]
 8001344:	e02d      	b.n	80013a2 <HAL_RCC_OscConfig+0x36e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x334>
 800134e:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4a69      	ldr	r2, [pc, #420]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	6213      	str	r3, [r2, #32]
 800135a:	4b67      	ldr	r3, [pc, #412]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	4a66      	ldr	r2, [pc, #408]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 8001360:	f023 0304 	bic.w	r3, r3, #4
 8001364:	6213      	str	r3, [r2, #32]
 8001366:	e01c      	b.n	80013a2 <HAL_RCC_OscConfig+0x36e>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b05      	cmp	r3, #5
 800136e:	d10c      	bne.n	800138a <HAL_RCC_OscConfig+0x356>
 8001370:	4b61      	ldr	r3, [pc, #388]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	4a60      	ldr	r2, [pc, #384]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	6213      	str	r3, [r2, #32]
 800137c:	4b5e      	ldr	r3, [pc, #376]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	4a5d      	ldr	r2, [pc, #372]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6213      	str	r3, [r2, #32]
 8001388:	e00b      	b.n	80013a2 <HAL_RCC_OscConfig+0x36e>
 800138a:	4b5b      	ldr	r3, [pc, #364]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4a5a      	ldr	r2, [pc, #360]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 8001390:	f023 0301 	bic.w	r3, r3, #1
 8001394:	6213      	str	r3, [r2, #32]
 8001396:	4b58      	ldr	r3, [pc, #352]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	4a57      	ldr	r2, [pc, #348]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 800139c:	f023 0304 	bic.w	r3, r3, #4
 80013a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d015      	beq.n	80013d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fae9 	bl	8000980 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b2:	f7ff fae5 	bl	8000980 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e0b1      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c8:	4b4b      	ldr	r3, [pc, #300]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0ee      	beq.n	80013b2 <HAL_RCC_OscConfig+0x37e>
 80013d4:	e014      	b.n	8001400 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d6:	f7ff fad3 	bl	8000980 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013dc:	e00a      	b.n	80013f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013de:	f7ff facf 	bl	8000980 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e09b      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f4:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1ee      	bne.n	80013de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d105      	bne.n	8001412 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001406:	4b3c      	ldr	r3, [pc, #240]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a3b      	ldr	r2, [pc, #236]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 800140c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001410:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 8087 	beq.w	800152a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800141c:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	2b08      	cmp	r3, #8
 8001426:	d061      	beq.n	80014ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d146      	bne.n	80014be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001430:	4b33      	ldr	r3, [pc, #204]	; (8001500 <HAL_RCC_OscConfig+0x4cc>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff faa3 	bl	8000980 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143e:	f7ff fa9f 	bl	8000980 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e06d      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001450:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001464:	d108      	bne.n	8001478 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	4921      	ldr	r1, [pc, #132]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a19      	ldr	r1, [r3, #32]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	430b      	orrs	r3, r1
 800148a:	491b      	ldr	r1, [pc, #108]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_RCC_OscConfig+0x4cc>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fa73 	bl	8000980 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149e:	f7ff fa6f 	bl	8000980 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e03d      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x46a>
 80014bc:	e035      	b.n	800152a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <HAL_RCC_OscConfig+0x4cc>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fa5c 	bl	8000980 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014cc:	f7ff fa58 	bl	8000980 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e026      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x498>
 80014ea:	e01e      	b.n	800152a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d107      	bne.n	8001504 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e019      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40007000 	.word	0x40007000
 8001500:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_RCC_OscConfig+0x500>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	429a      	cmp	r2, r3
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	429a      	cmp	r2, r3
 8001524:	d001      	beq.n	800152a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000

08001538 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0d0      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800154c:	4b6a      	ldr	r3, [pc, #424]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d910      	bls.n	800157c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b67      	ldr	r3, [pc, #412]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 0207 	bic.w	r2, r3, #7
 8001562:	4965      	ldr	r1, [pc, #404]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	4b63      	ldr	r3, [pc, #396]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0b8      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d020      	beq.n	80015ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001594:	4b59      	ldr	r3, [pc, #356]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	4a58      	ldr	r2, [pc, #352]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 800159a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800159e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015ac:	4b53      	ldr	r3, [pc, #332]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4a52      	ldr	r2, [pc, #328]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b8:	4b50      	ldr	r3, [pc, #320]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	494d      	ldr	r1, [pc, #308]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d040      	beq.n	8001658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d107      	bne.n	80015ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	4b47      	ldr	r3, [pc, #284]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d115      	bne.n	8001616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e07f      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f6:	4b41      	ldr	r3, [pc, #260]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e073      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001606:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e06b      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001616:	4b39      	ldr	r3, [pc, #228]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f023 0203 	bic.w	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4936      	ldr	r1, [pc, #216]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001628:	f7ff f9aa 	bl	8000980 <HAL_GetTick>
 800162c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162e:	e00a      	b.n	8001646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001630:	f7ff f9a6 	bl	8000980 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e053      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001646:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 020c 	and.w	r2, r3, #12
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	429a      	cmp	r2, r3
 8001656:	d1eb      	bne.n	8001630 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001658:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d210      	bcs.n	8001688 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 0207 	bic.w	r2, r3, #7
 800166e:	4922      	ldr	r1, [pc, #136]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d001      	beq.n	8001688 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e032      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d008      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	4916      	ldr	r1, [pc, #88]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d009      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	490e      	ldr	r1, [pc, #56]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016c6:	f000 f821 	bl	800170c <HAL_RCC_GetSysClockFreq>
 80016ca:	4602      	mov	r2, r0
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	490a      	ldr	r1, [pc, #40]	; (8001700 <HAL_RCC_ClockConfig+0x1c8>)
 80016d8:	5ccb      	ldrb	r3, [r1, r3]
 80016da:	fa22 f303 	lsr.w	r3, r2, r3
 80016de:	4a09      	ldr	r2, [pc, #36]	; (8001704 <HAL_RCC_ClockConfig+0x1cc>)
 80016e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_RCC_ClockConfig+0x1d0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff f846 	bl	8000778 <HAL_InitTick>

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40022000 	.word	0x40022000
 80016fc:	40021000 	.word	0x40021000
 8001700:	08005fc8 	.word	0x08005fc8
 8001704:	20000000 	.word	0x20000000
 8001708:	20000004 	.word	0x20000004

0800170c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b04      	cmp	r3, #4
 8001734:	d002      	beq.n	800173c <HAL_RCC_GetSysClockFreq+0x30>
 8001736:	2b08      	cmp	r3, #8
 8001738:	d003      	beq.n	8001742 <HAL_RCC_GetSysClockFreq+0x36>
 800173a:	e027      	b.n	800178c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800173e:	613b      	str	r3, [r7, #16]
      break;
 8001740:	e027      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	0c9b      	lsrs	r3, r3, #18
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800174c:	5cd3      	ldrb	r3, [r2, r3]
 800174e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d010      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	0c5b      	lsrs	r3, r3, #17
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	4a11      	ldr	r2, [pc, #68]	; (80017ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001766:	5cd3      	ldrb	r3, [r2, r3]
 8001768:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800176e:	fb03 f202 	mul.w	r2, r3, r2
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	fbb2 f3f3 	udiv	r3, r2, r3
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e004      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001780:	fb02 f303 	mul.w	r3, r2, r3
 8001784:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	613b      	str	r3, [r7, #16]
      break;
 800178a:	e002      	b.n	8001792 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800178e:	613b      	str	r3, [r7, #16]
      break;
 8001790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001792:	693b      	ldr	r3, [r7, #16]
}
 8001794:	4618      	mov	r0, r3
 8001796:	371c      	adds	r7, #28
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	007a1200 	.word	0x007a1200
 80017a8:	08005fe0 	.word	0x08005fe0
 80017ac:	08005ff0 	.word	0x08005ff0
 80017b0:	003d0900 	.word	0x003d0900

080017b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b8:	4b02      	ldr	r3, [pc, #8]	; (80017c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	20000000 	.word	0x20000000

080017c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017cc:	f7ff fff2 	bl	80017b4 <HAL_RCC_GetHCLKFreq>
 80017d0:	4602      	mov	r2, r0
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	4903      	ldr	r1, [pc, #12]	; (80017ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80017de:	5ccb      	ldrb	r3, [r1, r3]
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000
 80017ec:	08005fd8 	.word	0x08005fd8

080017f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017f4:	f7ff ffde 	bl	80017b4 <HAL_RCC_GetHCLKFreq>
 80017f8:	4602      	mov	r2, r0
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	0adb      	lsrs	r3, r3, #11
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	4903      	ldr	r1, [pc, #12]	; (8001814 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001806:	5ccb      	ldrb	r3, [r1, r3]
 8001808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800180c:	4618      	mov	r0, r3
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000
 8001814:	08005fd8 	.word	0x08005fd8

08001818 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	220f      	movs	r2, #15
 8001826:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_RCC_GetClockConfig+0x58>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0203 	and.w	r2, r3, #3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_RCC_GetClockConfig+0x58>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_RCC_GetClockConfig+0x58>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_RCC_GetClockConfig+0x58>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	08db      	lsrs	r3, r3, #3
 8001852:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_RCC_GetClockConfig+0x5c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0207 	and.w	r2, r3, #7
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	40021000 	.word	0x40021000
 8001874:	40022000 	.word	0x40022000

08001878 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <RCC_Delay+0x34>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <RCC_Delay+0x38>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	0a5b      	lsrs	r3, r3, #9
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001894:	bf00      	nop
  }
  while (Delay --);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1e5a      	subs	r2, r3, #1
 800189a:	60fa      	str	r2, [r7, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f9      	bne.n	8001894 <RCC_Delay+0x1c>
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	20000000 	.word	0x20000000
 80018b0:	10624dd3 	.word	0x10624dd3

080018b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e041      	b.n	800194a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f839 	bl	8001952 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3304      	adds	r3, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4610      	mov	r0, r2
 80018f4:	f000 fb68 	bl	8001fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b01      	cmp	r3, #1
 8001976:	d001      	beq.n	800197c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e03a      	b.n	80019f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a18      	ldr	r2, [pc, #96]	; (80019fc <HAL_TIM_Base_Start_IT+0x98>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d00e      	beq.n	80019bc <HAL_TIM_Base_Start_IT+0x58>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a6:	d009      	beq.n	80019bc <HAL_TIM_Base_Start_IT+0x58>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <HAL_TIM_Base_Start_IT+0x9c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d004      	beq.n	80019bc <HAL_TIM_Base_Start_IT+0x58>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a13      	ldr	r2, [pc, #76]	; (8001a04 <HAL_TIM_Base_Start_IT+0xa0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d111      	bne.n	80019e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b06      	cmp	r3, #6
 80019cc:	d010      	beq.n	80019f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 0201 	orr.w	r2, r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019de:	e007      	b.n	80019f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	40012c00 	.word	0x40012c00
 8001a00:	40000400 	.word	0x40000400
 8001a04:	40000800 	.word	0x40000800

08001a08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e041      	b.n	8001a9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d106      	bne.n	8001a34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7fe fe0c 	bl	800064c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3304      	adds	r3, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4610      	mov	r0, r2
 8001a48:	f000 fabe 	bl	8001fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <HAL_TIM_PWM_Start+0x24>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	bf14      	ite	ne
 8001ac4:	2301      	movne	r3, #1
 8001ac6:	2300      	moveq	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	e022      	b.n	8001b12 <HAL_TIM_PWM_Start+0x6a>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d109      	bne.n	8001ae6 <HAL_TIM_PWM_Start+0x3e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	bf14      	ite	ne
 8001ade:	2301      	movne	r3, #1
 8001ae0:	2300      	moveq	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	e015      	b.n	8001b12 <HAL_TIM_PWM_Start+0x6a>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d109      	bne.n	8001b00 <HAL_TIM_PWM_Start+0x58>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	bf14      	ite	ne
 8001af8:	2301      	movne	r3, #1
 8001afa:	2300      	moveq	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	e008      	b.n	8001b12 <HAL_TIM_PWM_Start+0x6a>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	bf14      	ite	ne
 8001b0c:	2301      	movne	r3, #1
 8001b0e:	2300      	moveq	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e05e      	b.n	8001bd8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d104      	bne.n	8001b2a <HAL_TIM_PWM_Start+0x82>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b28:	e013      	b.n	8001b52 <HAL_TIM_PWM_Start+0xaa>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d104      	bne.n	8001b3a <HAL_TIM_PWM_Start+0x92>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b38:	e00b      	b.n	8001b52 <HAL_TIM_PWM_Start+0xaa>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d104      	bne.n	8001b4a <HAL_TIM_PWM_Start+0xa2>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b48:	e003      	b.n	8001b52 <HAL_TIM_PWM_Start+0xaa>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2201      	movs	r2, #1
 8001b58:	6839      	ldr	r1, [r7, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 fc1e 	bl	800239c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1e      	ldr	r2, [pc, #120]	; (8001be0 <HAL_TIM_PWM_Start+0x138>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d107      	bne.n	8001b7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a18      	ldr	r2, [pc, #96]	; (8001be0 <HAL_TIM_PWM_Start+0x138>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00e      	beq.n	8001ba2 <HAL_TIM_PWM_Start+0xfa>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8c:	d009      	beq.n	8001ba2 <HAL_TIM_PWM_Start+0xfa>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <HAL_TIM_PWM_Start+0x13c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d004      	beq.n	8001ba2 <HAL_TIM_PWM_Start+0xfa>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <HAL_TIM_PWM_Start+0x140>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d111      	bne.n	8001bc6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b06      	cmp	r3, #6
 8001bb2:	d010      	beq.n	8001bd6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0201 	orr.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc4:	e007      	b.n	8001bd6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40012c00 	.word	0x40012c00
 8001be4:	40000400 	.word	0x40000400
 8001be8:	40000800 	.word	0x40000800

08001bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d122      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d11b      	bne.n	8001c48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0202 	mvn.w	r2, #2
 8001c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f9af 	bl	8001f92 <HAL_TIM_IC_CaptureCallback>
 8001c34:	e005      	b.n	8001c42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f9a2 	bl	8001f80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f9b1 	bl	8001fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d122      	bne.n	8001c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d11b      	bne.n	8001c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0204 	mvn.w	r2, #4
 8001c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2202      	movs	r2, #2
 8001c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f985 	bl	8001f92 <HAL_TIM_IC_CaptureCallback>
 8001c88:	e005      	b.n	8001c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f978 	bl	8001f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f987 	bl	8001fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d122      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d11b      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0208 	mvn.w	r2, #8
 8001cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f95b 	bl	8001f92 <HAL_TIM_IC_CaptureCallback>
 8001cdc:	e005      	b.n	8001cea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f94e 	bl	8001f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f95d 	bl	8001fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d122      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	2b10      	cmp	r3, #16
 8001d0a:	d11b      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0210 	mvn.w	r2, #16
 8001d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2208      	movs	r2, #8
 8001d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f931 	bl	8001f92 <HAL_TIM_IC_CaptureCallback>
 8001d30:	e005      	b.n	8001d3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f924 	bl	8001f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f933 	bl	8001fa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d10e      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d107      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0201 	mvn.w	r2, #1
 8001d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe fc1e 	bl	80005ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7a:	2b80      	cmp	r3, #128	; 0x80
 8001d7c:	d10e      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d88:	2b80      	cmp	r3, #128	; 0x80
 8001d8a:	d107      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fb8b 	bl	80024b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da6:	2b40      	cmp	r3, #64	; 0x40
 8001da8:	d10e      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db4:	2b40      	cmp	r3, #64	; 0x40
 8001db6:	d107      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8f7 	bl	8001fb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b20      	cmp	r3, #32
 8001dd4:	d10e      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d107      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0220 	mvn.w	r2, #32
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 fb56 	bl	80024a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e0ae      	b.n	8001f78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b0c      	cmp	r3, #12
 8001e26:	f200 809f 	bhi.w	8001f68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001e2a:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001e65 	.word	0x08001e65
 8001e34:	08001f69 	.word	0x08001f69
 8001e38:	08001f69 	.word	0x08001f69
 8001e3c:	08001f69 	.word	0x08001f69
 8001e40:	08001ea5 	.word	0x08001ea5
 8001e44:	08001f69 	.word	0x08001f69
 8001e48:	08001f69 	.word	0x08001f69
 8001e4c:	08001f69 	.word	0x08001f69
 8001e50:	08001ee7 	.word	0x08001ee7
 8001e54:	08001f69 	.word	0x08001f69
 8001e58:	08001f69 	.word	0x08001f69
 8001e5c:	08001f69 	.word	0x08001f69
 8001e60:	08001f27 	.word	0x08001f27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f90e 	bl	800208c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699a      	ldr	r2, [r3, #24]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0208 	orr.w	r2, r2, #8
 8001e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0204 	bic.w	r2, r2, #4
 8001e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6999      	ldr	r1, [r3, #24]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	619a      	str	r2, [r3, #24]
      break;
 8001ea2:	e064      	b.n	8001f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f954 	bl	8002158 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6999      	ldr	r1, [r3, #24]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	021a      	lsls	r2, r3, #8
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	619a      	str	r2, [r3, #24]
      break;
 8001ee4:	e043      	b.n	8001f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68b9      	ldr	r1, [r7, #8]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 f99d 	bl	800222c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	69da      	ldr	r2, [r3, #28]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0208 	orr.w	r2, r2, #8
 8001f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	69da      	ldr	r2, [r3, #28]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0204 	bic.w	r2, r2, #4
 8001f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69d9      	ldr	r1, [r3, #28]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	61da      	str	r2, [r3, #28]
      break;
 8001f24:	e023      	b.n	8001f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68b9      	ldr	r1, [r7, #8]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f9e7 	bl	8002300 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	69da      	ldr	r2, [r3, #28]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69d9      	ldr	r1, [r3, #28]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	021a      	lsls	r2, r3, #8
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	61da      	str	r2, [r3, #28]
      break;
 8001f66:	e002      	b.n	8001f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8001f6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a29      	ldr	r2, [pc, #164]	; (8002080 <TIM_Base_SetConfig+0xb8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00b      	beq.n	8001ff8 <TIM_Base_SetConfig+0x30>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe6:	d007      	beq.n	8001ff8 <TIM_Base_SetConfig+0x30>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a26      	ldr	r2, [pc, #152]	; (8002084 <TIM_Base_SetConfig+0xbc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d003      	beq.n	8001ff8 <TIM_Base_SetConfig+0x30>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a25      	ldr	r2, [pc, #148]	; (8002088 <TIM_Base_SetConfig+0xc0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d108      	bne.n	800200a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <TIM_Base_SetConfig+0xb8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00b      	beq.n	800202a <TIM_Base_SetConfig+0x62>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002018:	d007      	beq.n	800202a <TIM_Base_SetConfig+0x62>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a19      	ldr	r2, [pc, #100]	; (8002084 <TIM_Base_SetConfig+0xbc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d003      	beq.n	800202a <TIM_Base_SetConfig+0x62>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a18      	ldr	r2, [pc, #96]	; (8002088 <TIM_Base_SetConfig+0xc0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d108      	bne.n	800203c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a07      	ldr	r2, [pc, #28]	; (8002080 <TIM_Base_SetConfig+0xb8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d103      	bne.n	8002070 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	615a      	str	r2, [r3, #20]
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	40012c00 	.word	0x40012c00
 8002084:	40000400 	.word	0x40000400
 8002088:	40000800 	.word	0x40000800

0800208c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f023 0201 	bic.w	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f023 0303 	bic.w	r3, r3, #3
 80020c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f023 0302 	bic.w	r3, r3, #2
 80020d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a1c      	ldr	r2, [pc, #112]	; (8002154 <TIM_OC1_SetConfig+0xc8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d10c      	bne.n	8002102 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f023 0308 	bic.w	r3, r3, #8
 80020ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f023 0304 	bic.w	r3, r3, #4
 8002100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a13      	ldr	r2, [pc, #76]	; (8002154 <TIM_OC1_SetConfig+0xc8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d111      	bne.n	800212e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	621a      	str	r2, [r3, #32]
}
 8002148:	bf00      	nop
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40012c00 	.word	0x40012c00

08002158 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f023 0210 	bic.w	r2, r3, #16
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f023 0320 	bic.w	r3, r3, #32
 80021a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <TIM_OC2_SetConfig+0xd0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d10d      	bne.n	80021d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a14      	ldr	r2, [pc, #80]	; (8002228 <TIM_OC2_SetConfig+0xd0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d113      	bne.n	8002204 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	621a      	str	r2, [r3, #32]
}
 800221e:	bf00      	nop
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	40012c00 	.word	0x40012c00

0800222c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f023 0303 	bic.w	r3, r3, #3
 8002262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4313      	orrs	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	4313      	orrs	r3, r2
 8002280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a1d      	ldr	r2, [pc, #116]	; (80022fc <TIM_OC3_SetConfig+0xd0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d10d      	bne.n	80022a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <TIM_OC3_SetConfig+0xd0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d113      	bne.n	80022d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	621a      	str	r2, [r3, #32]
}
 80022f0:	bf00      	nop
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40012c00 	.word	0x40012c00

08002300 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800232e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800234a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	031b      	lsls	r3, r3, #12
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a0f      	ldr	r2, [pc, #60]	; (8002398 <TIM_OC4_SetConfig+0x98>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d109      	bne.n	8002374 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	019b      	lsls	r3, r3, #6
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	621a      	str	r2, [r3, #32]
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	40012c00 	.word	0x40012c00

0800239c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	2201      	movs	r2, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a1a      	ldr	r2, [r3, #32]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	43db      	mvns	r3, r3
 80023be:	401a      	ands	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a1a      	ldr	r2, [r3, #32]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	fa01 f303 	lsl.w	r3, r1, r3
 80023d4:	431a      	orrs	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	621a      	str	r2, [r3, #32]
}
 80023da:	bf00      	nop
 80023dc:	371c      	adds	r7, #28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e046      	b.n	800248a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a16      	ldr	r2, [pc, #88]	; (8002494 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00e      	beq.n	800245e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002448:	d009      	beq.n	800245e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a12      	ldr	r2, [pc, #72]	; (8002498 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d004      	beq.n	800245e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a10      	ldr	r2, [pc, #64]	; (800249c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d10c      	bne.n	8002478 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002464:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	4313      	orrs	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	40012c00 	.word	0x40012c00
 8002498:	40000400 	.word	0x40000400
 800249c:	40000800 	.word	0x40000800

080024a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e042      	b.n	800255c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe f8fe 	bl	80006ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2224      	movs	r2, #36	; 0x24
 80024f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fdc5 	bl	8003098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800251c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800252c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800253c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	4613      	mov	r3, r2
 8002572:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b20      	cmp	r3, #32
 8002582:	d16d      	bne.n	8002660 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_UART_Transmit+0x2c>
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e066      	b.n	8002662 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2221      	movs	r2, #33	; 0x21
 800259e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025a2:	f7fe f9ed 	bl	8000980 <HAL_GetTick>
 80025a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	88fa      	ldrh	r2, [r7, #6]
 80025ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	88fa      	ldrh	r2, [r7, #6]
 80025b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025bc:	d108      	bne.n	80025d0 <HAL_UART_Transmit+0x6c>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d104      	bne.n	80025d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	e003      	b.n	80025d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025d8:	e02a      	b.n	8002630 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2200      	movs	r2, #0
 80025e2:	2180      	movs	r1, #128	; 0x80
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fb14 	bl	8002c12 <UART_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e036      	b.n	8002662 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10b      	bne.n	8002612 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002608:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	3302      	adds	r3, #2
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	e007      	b.n	8002622 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3301      	adds	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1cf      	bne.n	80025da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2200      	movs	r2, #0
 8002642:	2140      	movs	r1, #64	; 0x40
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fae4 	bl	8002c12 <UART_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e006      	b.n	8002662 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e000      	b.n	8002662 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002660:	2302      	movs	r3, #2
  }
}
 8002662:	4618      	mov	r0, r3
 8002664:	3720      	adds	r7, #32
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	4613      	mov	r3, r2
 8002676:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b20      	cmp	r3, #32
 8002682:	d112      	bne.n	80026aa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_UART_Receive_IT+0x26>
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e00b      	b.n	80026ac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	461a      	mov	r2, r3
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fb24 	bl	8002cee <UART_Start_Receive_IT>
 80026a6:	4603      	mov	r3, r0
 80026a8:	e000      	b.n	80026ac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80026aa:	2302      	movs	r3, #2
  }
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b0ba      	sub	sp, #232	; 0xe8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80026f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <HAL_UART_IRQHandler+0x66>
 8002706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fc01 	bl	8002f1a <UART_Receive_IT>
      return;
 8002718:	e25b      	b.n	8002bd2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800271a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80de 	beq.w	80028e0 <HAL_UART_IRQHandler+0x22c>
 8002724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d106      	bne.n	800273e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002734:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80d1 	beq.w	80028e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800273e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_UART_IRQHandler+0xae>
 800274a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f043 0201 	orr.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <HAL_UART_IRQHandler+0xd2>
 800276e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f043 0202 	orr.w	r2, r3, #2
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_UART_IRQHandler+0xf6>
 8002792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f043 0204 	orr.w	r2, r3, #4
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d011      	beq.n	80027da <HAL_UART_IRQHandler+0x126>
 80027b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d105      	bne.n	80027ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f043 0208 	orr.w	r2, r3, #8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 81f2 	beq.w	8002bc8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_UART_IRQHandler+0x14e>
 80027f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027f4:	f003 0320 	and.w	r3, r3, #32
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fb8c 	bl	8002f1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf14      	ite	ne
 8002810:	2301      	movne	r3, #1
 8002812:	2300      	moveq	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <HAL_UART_IRQHandler+0x17a>
 8002826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d04f      	beq.n	80028ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fa96 	bl	8002d60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d041      	beq.n	80028c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3314      	adds	r3, #20
 8002848:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002850:	e853 3f00 	ldrex	r3, [r3]
 8002854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800285c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002860:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	3314      	adds	r3, #20
 800286a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800286e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002876:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800287a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800287e:	e841 2300 	strex	r3, r2, [r1]
 8002882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1d9      	bne.n	8002842 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	2b00      	cmp	r3, #0
 8002894:	d013      	beq.n	80028be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289a:	4a7e      	ldr	r2, [pc, #504]	; (8002a94 <HAL_UART_IRQHandler+0x3e0>)
 800289c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe f990 	bl	8000bc8 <HAL_DMA_Abort_IT>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d016      	beq.n	80028dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028b8:	4610      	mov	r0, r2
 80028ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028bc:	e00e      	b.n	80028dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f993 	bl	8002bea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c4:	e00a      	b.n	80028dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f98f 	bl	8002bea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028cc:	e006      	b.n	80028dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f98b 	bl	8002bea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80028da:	e175      	b.n	8002bc8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028dc:	bf00      	nop
    return;
 80028de:	e173      	b.n	8002bc8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	f040 814f 	bne.w	8002b88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8148 	beq.w	8002b88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8141 	beq.w	8002b88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80b6 	beq.w	8002a98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002938:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 8145 	beq.w	8002bcc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800294a:	429a      	cmp	r2, r3
 800294c:	f080 813e 	bcs.w	8002bcc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002956:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b20      	cmp	r3, #32
 8002960:	f000 8088 	beq.w	8002a74 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	330c      	adds	r3, #12
 800296a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002972:	e853 3f00 	ldrex	r3, [r3]
 8002976:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800297a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800297e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002982:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	330c      	adds	r3, #12
 800298c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002990:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002994:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002998:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800299c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029a0:	e841 2300 	strex	r3, r2, [r1]
 80029a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1d9      	bne.n	8002964 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	3314      	adds	r3, #20
 80029b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ba:	e853 3f00 	ldrex	r3, [r3]
 80029be:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029c2:	f023 0301 	bic.w	r3, r3, #1
 80029c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3314      	adds	r3, #20
 80029d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029d4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80029d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029e0:	e841 2300 	strex	r3, r2, [r1]
 80029e4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e1      	bne.n	80029b0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3314      	adds	r3, #20
 80029f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029f6:	e853 3f00 	ldrex	r3, [r3]
 80029fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3314      	adds	r3, #20
 8002a0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a10:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a18:	e841 2300 	strex	r3, r2, [r1]
 8002a1c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e3      	bne.n	80029ec <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	330c      	adds	r3, #12
 8002a38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3c:	e853 3f00 	ldrex	r3, [r3]
 8002a40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a44:	f023 0310 	bic.w	r3, r3, #16
 8002a48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a56:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a58:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a5e:	e841 2300 	strex	r3, r2, [r1]
 8002a62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e3      	bne.n	8002a32 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe f86f 	bl	8000b52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f8b6 	bl	8002bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a90:	e09c      	b.n	8002bcc <HAL_UART_IRQHandler+0x518>
 8002a92:	bf00      	nop
 8002a94:	08002e25 	.word	0x08002e25
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 808e 	beq.w	8002bd0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8089 	beq.w	8002bd0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	330c      	adds	r3, #12
 8002ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac8:	e853 3f00 	ldrex	r3, [r3]
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	330c      	adds	r3, #12
 8002ade:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ae2:	647a      	str	r2, [r7, #68]	; 0x44
 8002ae4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002aea:	e841 2300 	strex	r3, r2, [r1]
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1e3      	bne.n	8002abe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3314      	adds	r3, #20
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	e853 3f00 	ldrex	r3, [r3]
 8002b04:	623b      	str	r3, [r7, #32]
   return(result);
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3314      	adds	r3, #20
 8002b16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b1a:	633a      	str	r2, [r7, #48]	; 0x30
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b22:	e841 2300 	strex	r3, r2, [r1]
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1e3      	bne.n	8002af6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	330c      	adds	r3, #12
 8002b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	e853 3f00 	ldrex	r3, [r3]
 8002b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f023 0310 	bic.w	r3, r3, #16
 8002b52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	330c      	adds	r3, #12
 8002b5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b60:	61fa      	str	r2, [r7, #28]
 8002b62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b64:	69b9      	ldr	r1, [r7, #24]
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	e841 2300 	strex	r3, r2, [r1]
 8002b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e3      	bne.n	8002b3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f83b 	bl	8002bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b86:	e023      	b.n	8002bd0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d009      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x4f4>
 8002b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f953 	bl	8002e4c <UART_Transmit_IT>
    return;
 8002ba6:	e014      	b.n	8002bd2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00e      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x51e>
 8002bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f992 	bl	8002eea <UART_EndTransmit_IT>
    return;
 8002bc6:	e004      	b.n	8002bd2 <HAL_UART_IRQHandler+0x51e>
    return;
 8002bc8:	bf00      	nop
 8002bca:	e002      	b.n	8002bd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002bcc:	bf00      	nop
 8002bce:	e000      	b.n	8002bd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002bd0:	bf00      	nop
  }
}
 8002bd2:	37e8      	adds	r7, #232	; 0xe8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b090      	sub	sp, #64	; 0x40
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	603b      	str	r3, [r7, #0]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c22:	e050      	b.n	8002cc6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2a:	d04c      	beq.n	8002cc6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d007      	beq.n	8002c42 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c32:	f7fd fea5 	bl	8000980 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d241      	bcs.n	8002cc6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	330c      	adds	r3, #12
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4c:	e853 3f00 	ldrex	r3, [r3]
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	330c      	adds	r3, #12
 8002c60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c62:	637a      	str	r2, [r7, #52]	; 0x34
 8002c64:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c6a:	e841 2300 	strex	r3, r2, [r1]
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1e5      	bne.n	8002c42 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3314      	adds	r3, #20
 8002c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	e853 3f00 	ldrex	r3, [r3]
 8002c84:	613b      	str	r3, [r7, #16]
   return(result);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3314      	adds	r3, #20
 8002c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c96:	623a      	str	r2, [r7, #32]
 8002c98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9a:	69f9      	ldr	r1, [r7, #28]
 8002c9c:	6a3a      	ldr	r2, [r7, #32]
 8002c9e:	e841 2300 	strex	r3, r2, [r1]
 8002ca2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1e5      	bne.n	8002c76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e00f      	b.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	bf0c      	ite	eq
 8002cd6:	2301      	moveq	r3, #1
 8002cd8:	2300      	movne	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d09f      	beq.n	8002c24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3740      	adds	r7, #64	; 0x40
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	88fa      	ldrh	r2, [r7, #6]
 8002d06:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	88fa      	ldrh	r2, [r7, #6]
 8002d0c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2222      	movs	r2, #34	; 0x22
 8002d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d32:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0220 	orr.w	r2, r2, #32
 8002d52:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b095      	sub	sp, #84	; 0x54
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	330c      	adds	r3, #12
 8002d86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d88:	643a      	str	r2, [r7, #64]	; 0x40
 8002d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e5      	bne.n	8002d68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3314      	adds	r3, #20
 8002da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3314      	adds	r3, #20
 8002dba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc4:	e841 2300 	strex	r3, r2, [r1]
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e5      	bne.n	8002d9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d119      	bne.n	8002e0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	e853 3f00 	ldrex	r3, [r3]
 8002de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f023 0310 	bic.w	r3, r3, #16
 8002dee:	647b      	str	r3, [r7, #68]	; 0x44
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002df8:	61ba      	str	r2, [r7, #24]
 8002dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfc:	6979      	ldr	r1, [r7, #20]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	e841 2300 	strex	r3, r2, [r1]
 8002e04:	613b      	str	r3, [r7, #16]
   return(result);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1e5      	bne.n	8002dd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e1a:	bf00      	nop
 8002e1c:	3754      	adds	r7, #84	; 0x54
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f7ff fed3 	bl	8002bea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b21      	cmp	r3, #33	; 0x21
 8002e5e:	d13e      	bne.n	8002ede <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e68:	d114      	bne.n	8002e94 <UART_Transmit_IT+0x48>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d110      	bne.n	8002e94 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	1c9a      	adds	r2, r3, #2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	621a      	str	r2, [r3, #32]
 8002e92:	e008      	b.n	8002ea6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	1c59      	adds	r1, r3, #1
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6211      	str	r1, [r2, #32]
 8002e9e:	781a      	ldrb	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10f      	bne.n	8002eda <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
  }
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff fe64 	bl	8002bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b08c      	sub	sp, #48	; 0x30
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b22      	cmp	r3, #34	; 0x22
 8002f2c:	f040 80ae 	bne.w	800308c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f38:	d117      	bne.n	8002f6a <UART_Receive_IT+0x50>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d113      	bne.n	8002f6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	1c9a      	adds	r2, r3, #2
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28
 8002f68:	e026      	b.n	8002fb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7c:	d007      	beq.n	8002f8e <UART_Receive_IT+0x74>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10a      	bne.n	8002f9c <UART_Receive_IT+0x82>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	701a      	strb	r2, [r3, #0]
 8002f9a:	e008      	b.n	8002fae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d15d      	bne.n	8003088 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0220 	bic.w	r2, r2, #32
 8002fda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	2b01      	cmp	r3, #1
 8003010:	d135      	bne.n	800307e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	330c      	adds	r3, #12
 800301e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	e853 3f00 	ldrex	r3, [r3]
 8003026:	613b      	str	r3, [r7, #16]
   return(result);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f023 0310 	bic.w	r3, r3, #16
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	330c      	adds	r3, #12
 8003036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003038:	623a      	str	r2, [r7, #32]
 800303a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303c:	69f9      	ldr	r1, [r7, #28]
 800303e:	6a3a      	ldr	r2, [r7, #32]
 8003040:	e841 2300 	strex	r3, r2, [r1]
 8003044:	61bb      	str	r3, [r7, #24]
   return(result);
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1e5      	bne.n	8003018 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	2b10      	cmp	r3, #16
 8003058:	d10a      	bne.n	8003070 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003074:	4619      	mov	r1, r3
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fdc0 	bl	8002bfc <HAL_UARTEx_RxEventCallback>
 800307c:	e002      	b.n	8003084 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fd f86e 	bl	8000160 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	e002      	b.n	800308e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e000      	b.n	800308e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	3730      	adds	r7, #48	; 0x30
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030d2:	f023 030c 	bic.w	r3, r3, #12
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	430b      	orrs	r3, r1
 80030de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a2c      	ldr	r2, [pc, #176]	; (80031ac <UART_SetConfig+0x114>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d103      	bne.n	8003108 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003100:	f7fe fb76 	bl	80017f0 <HAL_RCC_GetPCLK2Freq>
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	e002      	b.n	800310e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003108:	f7fe fb5e 	bl	80017c8 <HAL_RCC_GetPCLK1Freq>
 800310c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	009a      	lsls	r2, r3, #2
 8003118:	441a      	add	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fbb2 f3f3 	udiv	r3, r2, r3
 8003124:	4a22      	ldr	r2, [pc, #136]	; (80031b0 <UART_SetConfig+0x118>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	0119      	lsls	r1, r3, #4
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	009a      	lsls	r2, r3, #2
 8003138:	441a      	add	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	fbb2 f2f3 	udiv	r2, r2, r3
 8003144:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <UART_SetConfig+0x118>)
 8003146:	fba3 0302 	umull	r0, r3, r3, r2
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	2064      	movs	r0, #100	; 0x64
 800314e:	fb00 f303 	mul.w	r3, r0, r3
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	3332      	adds	r3, #50	; 0x32
 8003158:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <UART_SetConfig+0x118>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003164:	4419      	add	r1, r3
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	009a      	lsls	r2, r3, #2
 8003170:	441a      	add	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	fbb2 f2f3 	udiv	r2, r2, r3
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <UART_SetConfig+0x118>)
 800317e:	fba3 0302 	umull	r0, r3, r3, r2
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	2064      	movs	r0, #100	; 0x64
 8003186:	fb00 f303 	mul.w	r3, r0, r3
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	3332      	adds	r3, #50	; 0x32
 8003190:	4a07      	ldr	r2, [pc, #28]	; (80031b0 <UART_SetConfig+0x118>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	f003 020f 	and.w	r2, r3, #15
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	440a      	add	r2, r1
 80031a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031a4:	bf00      	nop
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40013800 	.word	0x40013800
 80031b0:	51eb851f 	.word	0x51eb851f

080031b4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031ba:	f3ef 8305 	mrs	r3, IPSR
 80031be:	60bb      	str	r3, [r7, #8]
  return(result);
 80031c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10f      	bne.n	80031e6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031c6:	f3ef 8310 	mrs	r3, PRIMASK
 80031ca:	607b      	str	r3, [r7, #4]
  return(result);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <osKernelInitialize+0x32>
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <osKernelInitialize+0x60>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d109      	bne.n	80031ee <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031da:	f3ef 8311 	mrs	r3, BASEPRI
 80031de:	603b      	str	r3, [r7, #0]
  return(result);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80031e6:	f06f 0305 	mvn.w	r3, #5
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	e00c      	b.n	8003208 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <osKernelInitialize+0x60>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d105      	bne.n	8003202 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80031f6:	4b07      	ldr	r3, [pc, #28]	; (8003214 <osKernelInitialize+0x60>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	e002      	b.n	8003208 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003202:	f04f 33ff 	mov.w	r3, #4294967295
 8003206:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003208:	68fb      	ldr	r3, [r7, #12]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	200001c0 	.word	0x200001c0

08003218 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800321e:	f3ef 8305 	mrs	r3, IPSR
 8003222:	60bb      	str	r3, [r7, #8]
  return(result);
 8003224:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10f      	bne.n	800324a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322a:	f3ef 8310 	mrs	r3, PRIMASK
 800322e:	607b      	str	r3, [r7, #4]
  return(result);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <osKernelStart+0x32>
 8003236:	4b11      	ldr	r3, [pc, #68]	; (800327c <osKernelStart+0x64>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d109      	bne.n	8003252 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800323e:	f3ef 8311 	mrs	r3, BASEPRI
 8003242:	603b      	str	r3, [r7, #0]
  return(result);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <osKernelStart+0x3a>
    stat = osErrorISR;
 800324a:	f06f 0305 	mvn.w	r3, #5
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	e00e      	b.n	8003270 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003252:	4b0a      	ldr	r3, [pc, #40]	; (800327c <osKernelStart+0x64>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d107      	bne.n	800326a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <osKernelStart+0x64>)
 800325c:	2202      	movs	r2, #2
 800325e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003260:	f001 f8ce 	bl	8004400 <vTaskStartScheduler>
      stat = osOK;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	e002      	b.n	8003270 <osKernelStart+0x58>
    } else {
      stat = osError;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003270:	68fb      	ldr	r3, [r7, #12]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	200001c0 	.word	0x200001c0

08003280 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003280:	b580      	push	{r7, lr}
 8003282:	b092      	sub	sp, #72	; 0x48
 8003284:	af04      	add	r7, sp, #16
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003290:	f3ef 8305 	mrs	r3, IPSR
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003298:	2b00      	cmp	r3, #0
 800329a:	f040 8094 	bne.w	80033c6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800329e:	f3ef 8310 	mrs	r3, PRIMASK
 80032a2:	623b      	str	r3, [r7, #32]
  return(result);
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 808d 	bne.w	80033c6 <osThreadNew+0x146>
 80032ac:	4b48      	ldr	r3, [pc, #288]	; (80033d0 <osThreadNew+0x150>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d106      	bne.n	80032c2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032b4:	f3ef 8311 	mrs	r3, BASEPRI
 80032b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f040 8082 	bne.w	80033c6 <osThreadNew+0x146>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d07e      	beq.n	80033c6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80032cc:	2318      	movs	r3, #24
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80032d0:	2300      	movs	r3, #0
 80032d2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80032d4:	f107 031b 	add.w	r3, r7, #27
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80032da:	f04f 33ff 	mov.w	r3, #4294967295
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d045      	beq.n	8003372 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <osThreadNew+0x74>
        name = attr->name;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <osThreadNew+0x9a>
 8003308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330a:	2b38      	cmp	r3, #56	; 0x38
 800330c:	d805      	bhi.n	800331a <osThreadNew+0x9a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <osThreadNew+0x9e>
        return (NULL);
 800331a:	2300      	movs	r3, #0
 800331c:	e054      	b.n	80033c8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	089b      	lsrs	r3, r3, #2
 800332c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00e      	beq.n	8003354 <osThreadNew+0xd4>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2ba7      	cmp	r3, #167	; 0xa7
 800333c:	d90a      	bls.n	8003354 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <osThreadNew+0xd4>
        mem = 1;
 800334e:	2301      	movs	r3, #1
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
 8003352:	e010      	b.n	8003376 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10c      	bne.n	8003376 <osThreadNew+0xf6>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d108      	bne.n	8003376 <osThreadNew+0xf6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d104      	bne.n	8003376 <osThreadNew+0xf6>
          mem = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003370:	e001      	b.n	8003376 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	2b01      	cmp	r3, #1
 800337a:	d110      	bne.n	800339e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003384:	9202      	str	r2, [sp, #8]
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003390:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 fe50 	bl	8004038 <xTaskCreateStatic>
 8003398:	4603      	mov	r3, r0
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	e013      	b.n	80033c6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d110      	bne.n	80033c6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fe9a 	bl	80040f0 <xTaskCreate>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d001      	beq.n	80033c6 <osThreadNew+0x146>
          hTask = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80033c6:	697b      	ldr	r3, [r7, #20]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3738      	adds	r7, #56	; 0x38
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	200001c0 	.word	0x200001c0

080033d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033dc:	f3ef 8305 	mrs	r3, IPSR
 80033e0:	613b      	str	r3, [r7, #16]
  return(result);
 80033e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10f      	bne.n	8003408 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e8:	f3ef 8310 	mrs	r3, PRIMASK
 80033ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <osDelay+0x34>
 80033f4:	4b0d      	ldr	r3, [pc, #52]	; (800342c <osDelay+0x58>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d109      	bne.n	8003410 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033fc:	f3ef 8311 	mrs	r3, BASEPRI
 8003400:	60bb      	str	r3, [r7, #8]
  return(result);
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <osDelay+0x3c>
    stat = osErrorISR;
 8003408:	f06f 0305 	mvn.w	r3, #5
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	e007      	b.n	8003420 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <osDelay+0x4c>
      vTaskDelay(ticks);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 ffbc 	bl	8004398 <vTaskDelay>
    }
  }

  return (stat);
 8003420:	697b      	ldr	r3, [r7, #20]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	200001c0 	.word	0x200001c0

08003430 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4a06      	ldr	r2, [pc, #24]	; (8003458 <vApplicationGetIdleTaskMemory+0x28>)
 8003440:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4a05      	ldr	r2, [pc, #20]	; (800345c <vApplicationGetIdleTaskMemory+0x2c>)
 8003446:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2280      	movs	r2, #128	; 0x80
 800344c:	601a      	str	r2, [r3, #0]
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr
 8003458:	200001c4 	.word	0x200001c4
 800345c:	2000026c 	.word	0x2000026c

08003460 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4a07      	ldr	r2, [pc, #28]	; (800348c <vApplicationGetTimerTaskMemory+0x2c>)
 8003470:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4a06      	ldr	r2, [pc, #24]	; (8003490 <vApplicationGetTimerTaskMemory+0x30>)
 8003476:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800347e:	601a      	str	r2, [r3, #0]
}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	2000046c 	.word	0x2000046c
 8003490:	20000514 	.word	0x20000514

08003494 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f103 0208 	add.w	r2, r3, #8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f103 0208 	add.w	r2, r3, #8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f103 0208 	add.w	r2, r3, #8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr

080034ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034ea:	b480      	push	{r7}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	601a      	str	r2, [r3, #0]
}
 8003526:	bf00      	nop
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr

08003530 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d103      	bne.n	8003550 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	e00c      	b.n	800356a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3308      	adds	r3, #8
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	e002      	b.n	800355e <vListInsert+0x2e>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	429a      	cmp	r2, r3
 8003568:	d2f6      	bcs.n	8003558 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	601a      	str	r2, [r3, #0]
}
 8003596:	bf00      	nop
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6892      	ldr	r2, [r2, #8]
 80035b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6852      	ldr	r2, [r2, #4]
 80035c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d103      	bne.n	80035d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	1e5a      	subs	r2, r3, #1
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr
	...

080035f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800361e:	f002 f835 	bl	800568c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362a:	68f9      	ldr	r1, [r7, #12]
 800362c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800362e:	fb01 f303 	mul.w	r3, r1, r3
 8003632:	441a      	add	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364e:	3b01      	subs	r3, #1
 8003650:	68f9      	ldr	r1, [r7, #12]
 8003652:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	441a      	add	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	22ff      	movs	r2, #255	; 0xff
 8003662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	22ff      	movs	r2, #255	; 0xff
 800366a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d114      	bne.n	800369e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01a      	beq.n	80036b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3310      	adds	r3, #16
 8003680:	4618      	mov	r0, r3
 8003682:	f001 f959 	bl	8004938 <xTaskRemoveFromEventList>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d012      	beq.n	80036b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800368c:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <xQueueGenericReset+0xcc>)
 800368e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	e009      	b.n	80036b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3310      	adds	r3, #16
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fef6 	bl	8003494 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3324      	adds	r3, #36	; 0x24
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fef1 	bl	8003494 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036b2:	f002 f81b 	bl	80056ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036b6:	2301      	movs	r3, #1
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	e000ed04 	.word	0xe000ed04

080036c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08e      	sub	sp, #56	; 0x38
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036ea:	bf00      	nop
 80036ec:	e7fe      	b.n	80036ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003706:	bf00      	nop
 8003708:	e7fe      	b.n	8003708 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <xQueueGenericCreateStatic+0x52>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <xQueueGenericCreateStatic+0x56>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <xQueueGenericCreateStatic+0x58>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	623b      	str	r3, [r7, #32]
}
 8003732:	bf00      	nop
 8003734:	e7fe      	b.n	8003734 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <xQueueGenericCreateStatic+0x7e>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <xQueueGenericCreateStatic+0x82>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <xQueueGenericCreateStatic+0x84>
 8003746:	2300      	movs	r3, #0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	61fb      	str	r3, [r7, #28]
}
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003762:	2350      	movs	r3, #80	; 0x50
 8003764:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b50      	cmp	r3, #80	; 0x50
 800376a:	d00a      	beq.n	8003782 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	61bb      	str	r3, [r7, #24]
}
 800377e:	bf00      	nop
 8003780:	e7fe      	b.n	8003780 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00d      	beq.n	80037a8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003794:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f843 	bl	800382e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3730      	adds	r7, #48	; 0x30
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b08a      	sub	sp, #40	; 0x28
 80037b6:	af02      	add	r7, sp, #8
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	4613      	mov	r3, r2
 80037be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10a      	bne.n	80037dc <xQueueGenericCreate+0x2a>
	__asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	613b      	str	r3, [r7, #16]
}
 80037d8:	bf00      	nop
 80037da:	e7fe      	b.n	80037da <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d102      	bne.n	80037e8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	e004      	b.n	80037f2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	fb02 f303 	mul.w	r3, r2, r3
 80037f0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3350      	adds	r3, #80	; 0x50
 80037f6:	4618      	mov	r0, r3
 80037f8:	f002 f848 	bl	800588c <pvPortMalloc>
 80037fc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00f      	beq.n	8003824 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	3350      	adds	r3, #80	; 0x50
 8003808:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003812:	79fa      	ldrb	r2, [r7, #7]
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f805 	bl	800382e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003824:	69bb      	ldr	r3, [r7, #24]
	}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
 800383a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d103      	bne.n	800384a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	e002      	b.n	8003850 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800385c:	2101      	movs	r1, #1
 800385e:	69b8      	ldr	r0, [r7, #24]
 8003860:	f7ff fec8 	bl	80035f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08e      	sub	sp, #56	; 0x38
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003882:	2300      	movs	r3, #0
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <xQueueGenericSend+0x32>
	__asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038a2:	bf00      	nop
 80038a4:	e7fe      	b.n	80038a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d103      	bne.n	80038b4 <xQueueGenericSend+0x40>
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <xQueueGenericSend+0x44>
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <xQueueGenericSend+0x46>
 80038b8:	2300      	movs	r3, #0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10a      	bne.n	80038d4 <xQueueGenericSend+0x60>
	__asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038d0:	bf00      	nop
 80038d2:	e7fe      	b.n	80038d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d103      	bne.n	80038e2 <xQueueGenericSend+0x6e>
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <xQueueGenericSend+0x72>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <xQueueGenericSend+0x74>
 80038e6:	2300      	movs	r3, #0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <xQueueGenericSend+0x8e>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	623b      	str	r3, [r7, #32]
}
 80038fe:	bf00      	nop
 8003900:	e7fe      	b.n	8003900 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003902:	f001 f9df 	bl	8004cc4 <xTaskGetSchedulerState>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <xQueueGenericSend+0x9e>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <xQueueGenericSend+0xa2>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <xQueueGenericSend+0xa4>
 8003916:	2300      	movs	r3, #0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <xQueueGenericSend+0xbe>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	61fb      	str	r3, [r7, #28]
}
 800392e:	bf00      	nop
 8003930:	e7fe      	b.n	8003930 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003932:	f001 feab 	bl	800568c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393e:	429a      	cmp	r2, r3
 8003940:	d302      	bcc.n	8003948 <xQueueGenericSend+0xd4>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d129      	bne.n	800399c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800394e:	f000 fa07 	bl	8003d60 <prvCopyDataToQueue>
 8003952:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	2b00      	cmp	r3, #0
 800395a:	d010      	beq.n	800397e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	3324      	adds	r3, #36	; 0x24
 8003960:	4618      	mov	r0, r3
 8003962:	f000 ffe9 	bl	8004938 <xTaskRemoveFromEventList>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800396c:	4b3f      	ldr	r3, [pc, #252]	; (8003a6c <xQueueGenericSend+0x1f8>)
 800396e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	e00a      	b.n	8003994 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800397e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003984:	4b39      	ldr	r3, [pc, #228]	; (8003a6c <xQueueGenericSend+0x1f8>)
 8003986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003994:	f001 feaa 	bl	80056ec <vPortExitCritical>
				return pdPASS;
 8003998:	2301      	movs	r3, #1
 800399a:	e063      	b.n	8003a64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039a2:	f001 fea3 	bl	80056ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e05c      	b.n	8003a64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d106      	bne.n	80039be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	4618      	mov	r0, r3
 80039b6:	f001 f823 	bl	8004a00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039ba:	2301      	movs	r3, #1
 80039bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039be:	f001 fe95 	bl	80056ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039c2:	f000 fd8d 	bl	80044e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039c6:	f001 fe61 	bl	800568c <vPortEnterCritical>
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039d0:	b25b      	sxtb	r3, r3
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d6:	d103      	bne.n	80039e0 <xQueueGenericSend+0x16c>
 80039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039e6:	b25b      	sxtb	r3, r3
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d103      	bne.n	80039f6 <xQueueGenericSend+0x182>
 80039ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039f6:	f001 fe79 	bl	80056ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039fa:	1d3a      	adds	r2, r7, #4
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 f812 	bl	8004a2c <xTaskCheckForTimeOut>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d124      	bne.n	8003a58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a10:	f000 fa9e 	bl	8003f50 <prvIsQueueFull>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d018      	beq.n	8003a4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	3310      	adds	r3, #16
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	4611      	mov	r1, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 ff38 	bl	8004898 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a2a:	f000 fa29 	bl	8003e80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a2e:	f000 fd65 	bl	80044fc <xTaskResumeAll>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f47f af7c 	bne.w	8003932 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a3a:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <xQueueGenericSend+0x1f8>)
 8003a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	e772      	b.n	8003932 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a4e:	f000 fa17 	bl	8003e80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a52:	f000 fd53 	bl	80044fc <xTaskResumeAll>
 8003a56:	e76c      	b.n	8003932 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a5a:	f000 fa11 	bl	8003e80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a5e:	f000 fd4d 	bl	80044fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a62:	2300      	movs	r3, #0
		}
	}
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3738      	adds	r7, #56	; 0x38
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	e000ed04 	.word	0xe000ed04

08003a70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08e      	sub	sp, #56	; 0x38
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a9a:	bf00      	nop
 8003a9c:	e7fe      	b.n	8003a9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d103      	bne.n	8003aac <xQueueGenericSendFromISR+0x3c>
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <xQueueGenericSendFromISR+0x40>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <xQueueGenericSendFromISR+0x42>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10a      	bne.n	8003acc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aba:	f383 8811 	msr	BASEPRI, r3
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	623b      	str	r3, [r7, #32]
}
 8003ac8:	bf00      	nop
 8003aca:	e7fe      	b.n	8003aca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d103      	bne.n	8003ada <xQueueGenericSendFromISR+0x6a>
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <xQueueGenericSendFromISR+0x6e>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <xQueueGenericSendFromISR+0x70>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	61fb      	str	r3, [r7, #28]
}
 8003af6:	bf00      	nop
 8003af8:	e7fe      	b.n	8003af8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003afa:	f001 fe89 	bl	8005810 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003afe:	f3ef 8211 	mrs	r2, BASEPRI
 8003b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	61ba      	str	r2, [r7, #24]
 8003b14:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b16:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d302      	bcc.n	8003b2c <xQueueGenericSendFromISR+0xbc>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d12c      	bne.n	8003b86 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b3c:	f000 f910 	bl	8003d60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b40:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d112      	bne.n	8003b70 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	3324      	adds	r3, #36	; 0x24
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 feee 	bl	8004938 <xTaskRemoveFromEventList>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00e      	beq.n	8003b80 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00b      	beq.n	8003b80 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e007      	b.n	8003b80 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b74:	3301      	adds	r3, #1
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	b25a      	sxtb	r2, r3
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b80:	2301      	movs	r3, #1
 8003b82:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003b84:	e001      	b.n	8003b8a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	637b      	str	r3, [r7, #52]	; 0x34
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3738      	adds	r7, #56	; 0x38
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08c      	sub	sp, #48	; 0x30
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <xQueueReceive+0x30>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	623b      	str	r3, [r7, #32]
}
 8003bcc:	bf00      	nop
 8003bce:	e7fe      	b.n	8003bce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d103      	bne.n	8003bde <xQueueReceive+0x3e>
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <xQueueReceive+0x42>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <xQueueReceive+0x44>
 8003be2:	2300      	movs	r3, #0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <xQueueReceive+0x5e>
	__asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	61fb      	str	r3, [r7, #28]
}
 8003bfa:	bf00      	nop
 8003bfc:	e7fe      	b.n	8003bfc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bfe:	f001 f861 	bl	8004cc4 <xTaskGetSchedulerState>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <xQueueReceive+0x6e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <xQueueReceive+0x72>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <xQueueReceive+0x74>
 8003c12:	2300      	movs	r3, #0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <xQueueReceive+0x8e>
	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	61bb      	str	r3, [r7, #24]
}
 8003c2a:	bf00      	nop
 8003c2c:	e7fe      	b.n	8003c2c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c2e:	f001 fd2d 	bl	800568c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d01f      	beq.n	8003c7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c42:	f000 f8f7 	bl	8003e34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	1e5a      	subs	r2, r3, #1
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00f      	beq.n	8003c76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	3310      	adds	r3, #16
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fe6c 	bl	8004938 <xTaskRemoveFromEventList>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c66:	4b3d      	ldr	r3, [pc, #244]	; (8003d5c <xQueueReceive+0x1bc>)
 8003c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c76:	f001 fd39 	bl	80056ec <vPortExitCritical>
				return pdPASS;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e069      	b.n	8003d52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d103      	bne.n	8003c8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c84:	f001 fd32 	bl	80056ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e062      	b.n	8003d52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c92:	f107 0310 	add.w	r3, r7, #16
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 feb2 	bl	8004a00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ca0:	f001 fd24 	bl	80056ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ca4:	f000 fc1c 	bl	80044e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ca8:	f001 fcf0 	bl	800568c <vPortEnterCritical>
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cb2:	b25b      	sxtb	r3, r3
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb8:	d103      	bne.n	8003cc2 <xQueueReceive+0x122>
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cc8:	b25b      	sxtb	r3, r3
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d103      	bne.n	8003cd8 <xQueueReceive+0x138>
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cd8:	f001 fd08 	bl	80056ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cdc:	1d3a      	adds	r2, r7, #4
 8003cde:	f107 0310 	add.w	r3, r7, #16
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fea1 	bl	8004a2c <xTaskCheckForTimeOut>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d123      	bne.n	8003d38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cf2:	f000 f917 	bl	8003f24 <prvIsQueueEmpty>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d017      	beq.n	8003d2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	3324      	adds	r3, #36	; 0x24
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fdc7 	bl	8004898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d0c:	f000 f8b8 	bl	8003e80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d10:	f000 fbf4 	bl	80044fc <xTaskResumeAll>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d189      	bne.n	8003c2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d1a:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <xQueueReceive+0x1bc>)
 8003d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	e780      	b.n	8003c2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d2e:	f000 f8a7 	bl	8003e80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d32:	f000 fbe3 	bl	80044fc <xTaskResumeAll>
 8003d36:	e77a      	b.n	8003c2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3a:	f000 f8a1 	bl	8003e80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d3e:	f000 fbdd 	bl	80044fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d44:	f000 f8ee 	bl	8003f24 <prvIsQueueEmpty>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f43f af6f 	beq.w	8003c2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3730      	adds	r7, #48	; 0x30
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	e000ed04 	.word	0xe000ed04

08003d60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10d      	bne.n	8003d9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d14d      	bne.n	8003e22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 ffb8 	bl	8004d00 <xTaskPriorityDisinherit>
 8003d90:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	605a      	str	r2, [r3, #4]
 8003d98:	e043      	b.n	8003e22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d119      	bne.n	8003dd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6898      	ldr	r0, [r3, #8]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	461a      	mov	r2, r3
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	f002 f85c 	bl	8005e68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	441a      	add	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d32b      	bcc.n	8003e22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	609a      	str	r2, [r3, #8]
 8003dd2:	e026      	b.n	8003e22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68d8      	ldr	r0, [r3, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	461a      	mov	r2, r3
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	f002 f842 	bl	8005e68 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	425b      	negs	r3, r3
 8003dee:	441a      	add	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d207      	bcs.n	8003e10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	425b      	negs	r3, r3
 8003e0a:	441a      	add	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d105      	bne.n	8003e22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e2a:	697b      	ldr	r3, [r7, #20]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d018      	beq.n	8003e78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	441a      	add	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d303      	bcc.n	8003e68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68d9      	ldr	r1, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	461a      	mov	r2, r3
 8003e72:	6838      	ldr	r0, [r7, #0]
 8003e74:	f001 fff8 	bl	8005e68 <memcpy>
	}
}
 8003e78:	bf00      	nop
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e88:	f001 fc00 	bl	800568c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e94:	e011      	b.n	8003eba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d012      	beq.n	8003ec4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3324      	adds	r3, #36	; 0x24
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fd48 	bl	8004938 <xTaskRemoveFromEventList>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003eae:	f000 fe1f 	bl	8004af0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	dce9      	bgt.n	8003e96 <prvUnlockQueue+0x16>
 8003ec2:	e000      	b.n	8003ec6 <prvUnlockQueue+0x46>
					break;
 8003ec4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	22ff      	movs	r2, #255	; 0xff
 8003eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ece:	f001 fc0d 	bl	80056ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ed2:	f001 fbdb 	bl	800568c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003edc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ede:	e011      	b.n	8003f04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d012      	beq.n	8003f0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3310      	adds	r3, #16
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fd23 	bl	8004938 <xTaskRemoveFromEventList>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ef8:	f000 fdfa 	bl	8004af0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003efc:	7bbb      	ldrb	r3, [r7, #14]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	dce9      	bgt.n	8003ee0 <prvUnlockQueue+0x60>
 8003f0c:	e000      	b.n	8003f10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	22ff      	movs	r2, #255	; 0xff
 8003f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f18:	f001 fbe8 	bl	80056ec <vPortExitCritical>
}
 8003f1c:	bf00      	nop
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f2c:	f001 fbae 	bl	800568c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d102      	bne.n	8003f3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e001      	b.n	8003f42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f42:	f001 fbd3 	bl	80056ec <vPortExitCritical>

	return xReturn;
 8003f46:	68fb      	ldr	r3, [r7, #12]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f58:	f001 fb98 	bl	800568c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d102      	bne.n	8003f6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	e001      	b.n	8003f72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f72:	f001 fbbb 	bl	80056ec <vPortExitCritical>

	return xReturn;
 8003f76:	68fb      	ldr	r3, [r7, #12]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e014      	b.n	8003fba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f90:	4a0e      	ldr	r2, [pc, #56]	; (8003fcc <vQueueAddToRegistry+0x4c>)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10b      	bne.n	8003fb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f9c:	490b      	ldr	r1, [pc, #44]	; (8003fcc <vQueueAddToRegistry+0x4c>)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003fa6:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <vQueueAddToRegistry+0x4c>)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003fb2:	e006      	b.n	8003fc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b07      	cmp	r3, #7
 8003fbe:	d9e7      	bls.n	8003f90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr
 8003fcc:	20000914 	.word	0x20000914

08003fd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003fe0:	f001 fb54 	bl	800568c <vPortEnterCritical>
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fea:	b25b      	sxtb	r3, r3
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d103      	bne.n	8003ffa <vQueueWaitForMessageRestricted+0x2a>
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004000:	b25b      	sxtb	r3, r3
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	d103      	bne.n	8004010 <vQueueWaitForMessageRestricted+0x40>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004010:	f001 fb6c 	bl	80056ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	2b00      	cmp	r3, #0
 800401a:	d106      	bne.n	800402a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	3324      	adds	r3, #36	; 0x24
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fc5b 	bl	80048e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800402a:	6978      	ldr	r0, [r7, #20]
 800402c:	f7ff ff28 	bl	8003e80 <prvUnlockQueue>
	}
 8004030:	bf00      	nop
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08e      	sub	sp, #56	; 0x38
 800403c:	af04      	add	r7, sp, #16
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <xTaskCreateStatic+0x2a>
	__asm volatile
 800404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004050:	f383 8811 	msr	BASEPRI, r3
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	623b      	str	r3, [r7, #32]
}
 800405e:	bf00      	nop
 8004060:	e7fe      	b.n	8004060 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <xTaskCreateStatic+0x46>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	61fb      	str	r3, [r7, #28]
}
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800407e:	23a8      	movs	r3, #168	; 0xa8
 8004080:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2ba8      	cmp	r3, #168	; 0xa8
 8004086:	d00a      	beq.n	800409e <xTaskCreateStatic+0x66>
	__asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	61bb      	str	r3, [r7, #24]
}
 800409a:	bf00      	nop
 800409c:	e7fe      	b.n	800409c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800409e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d01e      	beq.n	80040e2 <xTaskCreateStatic+0xaa>
 80040a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d01b      	beq.n	80040e2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040bc:	2300      	movs	r3, #0
 80040be:	9303      	str	r3, [sp, #12]
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	9302      	str	r3, [sp, #8]
 80040c4:	f107 0314 	add.w	r3, r7, #20
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f851 	bl	800417c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040dc:	f000 f8ec 	bl	80042b8 <prvAddNewTaskToReadyList>
 80040e0:	e001      	b.n	80040e6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040e6:	697b      	ldr	r3, [r7, #20]
	}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3728      	adds	r7, #40	; 0x28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08c      	sub	sp, #48	; 0x30
 80040f4:	af04      	add	r7, sp, #16
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004100:	88fb      	ldrh	r3, [r7, #6]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4618      	mov	r0, r3
 8004106:	f001 fbc1 	bl	800588c <pvPortMalloc>
 800410a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00e      	beq.n	8004130 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004112:	20a8      	movs	r0, #168	; 0xa8
 8004114:	f001 fbba 	bl	800588c <pvPortMalloc>
 8004118:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
 8004126:	e005      	b.n	8004134 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004128:	6978      	ldr	r0, [r7, #20]
 800412a:	f001 fc73 	bl	8005a14 <vPortFree>
 800412e:	e001      	b.n	8004134 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004130:	2300      	movs	r3, #0
 8004132:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d017      	beq.n	800416a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	2300      	movs	r3, #0
 8004146:	9303      	str	r3, [sp, #12]
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	9302      	str	r3, [sp, #8]
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f80f 	bl	800417c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800415e:	69f8      	ldr	r0, [r7, #28]
 8004160:	f000 f8aa 	bl	80042b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004164:	2301      	movs	r3, #1
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	e002      	b.n	8004170 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800416a:	f04f 33ff 	mov.w	r3, #4294967295
 800416e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004170:	69bb      	ldr	r3, [r7, #24]
	}
 8004172:	4618      	mov	r0, r3
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	461a      	mov	r2, r3
 8004194:	21a5      	movs	r1, #165	; 0xa5
 8004196:	f001 fddd 	bl	8005d54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041a4:	3b01      	subs	r3, #1
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	f023 0307 	bic.w	r3, r3, #7
 80041b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	617b      	str	r3, [r7, #20]
}
 80041d0:	bf00      	nop
 80041d2:	e7fe      	b.n	80041d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041d4:	2300      	movs	r3, #0
 80041d6:	61fb      	str	r3, [r7, #28]
 80041d8:	e012      	b.n	8004200 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	4413      	add	r3, r2
 80041e0:	7819      	ldrb	r1, [r3, #0]
 80041e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	4413      	add	r3, r2
 80041e8:	3334      	adds	r3, #52	; 0x34
 80041ea:	460a      	mov	r2, r1
 80041ec:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4413      	add	r3, r2
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d006      	beq.n	8004208 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	3301      	adds	r3, #1
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	2b0f      	cmp	r3, #15
 8004204:	d9e9      	bls.n	80041da <prvInitialiseNewTask+0x5e>
 8004206:	e000      	b.n	800420a <prvInitialiseNewTask+0x8e>
		{
			break;
 8004208:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	2b37      	cmp	r3, #55	; 0x37
 8004216:	d901      	bls.n	800421c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004218:	2337      	movs	r3, #55	; 0x37
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004220:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004226:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	2200      	movs	r2, #0
 800422c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	3304      	adds	r3, #4
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff f94d 	bl	80034d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	3318      	adds	r3, #24
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff f948 	bl	80034d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004246:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004256:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	2200      	movs	r2, #0
 800425c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	2200      	movs	r2, #0
 8004264:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	3354      	adds	r3, #84	; 0x54
 800426c:	224c      	movs	r2, #76	; 0x4c
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f001 fd6f 	bl	8005d54 <memset>
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	4a0c      	ldr	r2, [pc, #48]	; (80042ac <prvInitialiseNewTask+0x130>)
 800427a:	659a      	str	r2, [r3, #88]	; 0x58
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	4a0c      	ldr	r2, [pc, #48]	; (80042b0 <prvInitialiseNewTask+0x134>)
 8004280:	65da      	str	r2, [r3, #92]	; 0x5c
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	4a0b      	ldr	r2, [pc, #44]	; (80042b4 <prvInitialiseNewTask+0x138>)
 8004286:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	68f9      	ldr	r1, [r7, #12]
 800428c:	69b8      	ldr	r0, [r7, #24]
 800428e:	f001 f90b 	bl	80054a8 <pxPortInitialiseStack>
 8004292:	4602      	mov	r2, r0
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042a4:	bf00      	nop
 80042a6:	3720      	adds	r7, #32
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20001ba0 	.word	0x20001ba0
 80042b0:	20001c08 	.word	0x20001c08
 80042b4:	20001c70 	.word	0x20001c70

080042b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042c0:	f001 f9e4 	bl	800568c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042c4:	4b2d      	ldr	r3, [pc, #180]	; (800437c <prvAddNewTaskToReadyList+0xc4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3301      	adds	r3, #1
 80042ca:	4a2c      	ldr	r2, [pc, #176]	; (800437c <prvAddNewTaskToReadyList+0xc4>)
 80042cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042ce:	4b2c      	ldr	r3, [pc, #176]	; (8004380 <prvAddNewTaskToReadyList+0xc8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042d6:	4a2a      	ldr	r2, [pc, #168]	; (8004380 <prvAddNewTaskToReadyList+0xc8>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042dc:	4b27      	ldr	r3, [pc, #156]	; (800437c <prvAddNewTaskToReadyList+0xc4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d110      	bne.n	8004306 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042e4:	f000 fc28 	bl	8004b38 <prvInitialiseTaskLists>
 80042e8:	e00d      	b.n	8004306 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042ea:	4b26      	ldr	r3, [pc, #152]	; (8004384 <prvAddNewTaskToReadyList+0xcc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042f2:	4b23      	ldr	r3, [pc, #140]	; (8004380 <prvAddNewTaskToReadyList+0xc8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d802      	bhi.n	8004306 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004300:	4a1f      	ldr	r2, [pc, #124]	; (8004380 <prvAddNewTaskToReadyList+0xc8>)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004306:	4b20      	ldr	r3, [pc, #128]	; (8004388 <prvAddNewTaskToReadyList+0xd0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3301      	adds	r3, #1
 800430c:	4a1e      	ldr	r2, [pc, #120]	; (8004388 <prvAddNewTaskToReadyList+0xd0>)
 800430e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004310:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <prvAddNewTaskToReadyList+0xd0>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431c:	4b1b      	ldr	r3, [pc, #108]	; (800438c <prvAddNewTaskToReadyList+0xd4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d903      	bls.n	800432c <prvAddNewTaskToReadyList+0x74>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	4a18      	ldr	r2, [pc, #96]	; (800438c <prvAddNewTaskToReadyList+0xd4>)
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4a15      	ldr	r2, [pc, #84]	; (8004390 <prvAddNewTaskToReadyList+0xd8>)
 800433a:	441a      	add	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	4619      	mov	r1, r3
 8004342:	4610      	mov	r0, r2
 8004344:	f7ff f8d1 	bl	80034ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004348:	f001 f9d0 	bl	80056ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800434c:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <prvAddNewTaskToReadyList+0xcc>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00e      	beq.n	8004372 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004354:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <prvAddNewTaskToReadyList+0xc8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	429a      	cmp	r2, r3
 8004360:	d207      	bcs.n	8004372 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004362:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <prvAddNewTaskToReadyList+0xdc>)
 8004364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000e28 	.word	0x20000e28
 8004380:	20000954 	.word	0x20000954
 8004384:	20000e34 	.word	0x20000e34
 8004388:	20000e44 	.word	0x20000e44
 800438c:	20000e30 	.word	0x20000e30
 8004390:	20000958 	.word	0x20000958
 8004394:	e000ed04 	.word	0xe000ed04

08004398 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d017      	beq.n	80043da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043aa:	4b13      	ldr	r3, [pc, #76]	; (80043f8 <vTaskDelay+0x60>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <vTaskDelay+0x30>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	60bb      	str	r3, [r7, #8]
}
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043c8:	f000 f88a 	bl	80044e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043cc:	2100      	movs	r1, #0
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fd04 	bl	8004ddc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043d4:	f000 f892 	bl	80044fc <xTaskResumeAll>
 80043d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d107      	bne.n	80043f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <vTaskDelay+0x64>)
 80043e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043f0:	bf00      	nop
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20000e50 	.word	0x20000e50
 80043fc:	e000ed04 	.word	0xe000ed04

08004400 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	; 0x28
 8004404:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800440e:	463a      	mov	r2, r7
 8004410:	1d39      	adds	r1, r7, #4
 8004412:	f107 0308 	add.w	r3, r7, #8
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff f80a 	bl	8003430 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800441c:	6839      	ldr	r1, [r7, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	9202      	str	r2, [sp, #8]
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	2300      	movs	r3, #0
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	2300      	movs	r3, #0
 800442c:	460a      	mov	r2, r1
 800442e:	4924      	ldr	r1, [pc, #144]	; (80044c0 <vTaskStartScheduler+0xc0>)
 8004430:	4824      	ldr	r0, [pc, #144]	; (80044c4 <vTaskStartScheduler+0xc4>)
 8004432:	f7ff fe01 	bl	8004038 <xTaskCreateStatic>
 8004436:	4603      	mov	r3, r0
 8004438:	4a23      	ldr	r2, [pc, #140]	; (80044c8 <vTaskStartScheduler+0xc8>)
 800443a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800443c:	4b22      	ldr	r3, [pc, #136]	; (80044c8 <vTaskStartScheduler+0xc8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004444:	2301      	movs	r3, #1
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	e001      	b.n	800444e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d102      	bne.n	800445a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004454:	f000 fd16 	bl	8004e84 <xTimerCreateTimerTask>
 8004458:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d11b      	bne.n	8004498 <vTaskStartScheduler+0x98>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	613b      	str	r3, [r7, #16]
}
 8004472:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004474:	4b15      	ldr	r3, [pc, #84]	; (80044cc <vTaskStartScheduler+0xcc>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3354      	adds	r3, #84	; 0x54
 800447a:	4a15      	ldr	r2, [pc, #84]	; (80044d0 <vTaskStartScheduler+0xd0>)
 800447c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800447e:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <vTaskStartScheduler+0xd4>)
 8004480:	f04f 32ff 	mov.w	r2, #4294967295
 8004484:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004486:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <vTaskStartScheduler+0xd8>)
 8004488:	2201      	movs	r2, #1
 800448a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <vTaskStartScheduler+0xdc>)
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004492:	f001 f889 	bl	80055a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004496:	e00e      	b.n	80044b6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d10a      	bne.n	80044b6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	60fb      	str	r3, [r7, #12]
}
 80044b2:	bf00      	nop
 80044b4:	e7fe      	b.n	80044b4 <vTaskStartScheduler+0xb4>
}
 80044b6:	bf00      	nop
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	08005f8c 	.word	0x08005f8c
 80044c4:	08004b09 	.word	0x08004b09
 80044c8:	20000e4c 	.word	0x20000e4c
 80044cc:	20000954 	.word	0x20000954
 80044d0:	2000005c 	.word	0x2000005c
 80044d4:	20000e48 	.word	0x20000e48
 80044d8:	20000e34 	.word	0x20000e34
 80044dc:	20000e2c 	.word	0x20000e2c

080044e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80044e4:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <vTaskSuspendAll+0x18>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3301      	adds	r3, #1
 80044ea:	4a03      	ldr	r2, [pc, #12]	; (80044f8 <vTaskSuspendAll+0x18>)
 80044ec:	6013      	str	r3, [r2, #0]
}
 80044ee:	bf00      	nop
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	20000e50 	.word	0x20000e50

080044fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800450a:	4b42      	ldr	r3, [pc, #264]	; (8004614 <xTaskResumeAll+0x118>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <xTaskResumeAll+0x2c>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	603b      	str	r3, [r7, #0]
}
 8004524:	bf00      	nop
 8004526:	e7fe      	b.n	8004526 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004528:	f001 f8b0 	bl	800568c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800452c:	4b39      	ldr	r3, [pc, #228]	; (8004614 <xTaskResumeAll+0x118>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3b01      	subs	r3, #1
 8004532:	4a38      	ldr	r2, [pc, #224]	; (8004614 <xTaskResumeAll+0x118>)
 8004534:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004536:	4b37      	ldr	r3, [pc, #220]	; (8004614 <xTaskResumeAll+0x118>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d162      	bne.n	8004604 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800453e:	4b36      	ldr	r3, [pc, #216]	; (8004618 <xTaskResumeAll+0x11c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d05e      	beq.n	8004604 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004546:	e02f      	b.n	80045a8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004548:	4b34      	ldr	r3, [pc, #208]	; (800461c <xTaskResumeAll+0x120>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3318      	adds	r3, #24
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff f823 	bl	80035a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3304      	adds	r3, #4
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff f81e 	bl	80035a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004568:	4b2d      	ldr	r3, [pc, #180]	; (8004620 <xTaskResumeAll+0x124>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d903      	bls.n	8004578 <xTaskResumeAll+0x7c>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	4a2a      	ldr	r2, [pc, #168]	; (8004620 <xTaskResumeAll+0x124>)
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4a27      	ldr	r2, [pc, #156]	; (8004624 <xTaskResumeAll+0x128>)
 8004586:	441a      	add	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3304      	adds	r3, #4
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f7fe ffab 	bl	80034ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004598:	4b23      	ldr	r3, [pc, #140]	; (8004628 <xTaskResumeAll+0x12c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459e:	429a      	cmp	r2, r3
 80045a0:	d302      	bcc.n	80045a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80045a2:	4b22      	ldr	r3, [pc, #136]	; (800462c <xTaskResumeAll+0x130>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045a8:	4b1c      	ldr	r3, [pc, #112]	; (800461c <xTaskResumeAll+0x120>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1cb      	bne.n	8004548 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045b6:	f000 fb61 	bl	8004c7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045ba:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <xTaskResumeAll+0x134>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d010      	beq.n	80045e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045c6:	f000 f845 	bl	8004654 <xTaskIncrementTick>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80045d0:	4b16      	ldr	r3, [pc, #88]	; (800462c <xTaskResumeAll+0x130>)
 80045d2:	2201      	movs	r2, #1
 80045d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3b01      	subs	r3, #1
 80045da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f1      	bne.n	80045c6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80045e2:	4b13      	ldr	r3, [pc, #76]	; (8004630 <xTaskResumeAll+0x134>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045e8:	4b10      	ldr	r3, [pc, #64]	; (800462c <xTaskResumeAll+0x130>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d009      	beq.n	8004604 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045f4:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <xTaskResumeAll+0x138>)
 80045f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004604:	f001 f872 	bl	80056ec <vPortExitCritical>

	return xAlreadyYielded;
 8004608:	68bb      	ldr	r3, [r7, #8]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000e50 	.word	0x20000e50
 8004618:	20000e28 	.word	0x20000e28
 800461c:	20000de8 	.word	0x20000de8
 8004620:	20000e30 	.word	0x20000e30
 8004624:	20000958 	.word	0x20000958
 8004628:	20000954 	.word	0x20000954
 800462c:	20000e3c 	.word	0x20000e3c
 8004630:	20000e38 	.word	0x20000e38
 8004634:	e000ed04 	.word	0xe000ed04

08004638 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800463e:	4b04      	ldr	r3, [pc, #16]	; (8004650 <xTaskGetTickCount+0x18>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004644:	687b      	ldr	r3, [r7, #4]
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr
 8004650:	20000e2c 	.word	0x20000e2c

08004654 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800465e:	4b51      	ldr	r3, [pc, #324]	; (80047a4 <xTaskIncrementTick+0x150>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f040 808e 	bne.w	8004784 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004668:	4b4f      	ldr	r3, [pc, #316]	; (80047a8 <xTaskIncrementTick+0x154>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004670:	4a4d      	ldr	r2, [pc, #308]	; (80047a8 <xTaskIncrementTick+0x154>)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d120      	bne.n	80046be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800467c:	4b4b      	ldr	r3, [pc, #300]	; (80047ac <xTaskIncrementTick+0x158>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <xTaskIncrementTick+0x48>
	__asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	603b      	str	r3, [r7, #0]
}
 8004698:	bf00      	nop
 800469a:	e7fe      	b.n	800469a <xTaskIncrementTick+0x46>
 800469c:	4b43      	ldr	r3, [pc, #268]	; (80047ac <xTaskIncrementTick+0x158>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	4b43      	ldr	r3, [pc, #268]	; (80047b0 <xTaskIncrementTick+0x15c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a41      	ldr	r2, [pc, #260]	; (80047ac <xTaskIncrementTick+0x158>)
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	4a41      	ldr	r2, [pc, #260]	; (80047b0 <xTaskIncrementTick+0x15c>)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	4b40      	ldr	r3, [pc, #256]	; (80047b4 <xTaskIncrementTick+0x160>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3301      	adds	r3, #1
 80046b6:	4a3f      	ldr	r2, [pc, #252]	; (80047b4 <xTaskIncrementTick+0x160>)
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	f000 fadf 	bl	8004c7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046be:	4b3e      	ldr	r3, [pc, #248]	; (80047b8 <xTaskIncrementTick+0x164>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d34e      	bcc.n	8004766 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046c8:	4b38      	ldr	r3, [pc, #224]	; (80047ac <xTaskIncrementTick+0x158>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <xTaskIncrementTick+0x82>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <xTaskIncrementTick+0x84>
 80046d6:	2300      	movs	r3, #0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d004      	beq.n	80046e6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046dc:	4b36      	ldr	r3, [pc, #216]	; (80047b8 <xTaskIncrementTick+0x164>)
 80046de:	f04f 32ff 	mov.w	r2, #4294967295
 80046e2:	601a      	str	r2, [r3, #0]
					break;
 80046e4:	e03f      	b.n	8004766 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046e6:	4b31      	ldr	r3, [pc, #196]	; (80047ac <xTaskIncrementTick+0x158>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d203      	bcs.n	8004706 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046fe:	4a2e      	ldr	r2, [pc, #184]	; (80047b8 <xTaskIncrementTick+0x164>)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6013      	str	r3, [r2, #0]
						break;
 8004704:	e02f      	b.n	8004766 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	3304      	adds	r3, #4
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe ff48 	bl	80035a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	3318      	adds	r3, #24
 800471c:	4618      	mov	r0, r3
 800471e:	f7fe ff3f 	bl	80035a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004726:	4b25      	ldr	r3, [pc, #148]	; (80047bc <xTaskIncrementTick+0x168>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d903      	bls.n	8004736 <xTaskIncrementTick+0xe2>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	4a22      	ldr	r2, [pc, #136]	; (80047bc <xTaskIncrementTick+0x168>)
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4a1f      	ldr	r2, [pc, #124]	; (80047c0 <xTaskIncrementTick+0x16c>)
 8004744:	441a      	add	r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	3304      	adds	r3, #4
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f7fe fecc 	bl	80034ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004756:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <xTaskIncrementTick+0x170>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	429a      	cmp	r2, r3
 800475e:	d3b3      	bcc.n	80046c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004760:	2301      	movs	r3, #1
 8004762:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004764:	e7b0      	b.n	80046c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004766:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <xTaskIncrementTick+0x170>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476c:	4914      	ldr	r1, [pc, #80]	; (80047c0 <xTaskIncrementTick+0x16c>)
 800476e:	4613      	mov	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d907      	bls.n	800478e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800477e:	2301      	movs	r3, #1
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	e004      	b.n	800478e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004784:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <xTaskIncrementTick+0x174>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3301      	adds	r3, #1
 800478a:	4a0f      	ldr	r2, [pc, #60]	; (80047c8 <xTaskIncrementTick+0x174>)
 800478c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800478e:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <xTaskIncrementTick+0x178>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004796:	2301      	movs	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800479a:	697b      	ldr	r3, [r7, #20]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20000e50 	.word	0x20000e50
 80047a8:	20000e2c 	.word	0x20000e2c
 80047ac:	20000de0 	.word	0x20000de0
 80047b0:	20000de4 	.word	0x20000de4
 80047b4:	20000e40 	.word	0x20000e40
 80047b8:	20000e48 	.word	0x20000e48
 80047bc:	20000e30 	.word	0x20000e30
 80047c0:	20000958 	.word	0x20000958
 80047c4:	20000954 	.word	0x20000954
 80047c8:	20000e38 	.word	0x20000e38
 80047cc:	20000e3c 	.word	0x20000e3c

080047d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047d6:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <vTaskSwitchContext+0xb0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047de:	4b29      	ldr	r3, [pc, #164]	; (8004884 <vTaskSwitchContext+0xb4>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047e4:	e046      	b.n	8004874 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80047e6:	4b27      	ldr	r3, [pc, #156]	; (8004884 <vTaskSwitchContext+0xb4>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80047ec:	4b26      	ldr	r3, [pc, #152]	; (8004888 <vTaskSwitchContext+0xb8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	e010      	b.n	8004816 <vTaskSwitchContext+0x46>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10a      	bne.n	8004810 <vTaskSwitchContext+0x40>
	__asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	607b      	str	r3, [r7, #4]
}
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <vTaskSwitchContext+0x3e>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3b01      	subs	r3, #1
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	491d      	ldr	r1, [pc, #116]	; (800488c <vTaskSwitchContext+0xbc>)
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0e4      	beq.n	80047f4 <vTaskSwitchContext+0x24>
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4a15      	ldr	r2, [pc, #84]	; (800488c <vTaskSwitchContext+0xbc>)
 8004836:	4413      	add	r3, r2
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	605a      	str	r2, [r3, #4]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	3308      	adds	r3, #8
 800484c:	429a      	cmp	r2, r3
 800484e:	d104      	bne.n	800485a <vTaskSwitchContext+0x8a>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	605a      	str	r2, [r3, #4]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4a0b      	ldr	r2, [pc, #44]	; (8004890 <vTaskSwitchContext+0xc0>)
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	4a08      	ldr	r2, [pc, #32]	; (8004888 <vTaskSwitchContext+0xb8>)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800486a:	4b09      	ldr	r3, [pc, #36]	; (8004890 <vTaskSwitchContext+0xc0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3354      	adds	r3, #84	; 0x54
 8004870:	4a08      	ldr	r2, [pc, #32]	; (8004894 <vTaskSwitchContext+0xc4>)
 8004872:	6013      	str	r3, [r2, #0]
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000e50 	.word	0x20000e50
 8004884:	20000e3c 	.word	0x20000e3c
 8004888:	20000e30 	.word	0x20000e30
 800488c:	20000958 	.word	0x20000958
 8004890:	20000954 	.word	0x20000954
 8004894:	2000005c 	.word	0x2000005c

08004898 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	60fb      	str	r3, [r7, #12]
}
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048be:	4b07      	ldr	r3, [pc, #28]	; (80048dc <vTaskPlaceOnEventList+0x44>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3318      	adds	r3, #24
 80048c4:	4619      	mov	r1, r3
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fe fe32 	bl	8003530 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048cc:	2101      	movs	r1, #1
 80048ce:	6838      	ldr	r0, [r7, #0]
 80048d0:	f000 fa84 	bl	8004ddc <prvAddCurrentTaskToDelayedList>
}
 80048d4:	bf00      	nop
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000954 	.word	0x20000954

080048e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	617b      	str	r3, [r7, #20]
}
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <vTaskPlaceOnEventListRestricted+0x54>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3318      	adds	r3, #24
 800490e:	4619      	mov	r1, r3
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f7fe fdea 	bl	80034ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800491c:	f04f 33ff 	mov.w	r3, #4294967295
 8004920:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	68b8      	ldr	r0, [r7, #8]
 8004926:	f000 fa59 	bl	8004ddc <prvAddCurrentTaskToDelayedList>
	}
 800492a:	bf00      	nop
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000954 	.word	0x20000954

08004938 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	60fb      	str	r3, [r7, #12]
}
 8004960:	bf00      	nop
 8004962:	e7fe      	b.n	8004962 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	3318      	adds	r3, #24
 8004968:	4618      	mov	r0, r3
 800496a:	f7fe fe19 	bl	80035a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800496e:	4b1e      	ldr	r3, [pc, #120]	; (80049e8 <xTaskRemoveFromEventList+0xb0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d11d      	bne.n	80049b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	3304      	adds	r3, #4
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe fe10 	bl	80035a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004984:	4b19      	ldr	r3, [pc, #100]	; (80049ec <xTaskRemoveFromEventList+0xb4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d903      	bls.n	8004994 <xTaskRemoveFromEventList+0x5c>
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	4a16      	ldr	r2, [pc, #88]	; (80049ec <xTaskRemoveFromEventList+0xb4>)
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4a13      	ldr	r2, [pc, #76]	; (80049f0 <xTaskRemoveFromEventList+0xb8>)
 80049a2:	441a      	add	r2, r3
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f7fe fd9d 	bl	80034ea <vListInsertEnd>
 80049b0:	e005      	b.n	80049be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	3318      	adds	r3, #24
 80049b6:	4619      	mov	r1, r3
 80049b8:	480e      	ldr	r0, [pc, #56]	; (80049f4 <xTaskRemoveFromEventList+0xbc>)
 80049ba:	f7fe fd96 	bl	80034ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c2:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <xTaskRemoveFromEventList+0xc0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d905      	bls.n	80049d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049d0:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <xTaskRemoveFromEventList+0xc4>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	e001      	b.n	80049dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80049dc:	697b      	ldr	r3, [r7, #20]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000e50 	.word	0x20000e50
 80049ec:	20000e30 	.word	0x20000e30
 80049f0:	20000958 	.word	0x20000958
 80049f4:	20000de8 	.word	0x20000de8
 80049f8:	20000954 	.word	0x20000954
 80049fc:	20000e3c 	.word	0x20000e3c

08004a00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a08:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <vTaskInternalSetTimeOutState+0x24>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <vTaskInternalSetTimeOutState+0x28>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	605a      	str	r2, [r3, #4]
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	20000e40 	.word	0x20000e40
 8004a28:	20000e2c 	.word	0x20000e2c

08004a2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	613b      	str	r3, [r7, #16]
}
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	60fb      	str	r3, [r7, #12]
}
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004a6e:	f000 fe0d 	bl	800568c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a72:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <xTaskCheckForTimeOut+0xbc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8a:	d102      	bne.n	8004a92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	e023      	b.n	8004ada <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4b15      	ldr	r3, [pc, #84]	; (8004aec <xTaskCheckForTimeOut+0xc0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d007      	beq.n	8004aae <xTaskCheckForTimeOut+0x82>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d302      	bcc.n	8004aae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	61fb      	str	r3, [r7, #28]
 8004aac:	e015      	b.n	8004ada <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d20b      	bcs.n	8004ad0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	1ad2      	subs	r2, r2, r3
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff ff9b 	bl	8004a00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004aca:	2300      	movs	r3, #0
 8004acc:	61fb      	str	r3, [r7, #28]
 8004ace:	e004      	b.n	8004ada <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ada:	f000 fe07 	bl	80056ec <vPortExitCritical>

	return xReturn;
 8004ade:	69fb      	ldr	r3, [r7, #28]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3720      	adds	r7, #32
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000e2c 	.word	0x20000e2c
 8004aec:	20000e40 	.word	0x20000e40

08004af0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004af4:	4b03      	ldr	r3, [pc, #12]	; (8004b04 <vTaskMissedYield+0x14>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
}
 8004afa:	bf00      	nop
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000e3c 	.word	0x20000e3c

08004b08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b10:	f000 f852 	bl	8004bb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <prvIdleTask+0x28>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d9f9      	bls.n	8004b10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <prvIdleTask+0x2c>)
 8004b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b2c:	e7f0      	b.n	8004b10 <prvIdleTask+0x8>
 8004b2e:	bf00      	nop
 8004b30:	20000958 	.word	0x20000958
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b3e:	2300      	movs	r3, #0
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	e00c      	b.n	8004b5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	4613      	mov	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4a12      	ldr	r2, [pc, #72]	; (8004b98 <prvInitialiseTaskLists+0x60>)
 8004b50:	4413      	add	r3, r2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fe fc9e 	bl	8003494 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	607b      	str	r3, [r7, #4]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b37      	cmp	r3, #55	; 0x37
 8004b62:	d9ef      	bls.n	8004b44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b64:	480d      	ldr	r0, [pc, #52]	; (8004b9c <prvInitialiseTaskLists+0x64>)
 8004b66:	f7fe fc95 	bl	8003494 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b6a:	480d      	ldr	r0, [pc, #52]	; (8004ba0 <prvInitialiseTaskLists+0x68>)
 8004b6c:	f7fe fc92 	bl	8003494 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b70:	480c      	ldr	r0, [pc, #48]	; (8004ba4 <prvInitialiseTaskLists+0x6c>)
 8004b72:	f7fe fc8f 	bl	8003494 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b76:	480c      	ldr	r0, [pc, #48]	; (8004ba8 <prvInitialiseTaskLists+0x70>)
 8004b78:	f7fe fc8c 	bl	8003494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b7c:	480b      	ldr	r0, [pc, #44]	; (8004bac <prvInitialiseTaskLists+0x74>)
 8004b7e:	f7fe fc89 	bl	8003494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b82:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <prvInitialiseTaskLists+0x78>)
 8004b84:	4a05      	ldr	r2, [pc, #20]	; (8004b9c <prvInitialiseTaskLists+0x64>)
 8004b86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b88:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <prvInitialiseTaskLists+0x7c>)
 8004b8a:	4a05      	ldr	r2, [pc, #20]	; (8004ba0 <prvInitialiseTaskLists+0x68>)
 8004b8c:	601a      	str	r2, [r3, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000958 	.word	0x20000958
 8004b9c:	20000db8 	.word	0x20000db8
 8004ba0:	20000dcc 	.word	0x20000dcc
 8004ba4:	20000de8 	.word	0x20000de8
 8004ba8:	20000dfc 	.word	0x20000dfc
 8004bac:	20000e14 	.word	0x20000e14
 8004bb0:	20000de0 	.word	0x20000de0
 8004bb4:	20000de4 	.word	0x20000de4

08004bb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bbe:	e019      	b.n	8004bf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004bc0:	f000 fd64 	bl	800568c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004bc4:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <prvCheckTasksWaitingTermination+0x50>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fe fce5 	bl	80035a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <prvCheckTasksWaitingTermination+0x54>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	4a0b      	ldr	r2, [pc, #44]	; (8004c0c <prvCheckTasksWaitingTermination+0x54>)
 8004bde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <prvCheckTasksWaitingTermination+0x58>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <prvCheckTasksWaitingTermination+0x58>)
 8004be8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bea:	f000 fd7f 	bl	80056ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f810 	bl	8004c14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bf4:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <prvCheckTasksWaitingTermination+0x58>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e1      	bne.n	8004bc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bfc:	bf00      	nop
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000dfc 	.word	0x20000dfc
 8004c0c:	20000e28 	.word	0x20000e28
 8004c10:	20000e10 	.word	0x20000e10

08004c14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3354      	adds	r3, #84	; 0x54
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 f89f 	bl	8005d64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d108      	bne.n	8004c42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 feed 	bl	8005a14 <vPortFree>
				vPortFree( pxTCB );
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 feea 	bl	8005a14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c40:	e018      	b.n	8004c74 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d103      	bne.n	8004c54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fee1 	bl	8005a14 <vPortFree>
	}
 8004c52:	e00f      	b.n	8004c74 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d00a      	beq.n	8004c74 <prvDeleteTCB+0x60>
	__asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	60fb      	str	r3, [r7, #12]
}
 8004c70:	bf00      	nop
 8004c72:	e7fe      	b.n	8004c72 <prvDeleteTCB+0x5e>
	}
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c82:	4b0e      	ldr	r3, [pc, #56]	; (8004cbc <prvResetNextTaskUnblockTime+0x40>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <prvResetNextTaskUnblockTime+0x14>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e000      	b.n	8004c92 <prvResetNextTaskUnblockTime+0x16>
 8004c90:	2300      	movs	r3, #0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d004      	beq.n	8004ca0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c96:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <prvResetNextTaskUnblockTime+0x44>)
 8004c98:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c9e:	e008      	b.n	8004cb2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <prvResetNextTaskUnblockTime+0x40>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	4a04      	ldr	r2, [pc, #16]	; (8004cc0 <prvResetNextTaskUnblockTime+0x44>)
 8004cb0:	6013      	str	r3, [r2, #0]
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr
 8004cbc:	20000de0 	.word	0x20000de0
 8004cc0:	20000e48 	.word	0x20000e48

08004cc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cca:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <xTaskGetSchedulerState+0x34>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d102      	bne.n	8004cd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	607b      	str	r3, [r7, #4]
 8004cd6:	e008      	b.n	8004cea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cd8:	4b08      	ldr	r3, [pc, #32]	; (8004cfc <xTaskGetSchedulerState+0x38>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d102      	bne.n	8004ce6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	607b      	str	r3, [r7, #4]
 8004ce4:	e001      	b.n	8004cea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004cea:	687b      	ldr	r3, [r7, #4]
	}
 8004cec:	4618      	mov	r0, r3
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20000e34 	.word	0x20000e34
 8004cfc:	20000e50 	.word	0x20000e50

08004d00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d056      	beq.n	8004dc4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d16:	4b2e      	ldr	r3, [pc, #184]	; (8004dd0 <xTaskPriorityDisinherit+0xd0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d00a      	beq.n	8004d36 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	60fb      	str	r3, [r7, #12]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	60bb      	str	r3, [r7, #8]
}
 8004d50:	bf00      	nop
 8004d52:	e7fe      	b.n	8004d52 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d58:	1e5a      	subs	r2, r3, #1
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d02c      	beq.n	8004dc4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d128      	bne.n	8004dc4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	3304      	adds	r3, #4
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fe fc12 	bl	80035a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d94:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <xTaskPriorityDisinherit+0xd4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d903      	bls.n	8004da4 <xTaskPriorityDisinherit+0xa4>
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	4a0c      	ldr	r2, [pc, #48]	; (8004dd4 <xTaskPriorityDisinherit+0xd4>)
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4a09      	ldr	r2, [pc, #36]	; (8004dd8 <xTaskPriorityDisinherit+0xd8>)
 8004db2:	441a      	add	r2, r3
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f7fe fb95 	bl	80034ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004dc4:	697b      	ldr	r3, [r7, #20]
	}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000954 	.word	0x20000954
 8004dd4:	20000e30 	.word	0x20000e30
 8004dd8:	20000958 	.word	0x20000958

08004ddc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004de6:	4b21      	ldr	r3, [pc, #132]	; (8004e6c <prvAddCurrentTaskToDelayedList+0x90>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dec:	4b20      	ldr	r3, [pc, #128]	; (8004e70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3304      	adds	r3, #4
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fe fbd4 	bl	80035a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfe:	d10a      	bne.n	8004e16 <prvAddCurrentTaskToDelayedList+0x3a>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e06:	4b1a      	ldr	r3, [pc, #104]	; (8004e70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4819      	ldr	r0, [pc, #100]	; (8004e74 <prvAddCurrentTaskToDelayedList+0x98>)
 8004e10:	f7fe fb6b 	bl	80034ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e14:	e026      	b.n	8004e64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e1e:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d209      	bcs.n	8004e42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f7fe fb78 	bl	8003530 <vListInsert>
}
 8004e40:	e010      	b.n	8004e64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e42:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	f7fe fb6e 	bl	8003530 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d202      	bcs.n	8004e64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e5e:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	6013      	str	r3, [r2, #0]
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20000e2c 	.word	0x20000e2c
 8004e70:	20000954 	.word	0x20000954
 8004e74:	20000e14 	.word	0x20000e14
 8004e78:	20000de4 	.word	0x20000de4
 8004e7c:	20000de0 	.word	0x20000de0
 8004e80:	20000e48 	.word	0x20000e48

08004e84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	; 0x28
 8004e88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e8e:	f000 facb 	bl	8005428 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e92:	4b1c      	ldr	r3, [pc, #112]	; (8004f04 <xTimerCreateTimerTask+0x80>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d021      	beq.n	8004ede <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ea2:	1d3a      	adds	r2, r7, #4
 8004ea4:	f107 0108 	add.w	r1, r7, #8
 8004ea8:	f107 030c 	add.w	r3, r7, #12
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fe fad7 	bl	8003460 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	9202      	str	r2, [sp, #8]
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	460a      	mov	r2, r1
 8004ec4:	4910      	ldr	r1, [pc, #64]	; (8004f08 <xTimerCreateTimerTask+0x84>)
 8004ec6:	4811      	ldr	r0, [pc, #68]	; (8004f0c <xTimerCreateTimerTask+0x88>)
 8004ec8:	f7ff f8b6 	bl	8004038 <xTaskCreateStatic>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <xTimerCreateTimerTask+0x8c>)
 8004ed0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ed2:	4b0f      	ldr	r3, [pc, #60]	; (8004f10 <xTimerCreateTimerTask+0x8c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004eda:	2301      	movs	r3, #1
 8004edc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	613b      	str	r3, [r7, #16]
}
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004efa:	697b      	ldr	r3, [r7, #20]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20000e84 	.word	0x20000e84
 8004f08:	08005f94 	.word	0x08005f94
 8004f0c:	08005031 	.word	0x08005031
 8004f10:	20000e88 	.word	0x20000e88

08004f14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	; 0x28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	623b      	str	r3, [r7, #32]
}
 8004f3e:	bf00      	nop
 8004f40:	e7fe      	b.n	8004f40 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f42:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <xTimerGenericCommand+0x98>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d02a      	beq.n	8004fa0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b05      	cmp	r3, #5
 8004f5a:	dc18      	bgt.n	8004f8e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f5c:	f7ff feb2 	bl	8004cc4 <xTaskGetSchedulerState>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d109      	bne.n	8004f7a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f66:	4b11      	ldr	r3, [pc, #68]	; (8004fac <xTimerGenericCommand+0x98>)
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	f107 0110 	add.w	r1, r7, #16
 8004f6e:	2300      	movs	r3, #0
 8004f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f72:	f7fe fc7f 	bl	8003874 <xQueueGenericSend>
 8004f76:	6278      	str	r0, [r7, #36]	; 0x24
 8004f78:	e012      	b.n	8004fa0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f7a:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <xTimerGenericCommand+0x98>)
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	f107 0110 	add.w	r1, r7, #16
 8004f82:	2300      	movs	r3, #0
 8004f84:	2200      	movs	r2, #0
 8004f86:	f7fe fc75 	bl	8003874 <xQueueGenericSend>
 8004f8a:	6278      	str	r0, [r7, #36]	; 0x24
 8004f8c:	e008      	b.n	8004fa0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f8e:	4b07      	ldr	r3, [pc, #28]	; (8004fac <xTimerGenericCommand+0x98>)
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	f107 0110 	add.w	r1, r7, #16
 8004f96:	2300      	movs	r3, #0
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	f7fe fd69 	bl	8003a70 <xQueueGenericSendFromISR>
 8004f9e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3728      	adds	r7, #40	; 0x28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000e84 	.word	0x20000e84

08004fb0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fba:	4b1c      	ldr	r3, [pc, #112]	; (800502c <prvProcessExpiredTimer+0x7c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fe fae9 	bl	80035a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d122      	bne.n	800501c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	18d1      	adds	r1, r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	6978      	ldr	r0, [r7, #20]
 8004fe4:	f000 f8c8 	bl	8005178 <prvInsertTimerInActiveList>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d016      	beq.n	800501c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fee:	2300      	movs	r3, #0
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	6978      	ldr	r0, [r7, #20]
 8004ffa:	f7ff ff8b 	bl	8004f14 <xTimerGenericCommand>
 8004ffe:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10a      	bne.n	800501c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	60fb      	str	r3, [r7, #12]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	6978      	ldr	r0, [r7, #20]
 8005022:	4798      	blx	r3
}
 8005024:	bf00      	nop
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	20000e7c 	.word	0x20000e7c

08005030 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005038:	f107 0308 	add.w	r3, r7, #8
 800503c:	4618      	mov	r0, r3
 800503e:	f000 f857 	bl	80050f0 <prvGetNextExpireTime>
 8005042:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4619      	mov	r1, r3
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f803 	bl	8005054 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800504e:	f000 f8d5 	bl	80051fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005052:	e7f1      	b.n	8005038 <prvTimerTask+0x8>

08005054 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800505e:	f7ff fa3f 	bl	80044e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005062:	f107 0308 	add.w	r3, r7, #8
 8005066:	4618      	mov	r0, r3
 8005068:	f000 f866 	bl	8005138 <prvSampleTimeNow>
 800506c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d130      	bne.n	80050d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10a      	bne.n	8005090 <prvProcessTimerOrBlockTask+0x3c>
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	429a      	cmp	r2, r3
 8005080:	d806      	bhi.n	8005090 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005082:	f7ff fa3b 	bl	80044fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005086:	68f9      	ldr	r1, [r7, #12]
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff ff91 	bl	8004fb0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800508e:	e024      	b.n	80050da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d008      	beq.n	80050a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005096:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <prvProcessTimerOrBlockTask+0x90>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	bf0c      	ite	eq
 80050a0:	2301      	moveq	r3, #1
 80050a2:	2300      	movne	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050a8:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <prvProcessTimerOrBlockTask+0x94>)
 80050aa:	6818      	ldr	r0, [r3, #0]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	4619      	mov	r1, r3
 80050b6:	f7fe ff8b 	bl	8003fd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80050ba:	f7ff fa1f 	bl	80044fc <xTaskResumeAll>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80050c4:	4b09      	ldr	r3, [pc, #36]	; (80050ec <prvProcessTimerOrBlockTask+0x98>)
 80050c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	f3bf 8f6f 	isb	sy
}
 80050d4:	e001      	b.n	80050da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80050d6:	f7ff fa11 	bl	80044fc <xTaskResumeAll>
}
 80050da:	bf00      	nop
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20000e80 	.word	0x20000e80
 80050e8:	20000e84 	.word	0x20000e84
 80050ec:	e000ed04 	.word	0xe000ed04

080050f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80050f8:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <prvGetNextExpireTime+0x44>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	bf0c      	ite	eq
 8005102:	2301      	moveq	r3, #1
 8005104:	2300      	movne	r3, #0
 8005106:	b2db      	uxtb	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d105      	bne.n	8005122 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005116:	4b07      	ldr	r3, [pc, #28]	; (8005134 <prvGetNextExpireTime+0x44>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	e001      	b.n	8005126 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005126:	68fb      	ldr	r3, [r7, #12]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20000e7c 	.word	0x20000e7c

08005138 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005140:	f7ff fa7a 	bl	8004638 <xTaskGetTickCount>
 8005144:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005146:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <prvSampleTimeNow+0x3c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	429a      	cmp	r2, r3
 800514e:	d205      	bcs.n	800515c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005150:	f000 f908 	bl	8005364 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	e002      	b.n	8005162 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005162:	4a04      	ldr	r2, [pc, #16]	; (8005174 <prvSampleTimeNow+0x3c>)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005168:	68fb      	ldr	r3, [r7, #12]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	20000e8c 	.word	0x20000e8c

08005178 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	429a      	cmp	r2, r3
 800519c:	d812      	bhi.n	80051c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	1ad2      	subs	r2, r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d302      	bcc.n	80051b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80051ac:	2301      	movs	r3, #1
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	e01b      	b.n	80051ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051b2:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <prvInsertTimerInActiveList+0x7c>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4619      	mov	r1, r3
 80051bc:	4610      	mov	r0, r2
 80051be:	f7fe f9b7 	bl	8003530 <vListInsert>
 80051c2:	e012      	b.n	80051ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d206      	bcs.n	80051da <prvInsertTimerInActiveList+0x62>
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d302      	bcc.n	80051da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80051d4:	2301      	movs	r3, #1
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	e007      	b.n	80051ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051da:	4b07      	ldr	r3, [pc, #28]	; (80051f8 <prvInsertTimerInActiveList+0x80>)
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3304      	adds	r3, #4
 80051e2:	4619      	mov	r1, r3
 80051e4:	4610      	mov	r0, r2
 80051e6:	f7fe f9a3 	bl	8003530 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80051ea:	697b      	ldr	r3, [r7, #20]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	20000e80 	.word	0x20000e80
 80051f8:	20000e7c 	.word	0x20000e7c

080051fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08e      	sub	sp, #56	; 0x38
 8005200:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005202:	e09d      	b.n	8005340 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	da18      	bge.n	800523c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800520a:	1d3b      	adds	r3, r7, #4
 800520c:	3304      	adds	r3, #4
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	61fb      	str	r3, [r7, #28]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800522c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005232:	6850      	ldr	r0, [r2, #4]
 8005234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005236:	6892      	ldr	r2, [r2, #8]
 8005238:	4611      	mov	r1, r2
 800523a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	db7e      	blt.n	8005340 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d004      	beq.n	8005258 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	3304      	adds	r3, #4
 8005252:	4618      	mov	r0, r3
 8005254:	f7fe f9a4 	bl	80035a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005258:	463b      	mov	r3, r7
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff ff6c 	bl	8005138 <prvSampleTimeNow>
 8005260:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b09      	cmp	r3, #9
 8005266:	d86a      	bhi.n	800533e <prvProcessReceivedCommands+0x142>
 8005268:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <prvProcessReceivedCommands+0x74>)
 800526a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526e:	bf00      	nop
 8005270:	08005299 	.word	0x08005299
 8005274:	08005299 	.word	0x08005299
 8005278:	08005299 	.word	0x08005299
 800527c:	08005341 	.word	0x08005341
 8005280:	080052f5 	.word	0x080052f5
 8005284:	0800532d 	.word	0x0800532d
 8005288:	08005299 	.word	0x08005299
 800528c:	08005299 	.word	0x08005299
 8005290:	08005341 	.word	0x08005341
 8005294:	080052f5 	.word	0x080052f5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	18d1      	adds	r1, r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052a6:	f7ff ff67 	bl	8005178 <prvInsertTimerInActiveList>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d047      	beq.n	8005340 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052b6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d13f      	bne.n	8005340 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	441a      	add	r2, r3
 80052c8:	2300      	movs	r3, #0
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	2300      	movs	r3, #0
 80052ce:	2100      	movs	r1, #0
 80052d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052d2:	f7ff fe1f 	bl	8004f14 <xTimerGenericCommand>
 80052d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d130      	bne.n	8005340 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	61bb      	str	r3, [r7, #24]
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10a      	bne.n	8005318 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	617b      	str	r3, [r7, #20]
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	699a      	ldr	r2, [r3, #24]
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	18d1      	adds	r1, r2, r3
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005326:	f7ff ff27 	bl	8005178 <prvInsertTimerInActiveList>
					break;
 800532a:	e009      	b.n	8005340 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d104      	bne.n	8005340 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005338:	f000 fb6c 	bl	8005a14 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800533c:	e000      	b.n	8005340 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800533e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <prvProcessReceivedCommands+0x164>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	1d39      	adds	r1, r7, #4
 8005346:	2200      	movs	r2, #0
 8005348:	4618      	mov	r0, r3
 800534a:	f7fe fc29 	bl	8003ba0 <xQueueReceive>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	f47f af57 	bne.w	8005204 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005356:	bf00      	nop
 8005358:	bf00      	nop
 800535a:	3730      	adds	r7, #48	; 0x30
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	20000e84 	.word	0x20000e84

08005364 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800536a:	e045      	b.n	80053f8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800536c:	4b2c      	ldr	r3, [pc, #176]	; (8005420 <prvSwitchTimerLists+0xbc>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005376:	4b2a      	ldr	r3, [pc, #168]	; (8005420 <prvSwitchTimerLists+0xbc>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	3304      	adds	r3, #4
 8005384:	4618      	mov	r0, r3
 8005386:	f7fe f90b 	bl	80035a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d12e      	bne.n	80053f8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4413      	add	r3, r2
 80053a2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d90e      	bls.n	80053ca <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053b8:	4b19      	ldr	r3, [pc, #100]	; (8005420 <prvSwitchTimerLists+0xbc>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3304      	adds	r3, #4
 80053c0:	4619      	mov	r1, r3
 80053c2:	4610      	mov	r0, r2
 80053c4:	f7fe f8b4 	bl	8003530 <vListInsert>
 80053c8:	e016      	b.n	80053f8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053ca:	2300      	movs	r3, #0
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	2300      	movs	r3, #0
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	2100      	movs	r1, #0
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f7ff fd9d 	bl	8004f14 <xTimerGenericCommand>
 80053da:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	603b      	str	r3, [r7, #0]
}
 80053f4:	bf00      	nop
 80053f6:	e7fe      	b.n	80053f6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053f8:	4b09      	ldr	r3, [pc, #36]	; (8005420 <prvSwitchTimerLists+0xbc>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1b4      	bne.n	800536c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005402:	4b07      	ldr	r3, [pc, #28]	; (8005420 <prvSwitchTimerLists+0xbc>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005408:	4b06      	ldr	r3, [pc, #24]	; (8005424 <prvSwitchTimerLists+0xc0>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a04      	ldr	r2, [pc, #16]	; (8005420 <prvSwitchTimerLists+0xbc>)
 800540e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005410:	4a04      	ldr	r2, [pc, #16]	; (8005424 <prvSwitchTimerLists+0xc0>)
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	6013      	str	r3, [r2, #0]
}
 8005416:	bf00      	nop
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20000e7c 	.word	0x20000e7c
 8005424:	20000e80 	.word	0x20000e80

08005428 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800542e:	f000 f92d 	bl	800568c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <prvCheckForValidListAndQueue+0x60>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d120      	bne.n	800547c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800543a:	4814      	ldr	r0, [pc, #80]	; (800548c <prvCheckForValidListAndQueue+0x64>)
 800543c:	f7fe f82a 	bl	8003494 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005440:	4813      	ldr	r0, [pc, #76]	; (8005490 <prvCheckForValidListAndQueue+0x68>)
 8005442:	f7fe f827 	bl	8003494 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005446:	4b13      	ldr	r3, [pc, #76]	; (8005494 <prvCheckForValidListAndQueue+0x6c>)
 8005448:	4a10      	ldr	r2, [pc, #64]	; (800548c <prvCheckForValidListAndQueue+0x64>)
 800544a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800544c:	4b12      	ldr	r3, [pc, #72]	; (8005498 <prvCheckForValidListAndQueue+0x70>)
 800544e:	4a10      	ldr	r2, [pc, #64]	; (8005490 <prvCheckForValidListAndQueue+0x68>)
 8005450:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005452:	2300      	movs	r3, #0
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	4b11      	ldr	r3, [pc, #68]	; (800549c <prvCheckForValidListAndQueue+0x74>)
 8005458:	4a11      	ldr	r2, [pc, #68]	; (80054a0 <prvCheckForValidListAndQueue+0x78>)
 800545a:	2110      	movs	r1, #16
 800545c:	200a      	movs	r0, #10
 800545e:	f7fe f931 	bl	80036c4 <xQueueGenericCreateStatic>
 8005462:	4603      	mov	r3, r0
 8005464:	4a08      	ldr	r2, [pc, #32]	; (8005488 <prvCheckForValidListAndQueue+0x60>)
 8005466:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005468:	4b07      	ldr	r3, [pc, #28]	; (8005488 <prvCheckForValidListAndQueue+0x60>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d005      	beq.n	800547c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <prvCheckForValidListAndQueue+0x60>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	490b      	ldr	r1, [pc, #44]	; (80054a4 <prvCheckForValidListAndQueue+0x7c>)
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe fd82 	bl	8003f80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800547c:	f000 f936 	bl	80056ec <vPortExitCritical>
}
 8005480:	bf00      	nop
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000e84 	.word	0x20000e84
 800548c:	20000e54 	.word	0x20000e54
 8005490:	20000e68 	.word	0x20000e68
 8005494:	20000e7c 	.word	0x20000e7c
 8005498:	20000e80 	.word	0x20000e80
 800549c:	20000f30 	.word	0x20000f30
 80054a0:	20000e90 	.word	0x20000e90
 80054a4:	08005f9c 	.word	0x08005f9c

080054a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3b04      	subs	r3, #4
 80054b8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	3b04      	subs	r3, #4
 80054c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f023 0201 	bic.w	r2, r3, #1
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3b04      	subs	r3, #4
 80054d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054d8:	4a08      	ldr	r2, [pc, #32]	; (80054fc <pxPortInitialiseStack+0x54>)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3b14      	subs	r3, #20
 80054e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3b20      	subs	r3, #32
 80054ee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80054f0:	68fb      	ldr	r3, [r7, #12]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr
 80054fc:	08005501 	.word	0x08005501

08005500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005506:	2300      	movs	r3, #0
 8005508:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800550a:	4b12      	ldr	r3, [pc, #72]	; (8005554 <prvTaskExitError+0x54>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005512:	d00a      	beq.n	800552a <prvTaskExitError+0x2a>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	60fb      	str	r3, [r7, #12]
}
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <prvTaskExitError+0x28>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	60bb      	str	r3, [r7, #8]
}
 800553c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800553e:	bf00      	nop
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0fc      	beq.n	8005540 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005546:	bf00      	nop
 8005548:	bf00      	nop
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	2000000c 	.word	0x2000000c
	...

08005560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005560:	4b07      	ldr	r3, [pc, #28]	; (8005580 <pxCurrentTCBConst2>)
 8005562:	6819      	ldr	r1, [r3, #0]
 8005564:	6808      	ldr	r0, [r1, #0]
 8005566:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800556a:	f380 8809 	msr	PSP, r0
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f04f 0000 	mov.w	r0, #0
 8005576:	f380 8811 	msr	BASEPRI, r0
 800557a:	f04e 0e0d 	orr.w	lr, lr, #13
 800557e:	4770      	bx	lr

08005580 <pxCurrentTCBConst2>:
 8005580:	20000954 	.word	0x20000954
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop

08005588 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005588:	4806      	ldr	r0, [pc, #24]	; (80055a4 <prvPortStartFirstTask+0x1c>)
 800558a:	6800      	ldr	r0, [r0, #0]
 800558c:	6800      	ldr	r0, [r0, #0]
 800558e:	f380 8808 	msr	MSP, r0
 8005592:	b662      	cpsie	i
 8005594:	b661      	cpsie	f
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	df00      	svc	0
 80055a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055a2:	bf00      	nop
 80055a4:	e000ed08 	.word	0xe000ed08

080055a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055ae:	4b32      	ldr	r3, [pc, #200]	; (8005678 <xPortStartScheduler+0xd0>)
 80055b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	22ff      	movs	r2, #255	; 0xff
 80055be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	4b2a      	ldr	r3, [pc, #168]	; (800567c <xPortStartScheduler+0xd4>)
 80055d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055d6:	4b2a      	ldr	r3, [pc, #168]	; (8005680 <xPortStartScheduler+0xd8>)
 80055d8:	2207      	movs	r2, #7
 80055da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055dc:	e009      	b.n	80055f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80055de:	4b28      	ldr	r3, [pc, #160]	; (8005680 <xPortStartScheduler+0xd8>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	4a26      	ldr	r2, [pc, #152]	; (8005680 <xPortStartScheduler+0xd8>)
 80055e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fa:	2b80      	cmp	r3, #128	; 0x80
 80055fc:	d0ef      	beq.n	80055de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80055fe:	4b20      	ldr	r3, [pc, #128]	; (8005680 <xPortStartScheduler+0xd8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f1c3 0307 	rsb	r3, r3, #7
 8005606:	2b04      	cmp	r3, #4
 8005608:	d00a      	beq.n	8005620 <xPortStartScheduler+0x78>
	__asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	60bb      	str	r3, [r7, #8]
}
 800561c:	bf00      	nop
 800561e:	e7fe      	b.n	800561e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005620:	4b17      	ldr	r3, [pc, #92]	; (8005680 <xPortStartScheduler+0xd8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	021b      	lsls	r3, r3, #8
 8005626:	4a16      	ldr	r2, [pc, #88]	; (8005680 <xPortStartScheduler+0xd8>)
 8005628:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800562a:	4b15      	ldr	r3, [pc, #84]	; (8005680 <xPortStartScheduler+0xd8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005632:	4a13      	ldr	r2, [pc, #76]	; (8005680 <xPortStartScheduler+0xd8>)
 8005634:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	b2da      	uxtb	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800563e:	4b11      	ldr	r3, [pc, #68]	; (8005684 <xPortStartScheduler+0xdc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a10      	ldr	r2, [pc, #64]	; (8005684 <xPortStartScheduler+0xdc>)
 8005644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005648:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800564a:	4b0e      	ldr	r3, [pc, #56]	; (8005684 <xPortStartScheduler+0xdc>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a0d      	ldr	r2, [pc, #52]	; (8005684 <xPortStartScheduler+0xdc>)
 8005650:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005654:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005656:	f000 f8b9 	bl	80057cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800565a:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <xPortStartScheduler+0xe0>)
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005660:	f7ff ff92 	bl	8005588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005664:	f7ff f8b4 	bl	80047d0 <vTaskSwitchContext>
	prvTaskExitError();
 8005668:	f7ff ff4a 	bl	8005500 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	e000e400 	.word	0xe000e400
 800567c:	20000f80 	.word	0x20000f80
 8005680:	20000f84 	.word	0x20000f84
 8005684:	e000ed20 	.word	0xe000ed20
 8005688:	2000000c 	.word	0x2000000c

0800568c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	607b      	str	r3, [r7, #4]
}
 80056a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80056a6:	4b0f      	ldr	r3, [pc, #60]	; (80056e4 <vPortEnterCritical+0x58>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3301      	adds	r3, #1
 80056ac:	4a0d      	ldr	r2, [pc, #52]	; (80056e4 <vPortEnterCritical+0x58>)
 80056ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80056b0:	4b0c      	ldr	r3, [pc, #48]	; (80056e4 <vPortEnterCritical+0x58>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d10f      	bne.n	80056d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056b8:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <vPortEnterCritical+0x5c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <vPortEnterCritical+0x4c>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	603b      	str	r3, [r7, #0]
}
 80056d4:	bf00      	nop
 80056d6:	e7fe      	b.n	80056d6 <vPortEnterCritical+0x4a>
	}
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	2000000c 	.word	0x2000000c
 80056e8:	e000ed04 	.word	0xe000ed04

080056ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80056f2:	4b11      	ldr	r3, [pc, #68]	; (8005738 <vPortExitCritical+0x4c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10a      	bne.n	8005710 <vPortExitCritical+0x24>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	607b      	str	r3, [r7, #4]
}
 800570c:	bf00      	nop
 800570e:	e7fe      	b.n	800570e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005710:	4b09      	ldr	r3, [pc, #36]	; (8005738 <vPortExitCritical+0x4c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3b01      	subs	r3, #1
 8005716:	4a08      	ldr	r2, [pc, #32]	; (8005738 <vPortExitCritical+0x4c>)
 8005718:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800571a:	4b07      	ldr	r3, [pc, #28]	; (8005738 <vPortExitCritical+0x4c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d105      	bne.n	800572e <vPortExitCritical+0x42>
 8005722:	2300      	movs	r3, #0
 8005724:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	f383 8811 	msr	BASEPRI, r3
}
 800572c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr
 8005738:	2000000c 	.word	0x2000000c
 800573c:	00000000 	.word	0x00000000

08005740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005740:	f3ef 8009 	mrs	r0, PSP
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <pxCurrentTCBConst>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005750:	6010      	str	r0, [r2, #0]
 8005752:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005756:	f04f 0050 	mov.w	r0, #80	; 0x50
 800575a:	f380 8811 	msr	BASEPRI, r0
 800575e:	f7ff f837 	bl	80047d0 <vTaskSwitchContext>
 8005762:	f04f 0000 	mov.w	r0, #0
 8005766:	f380 8811 	msr	BASEPRI, r0
 800576a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800576e:	6819      	ldr	r1, [r3, #0]
 8005770:	6808      	ldr	r0, [r1, #0]
 8005772:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005776:	f380 8809 	msr	PSP, r0
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	4770      	bx	lr

08005780 <pxCurrentTCBConst>:
 8005780:	20000954 	.word	0x20000954
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop

08005788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	607b      	str	r3, [r7, #4]
}
 80057a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80057a2:	f7fe ff57 	bl	8004654 <xTaskIncrementTick>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80057ac:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <SysTick_Handler+0x40>)
 80057ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	2300      	movs	r3, #0
 80057b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	f383 8811 	msr	BASEPRI, r3
}
 80057be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80057c0:	bf00      	nop
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057d0:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <vPortSetupTimerInterrupt+0x30>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057d6:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <vPortSetupTimerInterrupt+0x34>)
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057dc:	4b09      	ldr	r3, [pc, #36]	; (8005804 <vPortSetupTimerInterrupt+0x38>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a09      	ldr	r2, [pc, #36]	; (8005808 <vPortSetupTimerInterrupt+0x3c>)
 80057e2:	fba2 2303 	umull	r2, r3, r2, r3
 80057e6:	099b      	lsrs	r3, r3, #6
 80057e8:	4a08      	ldr	r2, [pc, #32]	; (800580c <vPortSetupTimerInterrupt+0x40>)
 80057ea:	3b01      	subs	r3, #1
 80057ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057ee:	4b03      	ldr	r3, [pc, #12]	; (80057fc <vPortSetupTimerInterrupt+0x30>)
 80057f0:	2207      	movs	r2, #7
 80057f2:	601a      	str	r2, [r3, #0]
}
 80057f4:	bf00      	nop
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr
 80057fc:	e000e010 	.word	0xe000e010
 8005800:	e000e018 	.word	0xe000e018
 8005804:	20000000 	.word	0x20000000
 8005808:	10624dd3 	.word	0x10624dd3
 800580c:	e000e014 	.word	0xe000e014

08005810 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005816:	f3ef 8305 	mrs	r3, IPSR
 800581a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b0f      	cmp	r3, #15
 8005820:	d914      	bls.n	800584c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005822:	4a16      	ldr	r2, [pc, #88]	; (800587c <vPortValidateInterruptPriority+0x6c>)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800582c:	4b14      	ldr	r3, [pc, #80]	; (8005880 <vPortValidateInterruptPriority+0x70>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	7afa      	ldrb	r2, [r7, #11]
 8005832:	429a      	cmp	r2, r3
 8005834:	d20a      	bcs.n	800584c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	607b      	str	r3, [r7, #4]
}
 8005848:	bf00      	nop
 800584a:	e7fe      	b.n	800584a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800584c:	4b0d      	ldr	r3, [pc, #52]	; (8005884 <vPortValidateInterruptPriority+0x74>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <vPortValidateInterruptPriority+0x78>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	429a      	cmp	r2, r3
 800585a:	d90a      	bls.n	8005872 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	603b      	str	r3, [r7, #0]
}
 800586e:	bf00      	nop
 8005870:	e7fe      	b.n	8005870 <vPortValidateInterruptPriority+0x60>
	}
 8005872:	bf00      	nop
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr
 800587c:	e000e3f0 	.word	0xe000e3f0
 8005880:	20000f80 	.word	0x20000f80
 8005884:	e000ed0c 	.word	0xe000ed0c
 8005888:	20000f84 	.word	0x20000f84

0800588c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08a      	sub	sp, #40	; 0x28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005894:	2300      	movs	r3, #0
 8005896:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005898:	f7fe fe22 	bl	80044e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800589c:	4b58      	ldr	r3, [pc, #352]	; (8005a00 <pvPortMalloc+0x174>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80058a4:	f000 f910 	bl	8005ac8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80058a8:	4b56      	ldr	r3, [pc, #344]	; (8005a04 <pvPortMalloc+0x178>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f040 808e 	bne.w	80059d2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01d      	beq.n	80058f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80058bc:	2208      	movs	r2, #8
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4413      	add	r3, r2
 80058c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d014      	beq.n	80058f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f023 0307 	bic.w	r3, r3, #7
 80058d4:	3308      	adds	r3, #8
 80058d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <pvPortMalloc+0x6c>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	617b      	str	r3, [r7, #20]
}
 80058f4:	bf00      	nop
 80058f6:	e7fe      	b.n	80058f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d069      	beq.n	80059d2 <pvPortMalloc+0x146>
 80058fe:	4b42      	ldr	r3, [pc, #264]	; (8005a08 <pvPortMalloc+0x17c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	429a      	cmp	r2, r3
 8005906:	d864      	bhi.n	80059d2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005908:	4b40      	ldr	r3, [pc, #256]	; (8005a0c <pvPortMalloc+0x180>)
 800590a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800590c:	4b3f      	ldr	r3, [pc, #252]	; (8005a0c <pvPortMalloc+0x180>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005912:	e004      	b.n	800591e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	429a      	cmp	r2, r3
 8005926:	d903      	bls.n	8005930 <pvPortMalloc+0xa4>
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1f1      	bne.n	8005914 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005930:	4b33      	ldr	r3, [pc, #204]	; (8005a00 <pvPortMalloc+0x174>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005936:	429a      	cmp	r2, r3
 8005938:	d04b      	beq.n	80059d2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2208      	movs	r2, #8
 8005940:	4413      	add	r3, r2
 8005942:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	1ad2      	subs	r2, r2, r3
 8005954:	2308      	movs	r3, #8
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	429a      	cmp	r2, r3
 800595a:	d91f      	bls.n	800599c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800595c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4413      	add	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <pvPortMalloc+0xf8>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	613b      	str	r3, [r7, #16]
}
 8005980:	bf00      	nop
 8005982:	e7fe      	b.n	8005982 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	1ad2      	subs	r2, r2, r3
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005996:	69b8      	ldr	r0, [r7, #24]
 8005998:	f000 f8f8 	bl	8005b8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800599c:	4b1a      	ldr	r3, [pc, #104]	; (8005a08 <pvPortMalloc+0x17c>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	4a18      	ldr	r2, [pc, #96]	; (8005a08 <pvPortMalloc+0x17c>)
 80059a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059aa:	4b17      	ldr	r3, [pc, #92]	; (8005a08 <pvPortMalloc+0x17c>)
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4b18      	ldr	r3, [pc, #96]	; (8005a10 <pvPortMalloc+0x184>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d203      	bcs.n	80059be <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059b6:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <pvPortMalloc+0x17c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a15      	ldr	r2, [pc, #84]	; (8005a10 <pvPortMalloc+0x184>)
 80059bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <pvPortMalloc+0x178>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	431a      	orrs	r2, r3
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80059d2:	f7fe fd93 	bl	80044fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <pvPortMalloc+0x16a>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	60fb      	str	r3, [r7, #12]
}
 80059f2:	bf00      	nop
 80059f4:	e7fe      	b.n	80059f4 <pvPortMalloc+0x168>
	return pvReturn;
 80059f6:	69fb      	ldr	r3, [r7, #28]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3728      	adds	r7, #40	; 0x28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	20001b90 	.word	0x20001b90
 8005a04:	20001b9c 	.word	0x20001b9c
 8005a08:	20001b94 	.word	0x20001b94
 8005a0c:	20001b88 	.word	0x20001b88
 8005a10:	20001b98 	.word	0x20001b98

08005a14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d048      	beq.n	8005ab8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a26:	2308      	movs	r3, #8
 8005a28:	425b      	negs	r3, r3
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	4b21      	ldr	r3, [pc, #132]	; (8005ac0 <vPortFree+0xac>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <vPortFree+0x44>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	60fb      	str	r3, [r7, #12]
}
 8005a54:	bf00      	nop
 8005a56:	e7fe      	b.n	8005a56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <vPortFree+0x62>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	60bb      	str	r3, [r7, #8]
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <vPortFree+0xac>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d019      	beq.n	8005ab8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d115      	bne.n	8005ab8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <vPortFree+0xac>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	43db      	mvns	r3, r3
 8005a96:	401a      	ands	r2, r3
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a9c:	f7fe fd20 	bl	80044e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	4b07      	ldr	r3, [pc, #28]	; (8005ac4 <vPortFree+0xb0>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	4a06      	ldr	r2, [pc, #24]	; (8005ac4 <vPortFree+0xb0>)
 8005aac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005aae:	6938      	ldr	r0, [r7, #16]
 8005ab0:	f000 f86c 	bl	8005b8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ab4:	f7fe fd22 	bl	80044fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ab8:	bf00      	nop
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	20001b9c 	.word	0x20001b9c
 8005ac4:	20001b94 	.word	0x20001b94

08005ac8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ace:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005ad2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ad4:	4b27      	ldr	r3, [pc, #156]	; (8005b74 <prvHeapInit+0xac>)
 8005ad6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00c      	beq.n	8005afc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3307      	adds	r3, #7
 8005ae6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0307 	bic.w	r3, r3, #7
 8005aee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	4a1f      	ldr	r2, [pc, #124]	; (8005b74 <prvHeapInit+0xac>)
 8005af8:	4413      	add	r3, r2
 8005afa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b00:	4a1d      	ldr	r2, [pc, #116]	; (8005b78 <prvHeapInit+0xb0>)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b06:	4b1c      	ldr	r3, [pc, #112]	; (8005b78 <prvHeapInit+0xb0>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	4413      	add	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b14:	2208      	movs	r2, #8
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	1a9b      	subs	r3, r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0307 	bic.w	r3, r3, #7
 8005b22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4a15      	ldr	r2, [pc, #84]	; (8005b7c <prvHeapInit+0xb4>)
 8005b28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b2a:	4b14      	ldr	r3, [pc, #80]	; (8005b7c <prvHeapInit+0xb4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b32:	4b12      	ldr	r3, [pc, #72]	; (8005b7c <prvHeapInit+0xb4>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	1ad2      	subs	r2, r2, r3
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b48:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <prvHeapInit+0xb4>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4a0a      	ldr	r2, [pc, #40]	; (8005b80 <prvHeapInit+0xb8>)
 8005b56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	4a09      	ldr	r2, [pc, #36]	; (8005b84 <prvHeapInit+0xbc>)
 8005b5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b60:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <prvHeapInit+0xc0>)
 8005b62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b66:	601a      	str	r2, [r3, #0]
}
 8005b68:	bf00      	nop
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000f88 	.word	0x20000f88
 8005b78:	20001b88 	.word	0x20001b88
 8005b7c:	20001b90 	.word	0x20001b90
 8005b80:	20001b98 	.word	0x20001b98
 8005b84:	20001b94 	.word	0x20001b94
 8005b88:	20001b9c 	.word	0x20001b9c

08005b8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b94:	4b27      	ldr	r3, [pc, #156]	; (8005c34 <prvInsertBlockIntoFreeList+0xa8>)
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	e002      	b.n	8005ba0 <prvInsertBlockIntoFreeList+0x14>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d8f7      	bhi.n	8005b9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d108      	bne.n	8005bce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	441a      	add	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	441a      	add	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d118      	bne.n	8005c14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <prvInsertBlockIntoFreeList+0xac>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d00d      	beq.n	8005c0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	441a      	add	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	e008      	b.n	8005c1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c0a:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <prvInsertBlockIntoFreeList+0xac>)
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	e003      	b.n	8005c1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d002      	beq.n	8005c2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c2a:	bf00      	nop
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr
 8005c34:	20001b88 	.word	0x20001b88
 8005c38:	20001b90 	.word	0x20001b90

08005c3c <atoi>:
 8005c3c:	220a      	movs	r2, #10
 8005c3e:	2100      	movs	r1, #0
 8005c40:	f000 b87e 	b.w	8005d40 <strtol>

08005c44 <_strtol_l.constprop.0>:
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4a:	4686      	mov	lr, r0
 8005c4c:	4690      	mov	r8, r2
 8005c4e:	d001      	beq.n	8005c54 <_strtol_l.constprop.0+0x10>
 8005c50:	2b24      	cmp	r3, #36	; 0x24
 8005c52:	d906      	bls.n	8005c62 <_strtol_l.constprop.0+0x1e>
 8005c54:	f000 f8dc 	bl	8005e10 <__errno>
 8005c58:	2316      	movs	r3, #22
 8005c5a:	6003      	str	r3, [r0, #0]
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c62:	460d      	mov	r5, r1
 8005c64:	4835      	ldr	r0, [pc, #212]	; (8005d3c <_strtol_l.constprop.0+0xf8>)
 8005c66:	462a      	mov	r2, r5
 8005c68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c6c:	5d06      	ldrb	r6, [r0, r4]
 8005c6e:	f016 0608 	ands.w	r6, r6, #8
 8005c72:	d1f8      	bne.n	8005c66 <_strtol_l.constprop.0+0x22>
 8005c74:	2c2d      	cmp	r4, #45	; 0x2d
 8005c76:	d12e      	bne.n	8005cd6 <_strtol_l.constprop.0+0x92>
 8005c78:	2601      	movs	r6, #1
 8005c7a:	782c      	ldrb	r4, [r5, #0]
 8005c7c:	1c95      	adds	r5, r2, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d057      	beq.n	8005d32 <_strtol_l.constprop.0+0xee>
 8005c82:	2b10      	cmp	r3, #16
 8005c84:	d109      	bne.n	8005c9a <_strtol_l.constprop.0+0x56>
 8005c86:	2c30      	cmp	r4, #48	; 0x30
 8005c88:	d107      	bne.n	8005c9a <_strtol_l.constprop.0+0x56>
 8005c8a:	782a      	ldrb	r2, [r5, #0]
 8005c8c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005c90:	2a58      	cmp	r2, #88	; 0x58
 8005c92:	d149      	bne.n	8005d28 <_strtol_l.constprop.0+0xe4>
 8005c94:	2310      	movs	r3, #16
 8005c96:	786c      	ldrb	r4, [r5, #1]
 8005c98:	3502      	adds	r5, #2
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8005ca0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005ca4:	fbbc f9f3 	udiv	r9, ip, r3
 8005ca8:	4610      	mov	r0, r2
 8005caa:	fb03 ca19 	mls	sl, r3, r9, ip
 8005cae:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005cb2:	2f09      	cmp	r7, #9
 8005cb4:	d814      	bhi.n	8005ce0 <_strtol_l.constprop.0+0x9c>
 8005cb6:	463c      	mov	r4, r7
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	dd20      	ble.n	8005cfe <_strtol_l.constprop.0+0xba>
 8005cbc:	1c57      	adds	r7, r2, #1
 8005cbe:	d007      	beq.n	8005cd0 <_strtol_l.constprop.0+0x8c>
 8005cc0:	4581      	cmp	r9, r0
 8005cc2:	d319      	bcc.n	8005cf8 <_strtol_l.constprop.0+0xb4>
 8005cc4:	d101      	bne.n	8005cca <_strtol_l.constprop.0+0x86>
 8005cc6:	45a2      	cmp	sl, r4
 8005cc8:	db16      	blt.n	8005cf8 <_strtol_l.constprop.0+0xb4>
 8005cca:	2201      	movs	r2, #1
 8005ccc:	fb00 4003 	mla	r0, r0, r3, r4
 8005cd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cd4:	e7eb      	b.n	8005cae <_strtol_l.constprop.0+0x6a>
 8005cd6:	2c2b      	cmp	r4, #43	; 0x2b
 8005cd8:	bf04      	itt	eq
 8005cda:	782c      	ldrbeq	r4, [r5, #0]
 8005cdc:	1c95      	addeq	r5, r2, #2
 8005cde:	e7ce      	b.n	8005c7e <_strtol_l.constprop.0+0x3a>
 8005ce0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005ce4:	2f19      	cmp	r7, #25
 8005ce6:	d801      	bhi.n	8005cec <_strtol_l.constprop.0+0xa8>
 8005ce8:	3c37      	subs	r4, #55	; 0x37
 8005cea:	e7e5      	b.n	8005cb8 <_strtol_l.constprop.0+0x74>
 8005cec:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005cf0:	2f19      	cmp	r7, #25
 8005cf2:	d804      	bhi.n	8005cfe <_strtol_l.constprop.0+0xba>
 8005cf4:	3c57      	subs	r4, #87	; 0x57
 8005cf6:	e7df      	b.n	8005cb8 <_strtol_l.constprop.0+0x74>
 8005cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfc:	e7e8      	b.n	8005cd0 <_strtol_l.constprop.0+0x8c>
 8005cfe:	1c53      	adds	r3, r2, #1
 8005d00:	d108      	bne.n	8005d14 <_strtol_l.constprop.0+0xd0>
 8005d02:	2322      	movs	r3, #34	; 0x22
 8005d04:	4660      	mov	r0, ip
 8005d06:	f8ce 3000 	str.w	r3, [lr]
 8005d0a:	f1b8 0f00 	cmp.w	r8, #0
 8005d0e:	d0a6      	beq.n	8005c5e <_strtol_l.constprop.0+0x1a>
 8005d10:	1e69      	subs	r1, r5, #1
 8005d12:	e006      	b.n	8005d22 <_strtol_l.constprop.0+0xde>
 8005d14:	b106      	cbz	r6, 8005d18 <_strtol_l.constprop.0+0xd4>
 8005d16:	4240      	negs	r0, r0
 8005d18:	f1b8 0f00 	cmp.w	r8, #0
 8005d1c:	d09f      	beq.n	8005c5e <_strtol_l.constprop.0+0x1a>
 8005d1e:	2a00      	cmp	r2, #0
 8005d20:	d1f6      	bne.n	8005d10 <_strtol_l.constprop.0+0xcc>
 8005d22:	f8c8 1000 	str.w	r1, [r8]
 8005d26:	e79a      	b.n	8005c5e <_strtol_l.constprop.0+0x1a>
 8005d28:	2430      	movs	r4, #48	; 0x30
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1b5      	bne.n	8005c9a <_strtol_l.constprop.0+0x56>
 8005d2e:	2308      	movs	r3, #8
 8005d30:	e7b3      	b.n	8005c9a <_strtol_l.constprop.0+0x56>
 8005d32:	2c30      	cmp	r4, #48	; 0x30
 8005d34:	d0a9      	beq.n	8005c8a <_strtol_l.constprop.0+0x46>
 8005d36:	230a      	movs	r3, #10
 8005d38:	e7af      	b.n	8005c9a <_strtol_l.constprop.0+0x56>
 8005d3a:	bf00      	nop
 8005d3c:	08005ff3 	.word	0x08005ff3

08005d40 <strtol>:
 8005d40:	4613      	mov	r3, r2
 8005d42:	460a      	mov	r2, r1
 8005d44:	4601      	mov	r1, r0
 8005d46:	4802      	ldr	r0, [pc, #8]	; (8005d50 <strtol+0x10>)
 8005d48:	6800      	ldr	r0, [r0, #0]
 8005d4a:	f7ff bf7b 	b.w	8005c44 <_strtol_l.constprop.0>
 8005d4e:	bf00      	nop
 8005d50:	2000005c 	.word	0x2000005c

08005d54 <memset>:
 8005d54:	4603      	mov	r3, r0
 8005d56:	4402      	add	r2, r0
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d100      	bne.n	8005d5e <memset+0xa>
 8005d5c:	4770      	bx	lr
 8005d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d62:	e7f9      	b.n	8005d58 <memset+0x4>

08005d64 <_reclaim_reent>:
 8005d64:	4b29      	ldr	r3, [pc, #164]	; (8005e0c <_reclaim_reent+0xa8>)
 8005d66:	b570      	push	{r4, r5, r6, lr}
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	4283      	cmp	r3, r0
 8005d6e:	d04b      	beq.n	8005e08 <_reclaim_reent+0xa4>
 8005d70:	69c3      	ldr	r3, [r0, #28]
 8005d72:	b143      	cbz	r3, 8005d86 <_reclaim_reent+0x22>
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d144      	bne.n	8005e04 <_reclaim_reent+0xa0>
 8005d7a:	69e3      	ldr	r3, [r4, #28]
 8005d7c:	6819      	ldr	r1, [r3, #0]
 8005d7e:	b111      	cbz	r1, 8005d86 <_reclaim_reent+0x22>
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 f87f 	bl	8005e84 <_free_r>
 8005d86:	6961      	ldr	r1, [r4, #20]
 8005d88:	b111      	cbz	r1, 8005d90 <_reclaim_reent+0x2c>
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f000 f87a 	bl	8005e84 <_free_r>
 8005d90:	69e1      	ldr	r1, [r4, #28]
 8005d92:	b111      	cbz	r1, 8005d9a <_reclaim_reent+0x36>
 8005d94:	4620      	mov	r0, r4
 8005d96:	f000 f875 	bl	8005e84 <_free_r>
 8005d9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005d9c:	b111      	cbz	r1, 8005da4 <_reclaim_reent+0x40>
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f000 f870 	bl	8005e84 <_free_r>
 8005da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005da6:	b111      	cbz	r1, 8005dae <_reclaim_reent+0x4a>
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 f86b 	bl	8005e84 <_free_r>
 8005dae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005db0:	b111      	cbz	r1, 8005db8 <_reclaim_reent+0x54>
 8005db2:	4620      	mov	r0, r4
 8005db4:	f000 f866 	bl	8005e84 <_free_r>
 8005db8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005dba:	b111      	cbz	r1, 8005dc2 <_reclaim_reent+0x5e>
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f000 f861 	bl	8005e84 <_free_r>
 8005dc2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005dc4:	b111      	cbz	r1, 8005dcc <_reclaim_reent+0x68>
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f000 f85c 	bl	8005e84 <_free_r>
 8005dcc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005dce:	b111      	cbz	r1, 8005dd6 <_reclaim_reent+0x72>
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f000 f857 	bl	8005e84 <_free_r>
 8005dd6:	6a23      	ldr	r3, [r4, #32]
 8005dd8:	b1b3      	cbz	r3, 8005e08 <_reclaim_reent+0xa4>
 8005dda:	4620      	mov	r0, r4
 8005ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005de0:	4718      	bx	r3
 8005de2:	5949      	ldr	r1, [r1, r5]
 8005de4:	b941      	cbnz	r1, 8005df8 <_reclaim_reent+0x94>
 8005de6:	3504      	adds	r5, #4
 8005de8:	69e3      	ldr	r3, [r4, #28]
 8005dea:	2d80      	cmp	r5, #128	; 0x80
 8005dec:	68d9      	ldr	r1, [r3, #12]
 8005dee:	d1f8      	bne.n	8005de2 <_reclaim_reent+0x7e>
 8005df0:	4620      	mov	r0, r4
 8005df2:	f000 f847 	bl	8005e84 <_free_r>
 8005df6:	e7c0      	b.n	8005d7a <_reclaim_reent+0x16>
 8005df8:	680e      	ldr	r6, [r1, #0]
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f000 f842 	bl	8005e84 <_free_r>
 8005e00:	4631      	mov	r1, r6
 8005e02:	e7ef      	b.n	8005de4 <_reclaim_reent+0x80>
 8005e04:	2500      	movs	r5, #0
 8005e06:	e7ef      	b.n	8005de8 <_reclaim_reent+0x84>
 8005e08:	bd70      	pop	{r4, r5, r6, pc}
 8005e0a:	bf00      	nop
 8005e0c:	2000005c 	.word	0x2000005c

08005e10 <__errno>:
 8005e10:	4b01      	ldr	r3, [pc, #4]	; (8005e18 <__errno+0x8>)
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	2000005c 	.word	0x2000005c

08005e1c <__libc_init_array>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	2600      	movs	r6, #0
 8005e20:	4d0c      	ldr	r5, [pc, #48]	; (8005e54 <__libc_init_array+0x38>)
 8005e22:	4c0d      	ldr	r4, [pc, #52]	; (8005e58 <__libc_init_array+0x3c>)
 8005e24:	1b64      	subs	r4, r4, r5
 8005e26:	10a4      	asrs	r4, r4, #2
 8005e28:	42a6      	cmp	r6, r4
 8005e2a:	d109      	bne.n	8005e40 <__libc_init_array+0x24>
 8005e2c:	f000 f87e 	bl	8005f2c <_init>
 8005e30:	2600      	movs	r6, #0
 8005e32:	4d0a      	ldr	r5, [pc, #40]	; (8005e5c <__libc_init_array+0x40>)
 8005e34:	4c0a      	ldr	r4, [pc, #40]	; (8005e60 <__libc_init_array+0x44>)
 8005e36:	1b64      	subs	r4, r4, r5
 8005e38:	10a4      	asrs	r4, r4, #2
 8005e3a:	42a6      	cmp	r6, r4
 8005e3c:	d105      	bne.n	8005e4a <__libc_init_array+0x2e>
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e44:	4798      	blx	r3
 8005e46:	3601      	adds	r6, #1
 8005e48:	e7ee      	b.n	8005e28 <__libc_init_array+0xc>
 8005e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e4e:	4798      	blx	r3
 8005e50:	3601      	adds	r6, #1
 8005e52:	e7f2      	b.n	8005e3a <__libc_init_array+0x1e>
 8005e54:	080060f4 	.word	0x080060f4
 8005e58:	080060f4 	.word	0x080060f4
 8005e5c:	080060f4 	.word	0x080060f4
 8005e60:	080060f8 	.word	0x080060f8

08005e64 <__retarget_lock_acquire_recursive>:
 8005e64:	4770      	bx	lr

08005e66 <__retarget_lock_release_recursive>:
 8005e66:	4770      	bx	lr

08005e68 <memcpy>:
 8005e68:	440a      	add	r2, r1
 8005e6a:	4291      	cmp	r1, r2
 8005e6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e70:	d100      	bne.n	8005e74 <memcpy+0xc>
 8005e72:	4770      	bx	lr
 8005e74:	b510      	push	{r4, lr}
 8005e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e7a:	4291      	cmp	r1, r2
 8005e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e80:	d1f9      	bne.n	8005e76 <memcpy+0xe>
 8005e82:	bd10      	pop	{r4, pc}

08005e84 <_free_r>:
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	4605      	mov	r5, r0
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	d040      	beq.n	8005f0e <_free_r+0x8a>
 8005e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e90:	1f0c      	subs	r4, r1, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bfb8      	it	lt
 8005e96:	18e4      	addlt	r4, r4, r3
 8005e98:	f000 f83c 	bl	8005f14 <__malloc_lock>
 8005e9c:	4a1c      	ldr	r2, [pc, #112]	; (8005f10 <_free_r+0x8c>)
 8005e9e:	6813      	ldr	r3, [r2, #0]
 8005ea0:	b933      	cbnz	r3, 8005eb0 <_free_r+0x2c>
 8005ea2:	6063      	str	r3, [r4, #4]
 8005ea4:	6014      	str	r4, [r2, #0]
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eac:	f000 b838 	b.w	8005f20 <__malloc_unlock>
 8005eb0:	42a3      	cmp	r3, r4
 8005eb2:	d908      	bls.n	8005ec6 <_free_r+0x42>
 8005eb4:	6820      	ldr	r0, [r4, #0]
 8005eb6:	1821      	adds	r1, r4, r0
 8005eb8:	428b      	cmp	r3, r1
 8005eba:	bf01      	itttt	eq
 8005ebc:	6819      	ldreq	r1, [r3, #0]
 8005ebe:	685b      	ldreq	r3, [r3, #4]
 8005ec0:	1809      	addeq	r1, r1, r0
 8005ec2:	6021      	streq	r1, [r4, #0]
 8005ec4:	e7ed      	b.n	8005ea2 <_free_r+0x1e>
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	b10b      	cbz	r3, 8005ed0 <_free_r+0x4c>
 8005ecc:	42a3      	cmp	r3, r4
 8005ece:	d9fa      	bls.n	8005ec6 <_free_r+0x42>
 8005ed0:	6811      	ldr	r1, [r2, #0]
 8005ed2:	1850      	adds	r0, r2, r1
 8005ed4:	42a0      	cmp	r0, r4
 8005ed6:	d10b      	bne.n	8005ef0 <_free_r+0x6c>
 8005ed8:	6820      	ldr	r0, [r4, #0]
 8005eda:	4401      	add	r1, r0
 8005edc:	1850      	adds	r0, r2, r1
 8005ede:	4283      	cmp	r3, r0
 8005ee0:	6011      	str	r1, [r2, #0]
 8005ee2:	d1e0      	bne.n	8005ea6 <_free_r+0x22>
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	4408      	add	r0, r1
 8005eea:	6010      	str	r0, [r2, #0]
 8005eec:	6053      	str	r3, [r2, #4]
 8005eee:	e7da      	b.n	8005ea6 <_free_r+0x22>
 8005ef0:	d902      	bls.n	8005ef8 <_free_r+0x74>
 8005ef2:	230c      	movs	r3, #12
 8005ef4:	602b      	str	r3, [r5, #0]
 8005ef6:	e7d6      	b.n	8005ea6 <_free_r+0x22>
 8005ef8:	6820      	ldr	r0, [r4, #0]
 8005efa:	1821      	adds	r1, r4, r0
 8005efc:	428b      	cmp	r3, r1
 8005efe:	bf01      	itttt	eq
 8005f00:	6819      	ldreq	r1, [r3, #0]
 8005f02:	685b      	ldreq	r3, [r3, #4]
 8005f04:	1809      	addeq	r1, r1, r0
 8005f06:	6021      	streq	r1, [r4, #0]
 8005f08:	6063      	str	r3, [r4, #4]
 8005f0a:	6054      	str	r4, [r2, #4]
 8005f0c:	e7cb      	b.n	8005ea6 <_free_r+0x22>
 8005f0e:	bd38      	pop	{r3, r4, r5, pc}
 8005f10:	20001cdc 	.word	0x20001cdc

08005f14 <__malloc_lock>:
 8005f14:	4801      	ldr	r0, [pc, #4]	; (8005f1c <__malloc_lock+0x8>)
 8005f16:	f7ff bfa5 	b.w	8005e64 <__retarget_lock_acquire_recursive>
 8005f1a:	bf00      	nop
 8005f1c:	20001cd8 	.word	0x20001cd8

08005f20 <__malloc_unlock>:
 8005f20:	4801      	ldr	r0, [pc, #4]	; (8005f28 <__malloc_unlock+0x8>)
 8005f22:	f7ff bfa0 	b.w	8005e66 <__retarget_lock_release_recursive>
 8005f26:	bf00      	nop
 8005f28:	20001cd8 	.word	0x20001cd8

08005f2c <_init>:
 8005f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2e:	bf00      	nop
 8005f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f32:	bc08      	pop	{r3}
 8005f34:	469e      	mov	lr, r3
 8005f36:	4770      	bx	lr

08005f38 <_fini>:
 8005f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3a:	bf00      	nop
 8005f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3e:	bc08      	pop	{r3}
 8005f40:	469e      	mov	lr, r3
 8005f42:	4770      	bx	lr
